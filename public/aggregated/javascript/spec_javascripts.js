/************************************************************************
 * 'spec_javascripts.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-03-22 20:38:47 +0000
 * Generated at: 2016-03-22 23:30:01 +0000
 ************************************************************************/


/************************************************************************
 * :files, 'spec_javascripts', ... (last modified: 2016-03-03 23:50:01 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - spec_javascripts/acceptance/my_uploads_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["acceptance/my_uploads_spec"] = function() {
        // TODO: We can't fill in forms with JS Spec yet
// https://scribd.fogbugz.com/default.asp?6138
describe('My Uploads', function() {
  it('pending');
  xit('should search', function() {
    navigate('/uploads');
    runs(function() {
      var $search = $('#search');
      $search.val('hello');
      $search.closest('form').submit();
    });
    runs(function() {
      expect($('.no_items').length).toBe(1);
    });
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/ads/test_page.js (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */

;


/* ----------------------------------------------------------------------
   - spec_javascripts/js_error_catcher_spec.js (last modified: 2016-02-18 20:37:17 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["js_error_catcher_spec"] = function() {
        // depends_on("spec_javascripts/js_spec_helper.js");

// describe("homepage", function() {
//   return it("Should not contain javascript errors", function() {
//     return check_javascript_errors_on_page("/");
//   });
// });

// describe("bunch o' static pages", function() {
//   return it("Should not contain javascript errors", function() {
//     return _.each(["/developers", "/press"], function(url) {});
//   });
// });

// describe("bunch o' user based pages", function() {
//   return it("Should not contain javascript errors", function() {
//     return _.each([ "/library"], function(url) { //"/pro-stats" throws a bunch of errors locally?
//       return check_javascript_errors_on_page(url);
//     });
//   });
// });

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec_helper.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */

;


/* ----------------------------------------------------------------------
   - spec_javascripts/newhome/base_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["newhome/base_spec"] = function() {
        describe("Scribd object", function() {
  it("should be able to parse valid URI parameters", function() {
    var parsed_params;
    parsed_params = Scribd.parse_parameters("#param=i&param2=like&param3=Baduk");
    return expect(parsed_params).toEqual({
      param: "i",
      param2: "like",
      param3: "Baduk"
    });
  });

  it("should be able to add parameters to an URL", function() {
    var old_url, new_url;

    old_url = "https://www.scribd.com"
    new_url = Scribd.add_url_parameters(old_url, {"foo": "bar"})
    expect(new_url).toEqual(old_url + "?foo=bar")

    old_url = "https://www.scribd.com?"
    new_url = Scribd.add_url_parameters(old_url, {"foo": "bar"})
    expect(new_url).toEqual(old_url + "foo=bar")

    old_url = "https://www.scribd.com?a=b"
    new_url = Scribd.add_url_parameters(old_url, {"foo": "bar"})
    expect(new_url).toEqual(old_url + "&foo=bar")

    old_url = "https://www.scribd.com#fragment"
    new_url = Scribd.add_url_parameters(old_url, {"foo": "bar"})
    expect(new_url).toEqual("https://www.scribd.com?foo=bar#fragment")

    old_url = "https://www.scribd.com?a=b#fragment"
    new_url = Scribd.add_url_parameters(old_url, {"foo": "bar"})
    expect(new_url).toEqual("https://www.scribd.com?a=b&foo=bar#fragment")
  });

  return it("should truncate strings of a given length", function() {
    var truncated_str;
    truncated_str = Scribd.truncate("Dot points should start now not later", 30);
    return expect(truncated_str).toEqual("Dot points should start now...");
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/items_spec_helper.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */

;


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/login_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/login_spec"] = function() {
        depends_on("spec_javascripts/js_spec_helper.js");

describe('Payment login', function() {
  it('should have all necessary fields visible', function() {
    var forms_and_fields = ["#login_or_email", "#login_password","#email", "#email_form", "#account_form"];

    Scribd.JsSpec.check_elements_visibility(forms_and_fields)
  });

});


      };


/* ----------------------------------------------------------------------
   - spec_javascripts/phantom_test_runner.js (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */

;


/* ----------------------------------------------------------------------
   - spec_javascripts/search/category_tree.js (last modified: 2016-03-03 23:50:01 +0000)
   ---------------------------------------------------------------------- */

;


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/content_list/container_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/content_list/container_spec"] = function() {
        var Promise = Scribd.Promise,
    Container = Scribd.Shared.ContentList.Container;

describe('Container', function() {
  it('pending');
});

xdescribe('Container', function() {
  xit('resets the paginator when the filter changes');

  function test_loads_page(container, url, params, response, callback) {
      var paginator = container.paginator;
      var list = container.list;
      var header = container.header;
      var json = new Promise;
      json.resolve(response);

      spyOn(paginator, 'update_page_count');
      spyOn(list, 'start_loading');
      spyOn($, 'getJSON').andReturn(json);

      callback();

      expect($.getJSON).toHaveBeenCalledWith(url, params);

      expect(paginator.update_page_count).toHaveBeenCalledWith(
          response.total_page_count);

      expect(list.start_loading).toHaveBeenCalled();
      expect(list).not.toBe(container.list);

      expect($('body').scrollTop()).toBe(0);
  }

  function create_container(options) {
    var defaults = {
      el: $('.home_container'),
      total_page_count: 1,
      paginator_type: 'NumberedPaginator'
    };
    return new Container(_.extend(defaults, options));
  }

  describe('responds to paginator event', function() {
    it('change_page', function() {
      var container = create_container({content_list_path: '/my-uploads'});
      var url = '/uploads';
      var params = {
        filter: 'all',
        sort_type: 'date',
        page_number: 2
      };
      var response = {total_page_count: 2};

      test_loads_page(container, url, params, response, function() {
        container.paginator.trigger('change_page', 2);
      });
    });

    it('next_page', function() {
      var container = create_container({content_list_path: '/recently-read'});
      var url = '/recently-read';
      var params = {
        filter: 'all',
        sort_type: 'date',
        timestamp: 1337,
        page_number: 3
      };
      var response = {next_timestamp: 1337};

      test_loads_page(container, url, params, response, function() {
        container.paginator.trigger('next_page');
        container.paginator.trigger('next_page');
      });
    });
  });

  it('responds to filters "select_option" event', function() {
    var container = create_container({content_list_path: '/my-uploads'});
    var url = '/uploads';
    var params = {
      filter: 'all',
      sort_type: 'date',
      page_number: 1
    };
    var response = {total_page_count: 1};

    test_loads_page(container, url, params, response, function() {
      container.filters.trigger('select_option', {
        showing: 'all',
        sort_by: 'date'
      });
    });
  });

  it('responds to header "submit_search" event', function() {
    var container = create_container({content_list_path: '/my-uploads'});
    var url = '/uploads/search';
    var params = {
      page_number: 1,
      filter: 'all',
      sort_type: 'date',
      query: 'hello world'
    };
    var response = {total_page_count: 1};

    test_loads_page(container, url, params, response, function() {
      container.header.trigger('submit_search', 'hello world');
    });
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/content_list/filters_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/content_list/filters_spec"] = function() {
        var Filters = Scribd.Shared.ContentList.Filters;

describe('Filters', function() {
  it('loads the initial state', function() {
    var filters = new Filters({el: $('.filters')});
    var state = filters.state();
    expect(state.showing).toBe('all');
    expect($('.showing .selected').data('option')).toBe('all');
    expect(state.sort_by).toBe('date');
    expect($('.sort_by .selected').data('option')).toBe('date');
  });

  it('selects options', function() {
    var filters = new Filters({el: $('.filters')});

    filters.select_option($('[data-option="public"]'))
    var state = filters.state();
    expect(state.showing).toBe('public');
    expect($('.showing .selected').data('option')).toBe('public');
    expect(state.sort_by).toBe('date');
    expect($('.sort_by .selected').data('option')).toBe('date');

    filters.select_option($('[data-option="title"]'))
    var new_state = filters.state();
    expect(new_state.showing).toBe('public');
    expect($('.showing .selected').data('option')).toBe('public');
    expect(new_state.sort_by).toBe('title');
    expect($('.sort_by .selected').data('option')).toBe('title');
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/content_list/header_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/content_list/header_spec"] = function() {
        var Header = Scribd.Shared.ContentList.Header;

describe('Header', function() {
  var async = new AsyncSpec(this);

  async.it('fires "submit_search" event', function(done) {
    var header = new Header({el: $('.content_list_header')});
    var $search_form = header.$('.search_box form');
    $search_form.find('.query').val('my cool query');

    header.on('submit_search', function(query) {
      expect(query).toBe('my cool query');
      done();
    });

    $search_form.submit();
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/content_list/infinite_paginator_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/content_list/infinite_paginator_spec"] = function() {
        var InfinitePaginator = Scribd.Shared.ContentList.InfinitePaginator;

describe('infinite paginator', function() {
  it('fires "next_page" events', function() {
    var new_page_number;
    var paginator = new InfinitePaginator({
      el: $('.infinite_paginator')
    });

    spyOn(paginator, 'trigger');
    paginator.next_page();
    expect(paginator.trigger).toHaveBeenCalledWith('next_page');
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/content_list/item_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/content_list/item_spec"] = function() {
        var Item = Scribd.Shared.ContentList.Item;

describe('Item', function() {
  var async = new AsyncSpec(this);

  describe('truncates', function(done) {
    async.it('long descriptions', function(done) {
      var item = new Item({el: $('.item')});
      var $description = item.$('.description');
      _.defer(function() {
        expect($description.triggerHandler('isTruncated')).toBe(true);
        done();
      });
    });

    async.it('long titles', function(done) {
      var item = new Item({el: $('.item')});
      var $title_link = item.$('.title a');
      _.defer(function() {
        expect($title_link.triggerHandler('isTruncated')).toBe(true);
        done();
      });
    });
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/edit_image/cropping_area_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/edit_image/cropping_area_spec"] = function() {
        var CroppingArea = Scribd.Shared.EditImage.CroppingArea;

describe('cropping area', function() {
  it('starts with a padded box for a 3:4 image', function() {
    var image = new Image(768, 1024);
    var cropping_area = new CroppingArea({
      el: $('.cropping_area'),
      image: image
    });
    _.defer(function() {
      var c = cropping_area.coordinates;
      expect(c.x).toBe(18);
      expect(c.y).toBe(24);
      expect(c.w).toBe(748);
      expect(c.h).toBe(1000);
    });
  });

  it('starts with a horizontally centered box for a wide image', function() {
    var image = new Image(1536, 1024);
    var cropping_area = new CroppingArea({
      el: $('.cropping_area'),
      image: image
    });
    _.defer(function() {
      var c = cropping_area.coordinates;
      expect(c.x).toBe(384);
      expect(c.y).toBe(0);
      expect(c.w).toBe(768);
      expect(c.h).toBe(1024);
    })
  });

  it('starts with a vertically centered box for a tall image', function() {
    var image = new Image(1024, 1536);
    var cropping_area = new CroppingArea({
      el: $('.cropping_area'),
      image: image
    });
    _.defer(function() {
      var c = cropping_area.coordinates;
      expect(c.x).toBe(0);
      expect(Math.round(c.y)).toBe(85);
      expect(c.w).toBe(1024);
      expect(Math.round(c.h)).toBe(1365);
    });
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/edit_image/lightbox_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/edit_image/lightbox_spec"] = function() {
        var FilePickerIo = Scribd.FilePickerIo,
    EditImage = Scribd.Shared.EditImage,
    Lightbox = EditImage.Lightbox,
    EditDefaultImage = EditImage.EditDefaultImage,
    UseTemplate = EditImage.UseTemplate,
    generated_image_url = '/images/js_spec/newuploads/test_image.jpg';

function create_test_lightbox(options) {
  options = _.extend({
    el: $('#edit_image_lb'),
    document_id: 949740,
    generated_image_url: generated_image_url
  }, options);
  return new Lightbox(options);
}

describe('lightbox', function() {
  var async = new AsyncSpec(this);

  beforeEach(function() {
    if (!Scribd.Lightbox.current_open) Scribd.Lightbox.initialize();
  });

  async.it('opens itself with Scribd.Lightbox', function(done) {
    expect(Scribd.Lightbox.current_open).toBeNull();
    var lightbox = create_test_lightbox();
    lightbox.open().then(function() {
      expect(Scribd.Lightbox.current_open).not.toBeNull();
      done();
    });
  });

  async.it('goes to the edit default image tab on first open', function(done) {
    var lightbox = create_test_lightbox();
    lightbox.open().then(function() {
      var tab = lightbox.selected_tab;
      expect(tab.constructor).toBe(EditDefaultImage);
      expect(tab.$el.hasClass('selected')).toBe(true);
      done();
    });
  });

  async.it('changes to a new tab', function(done) {
    var lightbox = create_test_lightbox();
    lightbox.open().then(function() {
      var initial_tab = lightbox.selected_tab;
      var new_tab = lightbox.select_tab('use_template');
      expect(initial_tab.constructor).not.toBe(new_tab.constructor);
      expect(initial_tab.$el.hasClass('selected')).toBe(false);
      expect(new_tab.constructor).toBe(UseTemplate);
      expect(new_tab.$el.hasClass('selected')).toBe(true);
      done();
    });
  });

  async.it("opens FilePicker when the user selects 'Upload New' for the first" +
      " time only", function(done) {
    var lightbox = create_test_lightbox();
    spyOn(FilePickerIo, 'get_image').andCallFake(function(callback) {
      callback({url: generated_image_url});
    });

    lightbox.open().then(function() {
      lightbox.select_tab('upload_new');
      expect(FilePickerIo.get_image.callCount).toBe(1);
      lightbox.select_tab('use_template');
      expect(FilePickerIo.get_image.callCount).toBe(1);
      lightbox.select_tab('upload_new');
      expect(FilePickerIo.get_image.callCount).toBe(1);
      done();
    });
  });

  async.it("opens FilePicker again if the user didn't upload something", function(done) {
    var lightbox = create_test_lightbox();
    spyOn(FilePickerIo, 'get_image').andCallFake(function(callback) {
      // Testing if FilePicker failed, so don't call the callback.
    });

    lightbox.open().then(function() {
      lightbox.select_tab('upload_new');
      expect(FilePickerIo.get_image.callCount).toBe(1);
      lightbox.select_tab('use_template');
      expect(FilePickerIo.get_image.callCount).toBe(1);
      lightbox.select_tab('upload_new');
      expect(FilePickerIo.get_image.callCount).toBe(2);
      done();
    })
  });

  it('populates the "Use Template" fields title with a given title', function() {
    var lightbox = create_test_lightbox({template_title: 'Hello World'}),
        tab = lightbox.select_tab('use_template');

    expect(tab.title.val()).toBe('Hello World');
  })
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/edit_image/preview_spec.js (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/edit_image/preview_spec"] = function() {
        var Preview = Scribd.Shared.EditImage.Preview;

function test_image() {
  var $image = $('#test_image').clone();
  $image.css('display', 'block');
  return $image;
}

describe('preview', function() {
  beforeEach(function() {
    $('.preview').empty();
  });

  it('inserts the image into the preview area', function() {
    var $image = test_image();
    var preview = new Preview({
      el: $('.preview'),
      image: $image,
      coordinates: {x: 10, y: 10, w: 150, h: 200}
    });

    var $img = preview.$el.find('img');
    expect($img.length).toBe(1);
  });

  it('positions and scales the image correctly', function() {
    var $image = test_image();
    var preview = new Preview({
      el: $('.preview'),
      image: $image,
      coordinates: {x: 10, y: 20, w: 192, h: 256}
    });

    _.defer(function() {
      expect($image.css('margin-top')).toBe('-40px');
      expect($image.css('margin-left')).toBe('-20px');
      expect($image.width()).toBe(1536);
      expect($image.height()).toBe(2048);

      preview.update({x: 10, y: 20, w: 384, h: 512});
      expect($image.css('margin-top')).toBe('-20px');
      expect($image.css('margin-left')).toBe('-10px');
      expect($image.width()).toBe(768);
      expect($image.height()).toBe(1024);
    });
  });
});

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/trackit_specs.js (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */

;




/************************************************************************
 * :files, 'spec_javascripts', ... (last modified: 2016-03-22 20:38:47 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - spec_javascripts/ads/test_page.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */

;


/* ----------------------------------------------------------------------
   - spec_javascripts/audiobooks/credit_restricted_player_spec.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["audiobooks/credit_restricted_player_spec"] = function() {
        (function() {
  var Simulate, async, it_does_not_show, it_shows, player_elm, player_node, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  Simulate = React.addons.TestUtils.Simulate;

  async = new AsyncSpec(this);

  player_node = $(".autogen_class_views_audiobooks_show")[0];

  player_elm = function(cls) {
    var ref1;
    return (ref1 = player_node.getElementsByClassName(cls)) != null ? ref1[0] : void 0;
  };

  describe('Credit Restricted Audioplayer UI', function() {
    it_shows([".is_preview_restricted", ".preview_timer", ".time_remaining"]);
    return expect($(".library_button:contains(Get full title)").length).toEqual(1);
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/audiobooks/player_spec.coffee (last modified: 2016-02-05 22:21:55 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["audiobooks/player_spec"] = function() {
        (function() {
  var Simulate, async, it_does_not_show, it_shows, player_elm, player_node, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  Simulate = React.addons.TestUtils.Simulate;

  async = new AsyncSpec(this);

  player_node = $(".autogen_class_views_audiobooks_show")[0];

  player_elm = function(cls) {
    var ref1;
    return (ref1 = player_node.getElementsByClassName(cls)) != null ? ref1[0] : void 0;
  };

  describe('Audioplayer UI', function() {
    beforeEach(function(done) {
      return waitsFor((function() {
        return $.isReady;
      }), "jQuery never got ready", 1000);
    });
    it("should have 3 control rows", function() {
      return expect($(".control_row").length).toBe(3);
    });
    it_shows([".header", ".library_button", ".options_handle", ".cover", ".player_container", ".meta"]);
    return it_does_not_show([".preview_timer"]);
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/credit_lightbox/credit_lightbox_spec.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["credit_lightbox/credit_lightbox_spec"] = function() {
        (function() {
  var load_widget;

  load_widget = Scribd.JsSpec.Support.load_widget;

  describe("CreditLightbox", function(async) {
    async.beforeEach(load_widget({}));
    return it('should open', function() {
      var data;
      Scribd.Lightbox.initialize();
      data = {
        content: $(".sandbox").html(),
        opts: {
          credit_balance: 0,
          credit_lightbox_url: "",
          pmp_document_purchases_url: "",
          credit_purchases_url: "",
          doc_id: "is this OK",
          payments_checkout_url: "",
          params: {}
        }
      };
      Scribd.CreditLightbox.load = function() {
        var lb;
        lb = Scribd.CreditLightbox.open_from_object("credit_lightbox", data.content, null, data.opts);
        return lb.open_with_event_container_and_params($(document.body), {});
      };
      Scribd.with_login = function(fn) {
        return fn();
      };
      $(".main_button span").click();
      return expect($("#credit_lightbox").is(":visible")).toBe(true);
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/example_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["example_spec"] = function() {
        (function() {
  var load_widget;

  load_widget = Scribd.JsSpec.Support.load_widget;

  describe('example', function(async) {
    async.beforeEach(load_widget({}));
    return it('has a testing sandbox', function() {
      return expect($('.sandbox').text()).toBe('Hello world');
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/billing_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/billing_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, with_widget = ref.with_widget, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Billing', function() {
    var defaults, for_widget, it_adds_error_classes, it_has_default_state, load_widget;
    defaults = {
      show_paypal: true,
      show_creditcard_form: true,
      user_has_active_orders: false,
      simple_checkout: true,
      paypal_checkout_action: 'redirect_to_paypal'
    };
    load_widget = function(options) {
      return with_widget('billing', _.extend({}, defaults, options));
    };
    for_widget = function(options, callback) {
      return function(async) {
        async.beforeEach(load_widget(options));
        return callback(async);
      };
    };
    it_has_default_state = function(options) {
      var does_not_show, except, shows;
      if (options == null) {
        options = {};
      }
      except = options.except;
      shows = ['.paypal'];
      does_not_show = ['.has_active_orders'];
      if (except) {
        shows = _.difference(shows, except);
        does_not_show = _.difference(does_not_show, except);
      }
      it_shows(shows);
      return it_does_not_show(does_not_show);
    };
    describe(':show_paypal =>', function() {
      describe('true', for_widget({
        show_paypal: true
      }, function() {
        it_has_default_state({
          except: ['.paypal']
        });
        return it_shows('.paypal');
      }));
      return describe('false', for_widget({
        show_paypal: false
      }, function() {
        it_has_default_state({
          except: ['.paypal']
        });
        return it_does_not_show('.paypal');
      }));
    });
    describe(':show_creditcard_form =>', function() {
      describe('true', for_widget({
        show_creditcard_form: true
      }, function() {
        it_has_default_state({
          except: ['.paypal']
        });
        return it_shows('.paypal');
      }));
      return describe('false', for_widget({
        show_creditcard_form: false
      }, function() {
        it_has_default_state({
          except: ['.paypal']
        });
        return it_shows('.paypal');
      }));
    });
    describe(':simple_checkout =>', function() {
      describe('true', for_widget({
        simple_checkout: true
      }, function() {
        it_has_default_state();
        return it_does_not_show('.address_fields');
      }));
      return describe('false', for_widget({
        simple_checkout: false
      }, function() {
        it_has_default_state();
        return it_shows('.address_fields');
      }));
    });
    it_adds_error_classes = function(attribute, fields) {
      return _.each(fields, function(field) {
        var selector;
        selector = "[name='" + attribute + "[" + field + "]']";
        return it("adds error class to " + selector, function() {
          return expect($(selector).hasClass('field_error')).toBe(true);
        });
      });
    };
    describe('with errors', function() {
      describe('with credit card', function() {
        var fields;
        fields = ['year', 'month', 'number', 'verification_value'];
        return describe('invalid', for_widget({
          errors: fields
        }, function() {
          return it_adds_error_classes('new_credit_card', fields);
        }));
      });
      return describe('with address', function() {
        var fields;
        fields = ['full_name', 'city', 'state', 'address', 'zip'];
        return describe('invalid', for_widget({
          errors: fields,
          simple_checkout: false
        }, function() {
          return it_adds_error_classes('new_billing_address', fields);
        }));
      });
    });
    return describe('with free trial', function() {
      describe('enabled', for_widget({
        free_trial: true
      }, function() {
        return it_shows('.free_trial_notice');
      }));
      return describe('disabled', for_widget({
        free_trial: false
      }, function() {
        return it_does_not_show('.free_trial_notice');
      }));
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/checkout_receipt_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/checkout_receipt_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, widget_loader;

  ref = Scribd.JsSpec.Support, widget_loader = ref.widget_loader, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('CheckoutReceipt', function() {
    var defaults, for_widget;
    defaults = {};
    for_widget = widget_loader(defaults);
    it('has items');
    describe('with a document', for_widget(function() {
      return it_shows('.document .thumbnail', '.document .title', '.document .description', '.document .read_button');
    }));
    describe('with a collection', for_widget(function() {
      return it('pending');
    }));
    return describe('with a subscription', for_widget(function() {
      return it('pending');
    }));
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/email_spec.coffee (last modified: 2016-01-21 00:14:19 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/email_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, widget_loader;

  ref = Scribd.JsSpec.Support, widget_loader = ref.widget_loader, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Email', function() {
    var for_widget;
    for_widget = widget_loader({});
    return describe('always', for_widget(function() {
      it_shows('.username');
      it_shows('.email_address_field');
      return it_shows('.continue_button');
    }));
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/items_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/items_spec"] = function() {
        (function() {
  depends_on('spec_javascripts/payments/checkout_flow/items_spec_helper.js');

  describe('Items', function() {
    var $items;
    $items = null;
    beforeEach(function() {
      return $items = $('.items');
    });
    return describe('displays', function() {
      it('has the first item', function() {
        return should_have_item($items, 0, {
          title: 'first title',
          description: 'first description',
          price: '$1.00 USD'
        });
      });
      it('has the second item', function() {
        return should_have_item($items, 1, {
          title: 'second title',
          description: 'second description',
          price: '$2.00 USD'
        });
      });
      return it('the total', function() {
        var $total;
        $total = $items.find('#total');
        return expect($total.text()).toBe('$3.00 USD');
      });
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/new_credit_card_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/new_credit_card_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  depends_on('spec_javascripts/payments/checkout_flow/items_spec_helper.js');

  ref = Scribd.JsSpec.Support, with_widget = ref.with_widget, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('NewCreditCard', function() {
    var labeled_input, load_widget;
    labeled_input = function(selector) {
      var underscored;
      underscored = selector.replace('[', '_').replace(']', '');
      return ["label[for='" + underscored + "']", "[name='" + selector + "']"];
    };
    load_widget = _.partial(with_widget, 'new_credit_card');
    describe(':cancel_button =>', function() {
      describe('true', function(async) {
        async.beforeEach(load_widget({
          cancel_button: true
        }));
        return it_shows('.cancel_button');
      });
      return describe('false', function(async) {
        async.beforeEach(load_widget({
          cancel_button: false
        }));
        return it_does_not_show('.cancel_button');
      });
    });
    return describe(':simple_checkout =>', function() {
      describe('false', function(async) {
        async.beforeEach(load_widget({
          simple_checkout: false
        }));
        return it_shows(labeled_input('new_billing_address[full_name]'), labeled_input('new_billing_address[city]'), labeled_input('new_billing_address[address]'), labeled_input('new_billing_address[country]'), '[name="new_credit_card[number]"]', '[name="new_credit_card[month]"]', '[name="new_credit_card[year]"]', '[name="new_credit_card[verification_value]"]', '.continue_button');
      });
      return describe('true', function(async) {
        async.beforeEach(load_widget({
          simple_checkout: true
        }));
        it_shows('[name="new_credit_card[number]"]', '[name="new_credit_card[month]"]', '[name="new_credit_card[year]"]', '[name="new_credit_card[verification_value]"]', '.continue_button');
        return it_does_not_show(labeled_input('new_billing_address[full_name]'), labeled_input('new_billing_address[city]'), labeled_input('new_billing_address[address]'), labeled_input('new_billing_address[country]'));
      });
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/preview_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/preview_spec"] = function() {
        (function() {
  var widget_loader;

  depends_on('spec_javascripts/payments/checkout_flow/items_spec_helper.js');

  widget_loader = Scribd.JsSpec.Support.widget_loader;

  describe('Preview', function(async) {
    var for_widget;
    for_widget = widget_loader({
      cart_items: false,
      free_trial: false
    });
    return describe('with items', for_widget({
      cart_items: true
    }, function() {
      return it('shows an item', function() {
        var $items;
        $items = $('#item_summary');
        return expect($items.is(':visible')).toBe(true);
      });
    }));
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/reauthenticate_facebook_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/reauthenticate_facebook_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, widget_loader;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show, widget_loader = ref.widget_loader;

  describe('ReauthenticateFacebook', function() {
    var for_widget, it_shows_defaults;
    for_widget = widget_loader({});
    it_shows_defaults = function() {
      return it_shows('.fb_button', '.items');
    };
    return describe('always', for_widget(function() {
      return it_shows_defaults();
    }));
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/reauthenticate_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/reauthenticate_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, widget_loader;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show, widget_loader = ref.widget_loader;

  describe('Reauthenticate', function() {
    var for_widget, it_shows_defaults;
    for_widget = widget_loader({
      with_email: false
    });
    it_shows_defaults = function() {
      return it_shows('#login_password', '.username', '.items', '.continue_button');
    };
    describe('always', for_widget(function() {
      return it_shows_defaults();
    }));
    return describe('with email', function() {
      return 'pending';
      describe('enabled', for_widget({
        with_email: true
      }, function() {
        it_shows_defaults();
        return it_shows('.email');
      }));
      return describe('disabled', for_widget({
        with_email: false
      }, function() {
        it_shows_defaults();
        return it_does_not_show('.email');
      }));
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow/redirect_to_paypal_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow/redirect_to_paypal_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, widget_loader;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show, widget_loader = ref.widget_loader;

  describe('Redirect to Paypal', function() {
    var for_widget, it_shows_defaults;
    for_widget = widget_loader({});
    it_shows_defaults = function() {
      return it_shows('#paypal_form');
    };
    return describe('always', for_widget(function() {
      return it_shows_defaults();
    }));
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow2/billing_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow2/billing_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, with_widget = ref.with_widget, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Billing', function() {
    var defaults, for_widget, it_adds_error_classes, it_has_default_state, load_widget;
    defaults = {
      show_paypal: true,
      show_creditcard_form: true,
      user_has_active_orders: false,
      simple_checkout: true,
      paypal_checkout_action: 'redirect_to_paypal'
    };
    load_widget = function(options) {
      return with_widget('billing', _.extend({}, defaults, options));
    };
    for_widget = function(options, callback) {
      return function(async) {
        async.beforeEach(load_widget(options));
        return callback(async);
      };
    };
    it_has_default_state = function(options) {
      var does_not_show, except, shows;
      if (options == null) {
        options = {};
      }
      except = options.except;
      shows = ['.paypal_form'];
      if (except) {
        shows = _.difference(shows, except);
        does_not_show = _.difference(does_not_show, except);
      }
      return it_shows(shows);
    };
    describe(':show_paypal =>', function() {
      describe('true', for_widget({
        show_paypal: true
      }, function() {
        it_has_default_state({
          except: ['.paypal_form']
        });
        return it_shows('.paypal_form');
      }));
      return describe('false', for_widget({
        show_paypal: false
      }, function() {
        it_has_default_state({
          except: ['.paypal_form']
        });
        return it_does_not_show('.paypal_form');
      }));
    });
    describe(':show_creditcard_form =>', function() {
      describe('true', for_widget({
        show_creditcard_form: true
      }, function() {
        it_has_default_state({
          except: ['.paypal_form']
        });
        return it_shows('.paypal_form');
      }));
      return describe('false', for_widget({
        show_creditcard_form: false
      }, function() {
        it_has_default_state({
          except: ['.paypal_form']
        });
        return it_shows('.paypal_form');
      }));
    });
    describe(':simple_checkout =>', function() {
      describe('true', for_widget({
        simple_checkout: true
      }, function() {
        it_has_default_state();
        return it_does_not_show('.address_fields');
      }));
      return describe('false', for_widget({
        simple_checkout: false
      }, function() {
        it_has_default_state();
        return it_shows('.address_fields');
      }));
    });
    it_adds_error_classes = function(attribute, fields) {
      return _.each(fields, function(field) {
        var selector;
        selector = "[name='" + attribute + "[" + field + "]']";
        return it("adds error class to " + selector, function() {
          return expect($(selector).closest('.field_error').is(':visible')).toBe(true);
        });
      });
    };
    return describe('with errors', function() {
      describe('with credit card', function() {
        var fields;
        fields = ['year', 'month', 'number', 'verification_value'];
        return describe('invalid', for_widget({
          errors: fields
        }, function() {
          return it_adds_error_classes('new_credit_card', fields);
        }));
      });
      return describe('with address', function() {
        var fields;
        fields = ['full_name', 'city', 'state', 'address', 'zip'];
        return describe('invalid', for_widget({
          errors: fields,
          simple_checkout: false
        }, function() {
          return it_adds_error_classes('new_billing_address', fields);
        }));
      });
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/checkout_flow2/preview_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/checkout_flow2/preview_spec"] = function() {
        (function() {
  var widget_loader;

  widget_loader = Scribd.JsSpec.Support.widget_loader;

  describe('Preview', function(async) {
    var for_widget;
    for_widget = widget_loader();
    return describe('show link', for_widget({}, function() {
      return it('shows link', function() {
        return expect($('.change_billing_info a').is(':visible')).toBe(true);
      });
    }));
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/plans/already_purchased_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/plans/already_purchased_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Show back to document buton', function() {
    it_shows(".flat_btn");
    return it("has the doc url", function() {
      return $(".flat_btn").attr("href");
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/plans/plans_incentivized_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/plans/plans_incentivized_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Shows basic PMP plan', function() {
    return it("should show 3 plans", function() {
      return expect($(".plan").length).toBe(3);
    });
  });

  describe('Should show document info', function() {
    it_shows(".autogen_class_views_archive_flow_doc_signup_info");
    return it_does_not_show(".want_premium");
  });

  describe('singup button should be properly named(english)', function() {
    return expect($('.plan_continue_button').text()).toBe("Join and download now");
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/plans/plans_with_doc_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/plans/plans_with_doc_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Shows basic PMP plan', function() {
    return it("should show 3 plans", function() {
      return expect($(".plan").length).toBe(3);
    });
  });

  describe('Should show document info', function() {
    it_shows(".autogen_class_views_archive_flow_doc_signup_info");
    it_shows(".want_premium");
    return expect($(".design .title h1").length).toBe(0);
  });

  describe('singup button should be properly named(english)', function() {
    return expect($('.plan_continue_button').text()).toBe("Join and download now");
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/payments/plans/pmp_plans_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["payments/plans/pmp_plans_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Shows basic PMP plan', function() {
    return it("should show 3 plans", function() {
      return expect($(".plan").length).toBe(3);
    });
  });

  describe('Should show document info', function() {
    it_does_not_show(".autogen_class_views_archive_flow_doc_signup_info");
    return it_does_not_show(".want_premium");
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/search/search_app_component_spec.coffee (last modified: 2016-03-03 23:50:10 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["search/search_app_component_spec"] = function() {
        (function() {
  var Simulate, it_does_not_show, it_shows, ref, widget_loader;

  ref = Scribd.JsSpec.Support, widget_loader = ref.widget_loader, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  Simulate = React.addons.TestUtils.Simulate;

  depends_on("spec_javascripts/search/category_tree.js");

  describe("Component Spec", function() {
    describe("Breadcrumbs", function() {
      ReactDOM.render(Scribd.R.Search.App.Breadcrumbs({
        facet_options_hash: {},
        content_type: "books",
        search_loading: false,
        snapshot: new Scribd.SearchSnapshot({}),
        category_branch: [
          {
            name: "First",
            value: "First"
          }, {
            name: "Second",
            value: "Second"
          }, {
            name: "Third",
            value: "Third"
          }
        ],
        result_count: 666
      }), breadcrumbs_container);
      it_shows([".breadcrumbs"]);
      it("Should render breadcrumbs", function() {});
      it("Should show categories", function() {
        var bd_text, crumb, j, len, ref1, results;
        bd_text = $(".breadcrumbs").text();
        ref1 = ["First", "Second", "Third"];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          crumb = ref1[j];
          results.push(expect(bd_text.indexOf(crumb) === -1).toBe(false));
        }
        return results;
      });
      it("Should show result count", function() {
        return expect($(".breadcrumbs .results").text()).toBe("666 results in");
      });
      return it("Should always have the last unclickable crumb", function() {
        return expect($(".breadcrumbs .unclickable.crumb").length).toBe(1);
      });
    });
    return describe("CategoryTree", function() {
      var content_type, j, len, ref1, results;
      describe("Empty state", function() {
        beforeEach(function() {
          return ReactDOM.render(Scribd.R.Search.App.CategoryTree({
            content_type: "tops",
            category_tree: Scribd.CategoryTree,
            selected_value: "",
            category_branch: []
          }), category_filter_container);
        });
        it_shows([".category_filter"]);
        it("Should render all content types", function() {
          var c_key, c_type, cat_text, j, len, ref1, results;
          cat_text = $(".category_filter").text();
          ref1 = Scribd.R.Search.CONTENT_TYPES;
          results = [];
          for (j = 0, len = ref1.length; j < len; j++) {
            c_type = ref1[j];
            c_key = Scribd.R.Search.App.content_key_to_text(c_type);
            results.push(expect(cat_text.indexOf(c_key) === -1).toBe(false));
          }
          return results;
        });
        return it("Should have tops selected", function() {
          return expect($(".category_filter .item.selected").data("id")).toBe("tops");
        });
      });
      ref1 = Scribd.R.Search.CONTENT_TYPES;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        content_type = ref1[j];
        if (content_type === "tops") {
          continue;
        }
        results.push((function(content_type) {
          return describe(" " + content_type + " Content Type", function() {
            describe("without category", function() {
              beforeEach(function() {
                return ReactDOM.render(Scribd.R.Search.App.CategoryTree({
                  content_type: content_type,
                  category_tree: Scribd.CategoryTree,
                  selected_value: content_type,
                  category_branch: Scribd.R.Search.App.category_branch(content_type, content_type, Scribd.CategoryTree)
                }), category_filter_container);
              });
              it("'All' item should have a caret", function() {
                var $all;
                $all = $(".category_filter .item").first();
                return expect($all.attr("class")).toBe("item selected with_caret");
              });
              return it(content_type + " should not have a caret", function() {
                var $selected_content_type;
                $selected_content_type = $(".item[data-id='" + content_type + "']");
                return expect($selected_content_type.attr("class")).toBe("item selected ");
              });
            });
            describe("with category", function() {
              var selected_value;
              selected_value = null;
              beforeEach(function() {
                var ref2;
                selected_value = ((ref2 = Scribd.CategoryTree[content_type]) != null ? ref2.children : void 0) ? Scribd.CategoryTree[content_type].children[0].id : void 0;
                return ReactDOM.render(Scribd.R.Search.App.CategoryTree({
                  content_type: content_type,
                  category_tree: Scribd.CategoryTree,
                  category_branch: Scribd.R.Search.App.category_branch(content_type, {
                    id: selected_value
                  }, Scribd.CategoryTree),
                  selected_value: selected_value || content_type
                }), category_filter_container);
              });
              it("should have caret", function() {
                var $selected_content_type;
                $selected_content_type = $(".item[data-id='" + content_type + "']");
                if (selected_value) {
                  return expect($selected_content_type.attr("class")).toBe("item selected with_caret");
                } else {
                  return expect($selected_content_type.attr("class")).toBe("item selected ");
                }
              });
              return it(" should have the category selected", function() {
                var $selected_category;
                if (selected_value) {
                  $selected_category = $(".item[data-id='" + selected_value + "']");
                  return expect($selected_category.attr("class")).toBe("item selected ");
                }
              });
            });
            if (content_type === "books") {
              return describe("with deep category", function() {
                var selected_value;
                selected_value = null;
                beforeEach(function() {
                  var el;
                  selected_value = (function() {
                    if (el = Scribd.CategoryTree[content_type]) {
                      while (el.subcategories) {
                        el = el.subcategories[0];
                      }
                      return el.id;
                    }
                  })();
                  return ReactDOM.render(Scribd.R.Search.App.CategoryTree({
                    content_type: content_type,
                    category_tree: Scribd.CategoryTree,
                    category_branch: Scribd.R.Search.App.category_branch(content_type, {
                      id: selected_value || content_type
                    }, Scribd.CategoryTree),
                    selected_value: selected_value || content_type
                  }), category_filter_container);
                });
                it("'" + content_type + "' should have caret", function() {
                  var $selected_content_type;
                  $selected_content_type = $(".item[data-id='" + content_type + "']");
                  if (selected_value) {
                    return expect($selected_content_type.attr("class")).toBe("item selected with_caret");
                  } else {
                    return expect($selected_content_type.attr("class")).toBe("item selected ");
                  }
                });
                return it(" parent categories should have caret", function() {
                  var cat, cat_branch, i, k, len1, results1;
                  cat_branch = Scribd.R.Search.App.category_branch(content_type, selected_value, Scribd.CategoryTree);
                  results1 = [];
                  for (i = k = 0, len1 = cat_branch.length; k < len1; i = ++k) {
                    cat = cat_branch[i];
                    results1.push((function(cat, i) {
                      var $selected_category;
                      $selected_category = $(".item[data-id='" + cat.id + "']");
                      if (i !== cat_branch.length - 1) {
                        return expect($selected_category.attr("class")).toBe("item selected with_caret");
                      } else {
                        return expect($selected_category.attr("class")).toBe("item selected ");
                      }
                    })(cat, i));
                  }
                  return results1;
                });
              });
            }
          });
        })(content_type));
      }
      return results;
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/search/search_app_spec.coffee (last modified: 2016-03-03 23:50:01 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["search/search_app_spec"] = function() {
        (function() {
  var CONTENT_TYPES, Simulate, TOP_RESULT_TYPES, app_node, for_widget, it_does_not_show, it_shows, load_widget, ref, widget_loader;

  ref = Scribd.JsSpec.Support, widget_loader = ref.widget_loader, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  Simulate = React.addons.TestUtils.Simulate;

  load_widget = Scribd.JsSpec.Support.load_widget;

  app_node = $(".autogen_class_views_search_page")[0];

  CONTENT_TYPES = ["books", "audiobooks", "sheet_music", "comics", "collections", "authors", "documents"];

  TOP_RESULT_TYPES = ["book", "audiobook", "author", "collection", "category", "unavailable_book", "unavailable_audiobook", "unavailable_author"];

  TOP_RESULT_TYPES = ["book"];

  for_widget = function(options, callback) {
    return function(async) {
      async.beforeEach(load_widget(options));
      return callback(async);
    };
  };


  /*
  
  describe 'Search App', for_widget {}, ->
    beforeEach (done) ->
      waitsFor (->
        $.isReady
      ), "jQuery never got ready", 1000
  
    describe "Tops Content", ->
      it "Should show all top content types", ->
        expect($(".row_header").length).toBe(CONTENT_TYPES.length)
  
      describe "Top Results", ->
        for top_result_type in TOP_RESULT_TYPES
          describe "Top #{top_result_type} Result", for_widget {
            top_result_type: top_result_type
          }, ->
            it_shows [
              ".top_#{top_result_type}_result"
            ]
   */

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/content_list/numbered_paginator_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/content_list/numbered_paginator_spec"] = function() {
        (function() {
  var NumberedPaginator;

  NumberedPaginator = Scribd.Shared.NumberedPaginator;

  describe('NumberedPaginator', function() {
    var paginator;
    paginator = void 0;
    beforeEach(function() {
      return paginator = new NumberedPaginator({
        el: $('.numbered_paginator')
      });
    });
    afterEach(function() {
      return paginator.undelegateEvents();
    });
    it('displays all pages when <= 20', function() {
      paginator.update_page_count(10);
      return expect(paginator.$('.page').length).toBe(10);
    });
    return describe('displays partial pages when > 20', function() {
      beforeEach(function() {
        return paginator.update_page_count(30);
      });
      it('with ellipses on both sides', function() {
        var first_ellipsis, second_ellipsis;
        paginator.update_current_page(15);
        expect(paginator.visible_pages()).toEqual(_.range(10, 21));
        first_ellipsis = paginator.$('.pages > :first-child');
        expect(first_ellipsis.hasClass('ellipsis')).toBe(true);
        second_ellipsis = paginator.$('.pages > :last-child');
        return expect(second_ellipsis.hasClass('ellipsis')).toBe(true);
      });
      it('with an ellipsis on the right', function() {
        var ellipsis;
        paginator.update_current_page(1);
        expect(paginator.visible_pages()).toEqual(_.range(1, 11));
        ellipsis = paginator.$('.pages > :last-child');
        return expect(ellipsis.hasClass('ellipsis')).toBe(true);
      });
      return it('with an ellipsis on the left', function() {
        var ellipsis;
        paginator.update_current_page(30);
        expect(paginator.visible_pages()).toEqual(_.range(20, 31));
        ellipsis = paginator.$('.pages > :first-child');
        return expect(ellipsis.hasClass('ellipsis')).toBe(true);
      });
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/document_list/carousels_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/document_list/carousels_spec"] = function() {
        (function() {
  describe('Document Carousel', function() {
    Scribd.logged_in = true;
    Scribd.Bookmarks.add_bookmark = function(data, opts) {
      var resp;
      resp = {
        data: {
          bookmark_id: 5,
          status: "currently_reading"
        }
      };
      if (opts.complete) {
        opts.complete(resp);
      }
      return resp;
    };
    Scribd.Bookmarks.remove_bookmark = function(data, opts) {
      return {};
    };
    return it('should slide to the right indefinitely', function() {
      var i, results;
      results = [];
      for (i = 1; i <= 50; i++) {
        $(".paddle_right").first().click();
        results.push(runs(function() {
          return expect($(".documents_carousel").hasClass("on_first_page")).toBe(false);
        }));
      }
      return results;
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/document_list/document_grid_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/document_list/document_grid_spec"] = function() {
        (function() {
  describe('Document Grid', function() {
    Scribd.Bookmarks.add_bookmark = function(data, opts) {
      var resp;
      resp = {
        data: {
          bookmark_id: 5,
          status: "currently_reading"
        }
      };
      if (opts.complete) {
        opts.complete(resp);
      }
      return resp;
    };
    Scribd.logged_in = true;
    Scribd.Bookmarks.remove_bookmark = function(data, opts) {
      return {};
    };
    return it('should slide to the right indefinitely', function() {
      return new Scribd.UI.ObjectGrid($(".document_grid"));
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/lightboxes/download_login_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/lightboxes/download_login_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Download Login', function() {
    beforeEach(function() {
      var active_subscription;
      active_subscription = $(".subscription_id").text();
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open('login_to_download_lb');
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#login_to_download_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    it_does_not_show("form.login_form");
    return it_shows(".continue_as_guest_btn", ".show_signin_form", ".show_signup_form", ".facebook_login_button");
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/lightboxes/join_to_continue_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/lightboxes/join_to_continue_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe("Join to Continue Lightbox", function() {
    beforeEach(function() {
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open("join_today_lb", Scribd.JoinTodayLightbox);
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#join_today_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    return it_shows(".scribd_fb_button", ".show_signup_form", ".show_signin_form");
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/lightboxes/login_spec.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/lightboxes/login_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe("Login Lightbox", function() {
    beforeEach(function() {
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open("login_lb", Scribd.LoginLightbox);
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#login_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    it_shows(".scribd_fb_button", ".login_form", ".forgot_password_btn", ".join_today_btn");
    return it("remember me should be checked", function() {
      return expect($("input[name=rememberme]").is(":checked")).toBe(true);
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/lightboxes/reset_password_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/lightboxes/reset_password_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe("Reset Password Lightbox", function() {
    beforeEach(function() {
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open("forgot_password_lb", Scribd.ForgotPasswordLightbox);
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#forgot_password_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    return it_shows(".forgot_password_form", ".back_to_login");
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/lightboxes/signup_spec.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/lightboxes/signup_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe("Signup Lightbox", function() {
    beforeEach(function() {
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open("signup_lb", Scribd.SignupLightbox);
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#signup_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    it_shows(".scribd_fb_button", ".signup_form", ".signin_instead", ".signup_disclosure");
    return it("signup optin should be checked", function() {
      return expect($("input[name=optin]").is(":checked")).toBe(true);
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/shared/root/pills_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["shared/root/pills_spec"] = function() {
        (function() {
  var load_widget;

  load_widget = Scribd.JsSpec.Support.load_widget;

  describe('Scribd.UI.Pills', function() {
    it('expects events to be triggered on pill clicking', function() {
      var callback, last_pill;
      callback = jasmine.createSpy();
      $(document).on("Scribd:pills", function(ev, data) {
        return callback(data);
      });
      last_pill = $(".pills .title").last();
      last_pill.click();
      return expect(callback).toHaveBeenCalledWith("Giraffes");
    });
    return it("should not trigger event on clicking disabled pill", function() {
      var callback;
      callback = jasmine.createSpy();
      $(document).on("Scribd:pills", callback);
      $(".pills .disabled").click();
      return expect(callback).not.toHaveBeenCalled();
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/store_purchase/invalid_country_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["store_purchase/invalid_country_spec"] = function() {
        (function() {
  var it_does_not_show, it_shows, ref, widget_loader;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show, widget_loader = ref.widget_loader;

  describe('Invalid country for purchase', function() {
    var for_widget, it_shows_defaults;
    for_widget = widget_loader({});
    it_shows_defaults = function() {
      return it_shows('.document_title', '.flat_btn');
    };
    return describe('always', for_widget(function() {
      return it_shows_defaults();
    }));
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/theme_pickers/themes_spec.coffee (last modified: 2015-04-17 18:25:58 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["theme_pickers/themes_spec"] = function() {
        (function() {
  var it_shows, ref, widget_loader;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, widget_loader = ref.widget_loader;

  Scribd.CSRF.get_csrf_value = Scribd.CSRF.get_csrf_params;

  describe('Should load profile', function(async) {
    return it('has a testing sandbox', function() {
      return expect($('.theme_picker').length).toBe(2);
    });
  });

}).call(this);

      };


/* ----------------------------------------------------------------------
   - spec_javascripts/trackit/trackit_spec.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
      Scribd.JS_SPEC_DEFINITIONS["trackit/trackit_spec"] = function() {
        (function() {
  var load_widget;

  load_widget = Scribd.JsSpec.Support.load_widget;

  depends_on("spec_javascripts/js_spec_helper.js");

  depends_on("public/javascripts/jasmine/jasmine-jquery.js");

  describe('Demo of track it', function() {
    window['$rat'] = ratInit('', {}, true);
    window['_gaq'] = [];
    window['ga'] = function() {};
    Scribd.allow_non_native_event_tracking = true;
    Scribd.after_login = function() {};
    return _.each(Scribd.Trackit.suites, function(trackit_spec) {
      return describe(trackit_spec.url + " url", function(async) {
        async.beforeEach(load_widget({
          url: trackit_spec.url
        }));
        return it(trackit_spec.selector + " should trigger rat event", function() {
          var spy;
          return;
          console.log("called");
          spy = spyOnEvent($(document), 'scribd:rat_event');
          $($(trackit_spec.selector).first()).removeClass("disabled").trigger(trackit_spec.action);
          if (trackit_spec.requirements) {
            return expect(spy).toHaveBeenTriggeredOnAndWith(document, trackit_spec.requirements);
          } else {
            return expect(spy).toHaveBeenTriggered();
          }
        });
      });
    });
  });

}).call(this);

      };




/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-03-03 23:50:10 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-03-03 23:50:10 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: (none))
 ************************************************************************/

