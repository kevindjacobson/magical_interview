/************************************************************************
 * 'search2.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:14 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-21 00:14:18 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/search/documents.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Search = (function() {
    function Search(container, opts) {
      this.container = container;
      if (opts == null) {
        opts = {};
      }
      this.container = $(this.container);
      this.setup_events();
      this.setup_dotdotdot();
      if (!opts.query) {
        this.container.find('input.term').trigger('focus');
      }
      Scribd.UI.AutocompleteServer.set_page_tracking(opts.content_type);
    }

    Search.prototype.setup_events = function() {
      return this.container.dispatch("click", {
        see_more: function($el) {
          return $el.closest(".filter_type").toggleClass("expanded");
        }
      });
    };

    Search.prototype.setup_dotdotdot = function() {
      return this.container.find(".title").dotdotdot({
        height: 72
      });
    };

    return Search;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/recommendation_tracking.coffee (last modified: 2016-01-21 00:14:18 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.RecommendationTracking = (function() {
    RecommendationTracking._page_count = 0;

    RecommendationTracking._compilation_ids = {};

    function RecommendationTracking() {
      throw "Scribd.RecommendationTracking is not instantiatable";
    }

    RecommendationTracking.Module = (function() {
      function Module(container, opts) {
        this.opts = opts != null ? opts : {};
        this.ready = bind(this.ready, this);
        this.container = $(container);
        this.container.on("scribd:enclosing_tracking_module", (function(_this) {
          return function(e, fn) {
            return fn(_this);
          };
        })(this));
        if (this.opts.compilation_id) {
          Scribd.RecommendationTracking.page_view_deferred(this.opts.compilation_id).done((function(_this) {
            return function(view_id) {
              return _this.ready(view_id, _this.opts.widget_name);
            };
          })(this));
        } else {
          this.container.on("scribd:setup_tracking", (function(_this) {
            return function(e, view_id, widget_name) {
              return _this.ready(view_id, widget_name);
            };
          })(this));
        }
      }

      Module.prototype.setup_inview_tracking = function() {
        if (this.tracking == null) {
          return typeof console !== "undefined" && console !== null ? console.error("missing tracking") : void 0;
        }
        this.container.one("inview", (function(_this) {
          return function() {
            var base;
            Scribd.RecommendationTracking.track_module_view(_this.tracking.view_id, _this.tracking.module_id, _this.tracking.widget_name);
            return typeof (base = _this.opts).on_in_view === "function" ? base.on_in_view(_this.tracking) : void 0;
          };
        })(this));
        return Scribd.RecommendationTracking.trigger_inview_check();
      };

      Module.prototype.setup_click_tracking = function(children) {
        var e, i, len, results;
        if (children == null) {
          children = this.container.find("[data-track_uuid]");
        }
        if (this.tracking == null) {
          return typeof console !== "undefined" && console !== null ? console.error("missing tracking") : void 0;
        }
        results = [];
        for (i = 0, len = children.length; i < len; i++) {
          e = children[i];
          e = $(e);
          e.attr("data-track_rats", "rc");
          results.push(e.attr("data-track_rats_value", JSON.stringify({
            "vi": this.tracking.view_id,
            "ri": e.data("track_uuid")
          })));
        }
        return results;
      };

      Module.prototype.ready = function(view_id, widget_name) {
        var base, module_id;
        module_id = this.opts.module_id || this.container.data("track_uuid");
        if (!module_id) {
          return;
        }
        this.tracking = {
          widget_name: widget_name,
          view_id: view_id,
          module_id: module_id
        };
        if (typeof (base = this.opts).on_tracking === "function") {
          base.on_tracking(this.tracking);
        }
        this.setup_inview_tracking();
        return this.setup_click_tracking();
      };

      return Module;

    })();

    RecommendationTracking.page_view_deferred = function(compilation_id) {
      var deferred;
      if (!compilation_id) {
        console.debug("attempted page view without compilation id");
        return $.Deferred();
      }
      RecommendationTracking._view_id_deferred || (RecommendationTracking._view_id_deferred = {});
      deferred = RecommendationTracking._view_id_deferred[compilation_id];
      if (!deferred) {
        deferred = $.Deferred();
        RecommendationTracking._view_id_deferred[compilation_id] = deferred;
        Scribd.RecommendationTracking.track_page_view(compilation_id, function(view_id) {
          return deferred.resolve(view_id);
        });
      }
      return deferred;
    };

    RecommendationTracking.track_page_view = function(compilation_id, callback) {
      var count;
      if (Scribd.logging_enabled) {
        console.debug("page view", compilation_id);
      }
      count = this._compilation_ids[compilation_id];
      if (count == null) {
        count = this._compilation_ids[compilation_id] = this._page_count++;
      }
      return $rat.root().withVid((function(_this) {
        return function(view_id) {
          view_id = view_id + "." + count;
          $rat("pv", {
            "vi": view_id,
            "ci": compilation_id
          });
          return typeof callback === "function" ? callback(view_id) : void 0;
        };
      })(this));
    };

    RecommendationTracking.track_module_view = function(view_id, module_id, widget) {
      var data;
      if (Scribd.logging_enabled) {
        console.debug("module view", arguments);
      }
      data = {
        "vi": view_id,
        "mi": module_id
      };
      if (widget != null) {
        data.w = widget;
      }
      return $rat("mv", data);
    };

    RecommendationTracking.track_obj_view = function(view_id, rec_id) {
      if (Scribd.logging_enabled) {
        console.debug("obj view", arguments);
      }
      return $rat("rv", {
        "vi": view_id,
        "ri": rec_id
      });
    };

    RecommendationTracking.track_obj_click = function(view_id, rec_id) {
      if (Scribd.logging_enabled) {
        console.debug("obj click", arguments);
      }
      return $rat("rc", {
        "vi": view_id,
        "ri": rec_id
      });
    };

    RecommendationTracking.trigger_inview_check = function() {
      this.trigger_inview_check = _.debounce(function() {
        return $.event.special.inview.run();
      }, 0);
      return this.trigger_inview_check();
    };

    return RecommendationTracking;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-06-29 23:18:10 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/react/radio_input.coffee (last modified: 2016-05-03 20:22:21 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, input, label, ref, span, types;

  ref = React.DOM, label = ref.label, input = ref.input, span = ref.span;

  component = Scribd.R.component_builder("Shared.React.RadioInput", {
    "css_class": "autogen_class_views_shared_react_radio_input"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      selected: types.bool,
      "class": types.string,
      value: types.string,
      name: types.string,
      label_text: types.string.isRequired
    },
    widget_css_classes: function(cls) {
      return classNames(cls, "radio_component", this.props["class"]);
    },
    render: function() {
      return label({
        className: classNames("radio_label", {
          checked: this.props.selected
        }),
        children: [
          input({
            onChange: this.props.onChange || (function(_this) {
              return function() {
                return _this.trigger("radio_selected", _this.props);
              };
            })(this),
            type: "radio",
            value: this.props.value,
            name: this.props.name,
            checked: this.props.selected,
            className: "radio_input"
          }), span({
            className: "input_text"
          }, this.props.label_text)
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/documents.coffee (last modified: 2016-03-03 23:50:10 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, div, types;

  div = React.DOM.div;

  component = Scribd.R.component_builder("Shared.React.Documents", {
    "css_class": "autogen_class_views_shared_react_documents"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      document_cells_html: types.string.isRequired,
      list_view_mode: types.bool
    },
    render_star_ratings: function() {
      var i, len, rating_stars_react_component, ref, results, star_root;
      ref = this.container().find(".star_ratings_props");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        star_root = ref[i];
        rating_stars_react_component = Scribd.R.Shared.React.StarRatings($(star_root).data("props"));
        results.push(ReactDOM.render(rating_stars_react_component, star_root));
      }
      return results;
    },
    componentDidMount: function() {
      return this.render_star_ratings();
    },
    componentDidUpdate: function() {
      return this.render_star_ratings();
    },
    raw_cells: function() {
      return {
        __html: this.props.document_cells_html
      };
    },
    render: function() {
      var list_view_mode_class;
      list_view_mode_class = this.props.list_view_mode ? "list_view_mode" : "";
      return div({
        className: "cell_container",
        children: [
          div({
            className: "has_document_cells " + list_view_mode_class,
            dangerouslySetInnerHTML: this.raw_cells()
          })
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/authors.coffee (last modified: 2016-03-03 23:50:10 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, h2, ref, types;

  ref = React.DOM, div = ref.div, a = ref.a, h2 = ref.h2;

  component = Scribd.R.component_builder("Shared.React.Authors", {
    "css_class": "autogen_class_views_shared_react_authors"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      authors: types.array.isRequired,
      list_view_mode: types.bool
    },
    render: function() {
      var author;
      return div({
        className: "authors " + (this.props.list_view_mode ? 'list_view' : ''),
        children: [
          (function() {
            var i, len, ref1, results;
            ref1 = this.props.authors || [];
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              author = ref1[i];
              results.push(div({
                className: "author author_cell object_cell",
                "data-id": author.id,
                children: [
                  a({
                    href: author.profile_url,
                    children: [Scribd.R.Shared.React.Persona(author.persona_props)]
                  }), a({
                    className: "author_data",
                    href: author.profile_url,
                    children: [
                      h2({
                        className: "author_title"
                      }, author.name), author.contribution_type ? div({
                        className: "sub author_contribution_type"
                      }, author.contribution_type) : void 0, author.most_popular_title ? div({
                        className: "sub"
                      }, "" + author.most_popular_title) : void 0
                    ]
                  })
                ]
              }));
            }
            return results;
          }).call(this)
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/collections.coffee (last modified: 2016-03-03 23:50:01 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, div, types;

  div = React.DOM.div;

  component = Scribd.R.component_builder("Shared.React.Collections", {
    "css_class": "autogen_class_views_shared_react_collections"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      collections_html: types.string.isRequired,
      list_view_mode: types.bool
    },
    raw_cells: function() {
      return {
        __html: this.props.collections_html
      };
    },
    render: function() {
      var list_view_mode_class;
      list_view_mode_class = this.props.list_view_mode ? "list_view" : "";
      return div({
        className: "collection_container " + list_view_mode_class,
        dangerouslySetInnerHTML: this.raw_cells()
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/paginator.coffee (last modified: 2016-03-03 23:50:10 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, ref, types;

  ref = React.DOM, div = ref.div, a = ref.a;

  component = Scribd.R.component_builder("Shared.React.Paginator", {
    "css_class": "autogen_class_views_shared_react_paginator"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      current_page: types.number.isRequired,
      page_count: types.number.isRequired
    },
    route: function(page_number) {
      var href;
      href = window.location.href;
      return Scribd.add_url_parameter(href, "page", page_number);
    },
    range: function() {
      var i, j, max, min, ref1, results, results1;
      if (this.props.current_page <= 5) {
        return (function() {
          results = [];
          for (var i = 1, ref1 = Math.max(1, Math.min(this.props.page_count, 10)); 1 <= ref1 ? i <= ref1 : i >= ref1; 1 <= ref1 ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this);
      } else {
        min = Math.max(this.props.current_page - 5, 1);
        max = Math.min(this.props.current_page + 5, this.props.page_count);
        return (function() {
          results1 = [];
          for (var j = min; min <= max ? j <= max : j >= max; min <= max ? j++ : j--){ results1.push(j); }
          return results1;
        }).apply(this);
      }
    },
    render: function() {
      var hide_class, page, selected_class;
      selected_class = (function(_this) {
        return function(page) {
          if (_this.props.current_page === page) {
            return "selected";
          } else {
            return "";
          }
        };
      })(this);
      hide_class = this.props.page_count <= 1 ? "hidden" : "";
      return div({
        className: "paginator " + hide_class,
        children: [
          this.props.current_page > 1 ? a({
            className: "previous",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("jump_to_page", _this.props.current_page - 1);
              };
            })(this)
          }) : void 0, (function() {
            var i, len, ref1, results;
            ref1 = this.range();
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              page = ref1[i];
              results.push((function(_this) {
                return function(page) {
                  return a({
                    href: _this.route(page),
                    "data-value": page,
                    key: page,
                    onClick: function(e) {
                      e.preventDefault();
                      if (_this.props.current_page !== page) {
                        return _this.trigger("jump_to_page", page);
                      }
                    },
                    className: "page " + (selected_class(page))
                  }, page);
                };
              })(this)(page));
            }
            return results;
          }).call(this), this.props.current_page < this.props.page_count ? a({
            className: "next",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("jump_to_page", _this.props.current_page + 1);
              };
            })(this)
          }) : void 0
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/persona.coffee (last modified: 2016-03-03 23:50:01 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, div, types;

  div = React.DOM.div;

  component = Scribd.R.component_builder("Shared.React.Persona", {
    "css_class": "autogen_class_views_shared_react_persona"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      size: types.string.isRequired,
      image_url: types.string,
      initials: types.string,
      author: types.bool.isRequired,
      persona_color: types.string.isRequired
    },
    route: function(page_number) {
      var href;
      href = window.location.href;
      return Scribd.add_url_parameter(href, "page", page_number);
    },
    range: function() {
      var i, j, max, min, ref, results, results1;
      if (this.props.current_page <= 5) {
        return (function() {
          results = [];
          for (var i = 1, ref = Math.min(this.props.page_count, 10); 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this);
      } else {
        min = Math.max(this.props.current_page - 5, 1);
        max = Math.min(this.props.current_page + 5, this.props.page_count);
        return (function() {
          results1 = [];
          for (var j = min; min <= max ? j <= max : j >= max; min <= max ? j++ : j--){ results1.push(j); }
          return results1;
        }).apply(this);
      }
    },
    render: function() {
      var css, user_class;
      user_class = !this.props.author && !this.props.image_url ? "icon-user" : "";
      css = {};
      if (this.props.image_url) {
        css["backgroundImage"] = "url('" + this.props.image_url + "')";
      } else if (this.props.author) {
        css["backgroundColor"] = this.props.persona_color;
      } else {
        css["color"] = this.props.persona_color;
      }
      return div({
        className: "autogen_class_views_shared_persona_icon persona_icon " + user_class + " " + this.props.size,
        style: css,
        children: [!this.props.image_url && this.props.author ? this.props.initials : void 0]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/search/app.coffee (last modified: 2016-06-29 23:18:10 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var CATEGORY_SHOW_MORE_LIMIT, CONTENT_TYPES, FACET_NAME_MAX_LENGTH, HIDE_SHOW_MORE_LIMIT, ONLY_LIST_VIEWS_CONTENT_TYPES, a, component, div, form, h2, input, ref, span, types,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = React.DOM, a = ref.a, div = ref.div, span = ref.span, form = ref.form, input = ref.input, h2 = ref.h2;

  component = Scribd.R.component_builder("Search.App", {
    "css_class": "autogen_class_views_search_app",
    "track_category": "search"
  });

  types = React.PropTypes;

  HIDE_SHOW_MORE_LIMIT = 5;

  CATEGORY_SHOW_MORE_LIMIT = 8;

  CONTENT_TYPES = ["tops", "books", "audiobooks", "documents", "sheet_music", "comics", "authors", "collections", "users"];

  ONLY_LIST_VIEWS_CONTENT_TYPES = ["authors", "collections", "users"];

  FACET_NAME_MAX_LENGTH = 24;

  Scribd.pretty_count = function(count) {
    if (count < 100) {
      return count;
    } else if (count < 1000) {
      return Math.floor(count / 100) * 100 + "+";
    } else {
      return Math.floor(count / 1000) + "K";
    }
  };

  Scribd.SearchSnapshot = (function() {
    function SearchSnapshot(state1) {
      var base;
      this.state = state1;
      (base = Scribd.SearchSnapshot).instances || (base.instances = []);
      Scribd.SearchSnapshot.instances.push(this);
      delete this.state.snapshot;
    }

    SearchSnapshot.prototype.core_search_state = function() {
      return _.extend({}, this.state.selected_facets_hash, {
        page: this.state.current_page,
        content_type: this.state.content_type,
        query: this.state.query
      });
    };

    SearchSnapshot.prototype.id = function() {
      var k, ref1, selected_facets, v;
      selected_facets = [];
      ref1 = this.state.selected_facets_hash;
      for (k in ref1) {
        v = ref1[k];
        selected_facets.push([k, v]);
      }
      return this.state.query + "-" + this.state.content_type + "-" + this.state.selected_facets_hash + "-" + this.state.current_page;
    };

    SearchSnapshot.prototype.url = function(filters, overrides) {
      if (filters == null) {
        filters = [];
      }
      if (overrides == null) {
        overrides = {};
      }
      return Scribd.SearchSnapshot.search_state_to_url(this.core_search_state(), filters, overrides);
    };

    SearchSnapshot.search_state_to_url = function(state, filters, overrides) {
      var app_state_url, j, k, v;
      if (filters == null) {
        filters = [];
      }
      if (overrides == null) {
        overrides = {};
      }
      app_state_url = "search?";
      for (k in state) {
        v = state[k];
        if (indexOf.call(filters, k) >= 0) {
          continue;
        }
        j = overrides[k] || v;
        app_state_url = Scribd.add_url_parameter(app_state_url, k, j);
      }
      return app_state_url;
    };

    return SearchSnapshot;

  })();

  component({
    "static": {
      content_key_to_text: function(key) {
        switch (key) {
          case "authors":
            return "Contributors";
          case "tops":
            return "All";
          case "sheet_music":
            return "Sheet Music";
          default:
            return key.capitalize();
        }
      },
      facet_name: function(facet_options_hash, field, value) {
        var l, len, options, ref1;
        if (!facet_options_hash[field]) {
          console.info("invalid options " + field + " for", facet_options_hash);
        }
        if (!facet_options_hash[field]) {
          return value;
        }
        ref1 = facet_options_hash[field];
        for (l = 0, len = ref1.length; l < len; l++) {
          options = ref1[l];
          if (options.value === value) {
            return options.name;
          }
        }
      },
      category_branch: function(content_type, category, category_tree) {
        var branches, categories, ref1, top_categories;
        if (!category) {
          return [];
        }
        top_categories = ((ref1 = category_tree[content_type]) != null ? ref1.subcategories : void 0) || [];
        categories = [];
        branches = (function(_this) {
          return function(selected_category, category_branch, set) {
            var branch, cat, l, len;
            for (l = 0, len = set.length; l < len; l++) {
              cat = set[l];
              if (Number(cat.id) === Number(selected_category.id)) {
                category_branch.push(cat);
                return category_branch;
              }
              if (cat.subcategories) {
                branch = branches(selected_category, category_branch, cat.subcategories);
                if (branch.length) {
                  category_branch.push(cat);
                  category_branch.concat(branch);
                  return category_branch;
                }
              }
            }
            return [];
          };
        })(this);
        return branches(category, [], top_categories).reverse();
      }
    },
    propTypes: {
      content_type: types.string.isRequired,
      facet_options_hash: types.object.isRequired,
      selected_facets_hash: types.object.isRequired,
      translated_facet_fields: types.object.isRequired,
      category_tree: types.object.isRequired,
      results: types.object.isRequired,
      query: types.string.isRequired,
      current_page: types.number.isRequired,
      result_count: types.number,
      page_count: types.number,
      top_result: types.shape({
        type: types.string.IsRequired,
        content: types.object.isRequired,
        title: types.string
      })
    },
    getInitialState: function() {
      return {
        content_type: this.props.content_type,
        selected_facets_hash: this.props.selected_facets_hash,
        facet_options_hash: this.props.facet_options_hash,
        translated_facet_fields: this.props.translated_facet_fields,
        search_xhr: null,
        results: this.props.results,
        query: this.props.query,
        result_count: this.props.result_count,
        current_page: this.props.current_page,
        page_count: this.props.page_count,
        top_result: this.props.top_result,
        list_view_mode: true,
        snapshot: new Scribd.SearchSnapshot(this.props)
      };
    },
    update_url_state: function() {
      var title;
      title = "Search | '" + this.state.query + "'";
      return history.pushState({
        search_snapshot: this.state.snapshot,
        title: title
      }, title, this.state.snapshot.url());
    },
    componentDidUpdate: function() {
      if (this.state.execute_search) {
        return this.trigger("perform_search");
      }
    },
    search: function(opts) {
      var ref1, search_options, xhr;
      if (opts == null) {
        opts = {};
      }
      if (!this.state.query) {
        return;
      }
      if ((ref1 = this.state.search_xhr) != null) {
        ref1.abort();
      }
      search_options = _.extend({}, this.state.selected_facets_hash, {
        query: this.state.query,
        content_type: this.state.content_type,
        page: this.state.current_page,
        search_session_id: Scribd.R.Shared.React.SearchInput.get_search_session_id()
      }, opts);
      $("html, body").animate({
        scrollTop: 0
      });
      this.container().track_rats("search:results:serve", search_options);
      xhr = $.get("/search/query", search_options);
      xhr.done((function(_this) {
        return function(resp) {
          resp.snapshot = new Scribd.SearchSnapshot(resp);
          _this.setState(resp);
          return _this.update_url_state();
        };
      })(this));
      xhr.always((function(_this) {
        return function() {
          return _this.setState({
            search_xhr: null
          });
        };
      })(this));
      return this.setState({
        search_xhr: xhr,
        execute_search: false
      });
    },
    componentDidMount: function() {
      this.container().track_rats("search:tab:view", {
        search_content_type: this.props.content_type,
        search_session_id: Scribd.R.Shared.React.SearchInput.get_search_session_id()
      });
      window.history.replaceState({
        search_snapshot: this.state.snapshot
      }, {
        title: "Search | '" + this.state.query + "'"
      }, this.state.snapshot.url());
      $(window).on("popstate.browser_history", (function(_this) {
        return function(e) {
          var new_state, state;
          state = e.originalEvent.state;
          if (state.search_snapshot) {
            new_state = state.search_snapshot.state;
            new_state.snapshot = new Scribd.SearchSnapshot(new_state);
            return _this.setState(new_state);
          }
        };
      })(this));
      return this.dispatch({
        jump_to_page: (function(_this) {
          return function(e, page) {
            _this.setState({
              current_page: page
            });
            return _this.trigger("queue_search");
          };
        })(this),
        submit_search: (function(_this) {
          return function(e, query) {
            _this.setState({
              query: query,
              current_page: 1
            });
            return _this.trigger("queue_search");
          };
        })(this),
        queue_search: (function(_this) {
          return function() {
            return _this.setState({
              execute_search: true
            });
          };
        })(this),
        perform_search: (function(_this) {
          return function() {
            return _this.search();
          };
        })(this),
        search_new_content_type: (function(_this) {
          return function(e, v, facets_to_filter) {
            var facet, l, len, new_selected_facets_hash, ref1;
            new_selected_facets_hash = _this.state.content_type === v ? _.clone(_this.state.selected_facets_hash) : {};
            delete new_selected_facets_hash.category;
            if (facets_to_filter) {
              ref1 = facets_to_filter.split(",");
              for (l = 0, len = ref1.length; l < len; l++) {
                facet = ref1[l];
                delete new_selected_facets_hash[facet];
              }
            }
            _this.container().track_rats("search:tab:view_end", {
              search_content_type: _this.state.content_type,
              search_session_id: Scribd.R.Shared.React.SearchInput.get_search_session_id()
            });
            _this.container().track_rats("search:tab:view", {
              search_content_type: v,
              search_session_id: Scribd.R.Shared.React.SearchInput.get_search_session_id()
            });
            return _this.setState({
              content_type: v,
              current_page: 1,
              execute_search: true,
              selected_facets_hash: new_selected_facets_hash,
              list_view_mode: (indexOf.call(ONLY_LIST_VIEWS_CONTENT_TYPES, v) >= 0) ? true : _this.state.list_view_mode
            });
          };
        })(this),
        see_all: (function(_this) {
          return function(e, v) {
            return _this.trigger("search_new_content_type", v);
          };
        })(this),
        crumb_clicked: (function(_this) {
          return function(e, v) {
            return _this.trigger("filter_selected", v);
          };
        })(this),
        filter_selected: (function(_this) {
          return function(e, v) {
            var facet, l, len, new_selected_facets_hash, ref1;
            _this.container().track_rats("search:filter:click", {
              field: v.field,
              value: v.value,
              search_content_type: _this.state.content_type,
              search_session_id: Scribd.R.Shared.React.SearchInput.get_search_session_id()
            });
            if (v.field === "content_type") {
              return _this.trigger("search_new_content_type", v.value, v.facets_to_filter);
            } else {
              new_selected_facets_hash = _.clone(_this.state.selected_facets_hash);
              new_selected_facets_hash[v.field] = v.value;
              if (v.facets_to_filter) {
                ref1 = v.facets_to_filter.split(",");
                for (l = 0, len = ref1.length; l < len; l++) {
                  facet = ref1[l];
                  delete new_selected_facets_hash[facet];
                }
              }
              _this.setState({
                selected_facets_hash: new_selected_facets_hash
              });
              if (v.type !== "category_group") {
                return _this.trigger("queue_search");
              }
            }
          };
        })(this),
        list_view_mode_toggle: (function(_this) {
          return function(e, v) {
            _this.container().track_rats("search:view_type:click", {
              new_view_type: v ? "list" : "grid",
              search_session_id: Scribd.R.Shared.React.SearchInput.get_search_session_id()
            });
            return _this.setState({
              list_view_mode: v
            });
          };
        })(this)
      });
    },
    search_options: function() {
      var opts;
      opts = {
        query: this.state.query,
        content_type: this.state.content_type,
        page: this.state.current_page
      };
      return _.extend({}, this.state.selected_facets_hash);
    },
    render: function() {
      var category_branch, ref1, search_loading, show_loading_class;
      category_branch = Scribd.R.Search.App.category_branch(this.state.content_type, {
        id: this.state.selected_facets_hash.category
      }, this.props.category_tree);
      show_loading_class = this.state.search_xhr ? "" : "hidden";
      search_loading = !!(this.state.search_xhr || this.state.execute_search);
      return div({
        className: "column_container",
        children: [
          div({
            className: "column filter_column",
            children: [
              this.Package.Filters({
                category_tree: this.props.category_tree,
                category_branch: category_branch,
                content_type: this.state.content_type,
                facet_options_hash: this.state.facet_options_hash,
                selected_facets_hash: this.state.selected_facets_hash,
                translated_facet_fields: this.state.translated_facet_fields
              })
            ]
          }), div({
            className: "results column",
            children: [
              Scribd.R.Shared.React.SearchInput({
                query: this.state.query,
                focused: true,
                redirect_to_app: false
              }), div({
                className: "document_content",
                children: [
                  this.state.top_result ? this.Package.TopResult(_.extend({}, this.state.top_result, {
                    content_type: this.state.content_type,
                    search_loading: search_loading
                  })) : void 0, div({
                    className: "result_top_row",
                    children: [
                      div({
                        children: [
                          this.Package.Breadcrumbs({
                            search_loading: search_loading,
                            facet_options_hash: this.state.facet_options_hash,
                            category_branch: category_branch,
                            selected_facets: this.state.selected_facets_hash,
                            result_count: this.state.result_count || 0,
                            content_type: this.state.content_type,
                            snapshot: this.state.snapshot
                          })
                        ]
                      }), !(ref1 = this.state.content_type, indexOf.call(ONLY_LIST_VIEWS_CONTENT_TYPES, ref1) >= 0) && this.state.content_type !== "tops" ? div({
                        className: "view_mode",
                        children: [
                          span({
                            className: "icon-toc icon  " + (this.state.list_view_mode ? 'active' : 'inactive'),
                            onClick: (function(_this) {
                              return function() {
                                return _this.trigger("list_view_mode_toggle", true);
                              };
                            })(this)
                          }), span({
                            className: "icon-grid icon " + (this.state.list_view_mode ? 'inactive' : 'active'),
                            onClick: (function(_this) {
                              return function() {
                                return _this.trigger("list_view_mode_toggle", false);
                              };
                            })(this)
                          })
                        ]
                      }) : void 0
                    ]
                  }), div({
                    className: "loading_layer " + show_loading_class,
                    children: [
                      div({
                        className: "white_layer"
                      }), div({
                        className: "scribd_spinner",
                        "data-size": 60
                      })
                    ]
                  }), this.state.result_count === 0 ? div({
                    className: "empty_state",
                    children: [
                      div({
                        className: "message_centerer",
                        children: [
                          div({
                            className: "empty_image"
                          }), span({}, "Sorry we couldn't find any results that matched "), span({
                            className: "user_query"
                          }, this.state.query), "."
                        ]
                      })
                    ]
                  }) : this.Package.ContentLayer(_.extend({}, this.state, {
                    search_loading: search_loading
                  }))
                ]
              })
            ]
          })
        ]
      });
    }
  });

  component("ContentLayer", {
    shouldComponentUpdate: function(next_props, next_state) {
      return !next_props.search_loading;
    },
    render: function() {
      return div({
        className: "content_layer",
        children: [
          this.props.content_type === "tops" ? this.Package.Tops({
            content_rows: this.props.results,
            top_result: this.props.top_result,
            snapshot: this.props.snapshot
          }) : div({
            className: "single_type_result",
            children: [
              [
                this.Package.Content({
                  content_type: this.props.content_type,
                  tracking_data: this.props.results[this.props.content_type].tracking_data,
                  content: _.extend({}, this.props.results[this.props.content_type].content, {
                    list_view_mode: this.props.list_view_mode
                  })
                }), Scribd.R.Shared.React.Paginator({
                  current_page: this.props.current_page,
                  page_count: this.props.page_count
                })
              ]
            ]
          })
        ]
      });
    }
  });

  component("Breadcrumbs", {
    propTypes: {
      facet_options_hash: types.object.isRequired,
      content_type: types.string.isRequired,
      category_branch: types.array.isRequired,
      snapshot: types.object.isRequired,
      search_loading: types.bool.isRequired,
      result_count: types.number
    },
    shouldComponentUpdate: function(next_props, next_state) {
      return !next_props.search_loading;
    },
    render: function() {
      var category, crumb, fac, facet, facets_to_filter, field, hide_class, i, k, last, non_category_facet_keys, non_category_facets, ref1, url, v, value;
      crumb = (function(_this) {
        return function(name, field, value, url, last, facets_to_filter) {
          var class_name, onclick_handler, tag;
          if (last == null) {
            last = false;
          }
          if (facets_to_filter == null) {
            facets_to_filter = [];
          }
          if (last) {
            onclick_handler = function() {};
            class_name = "crumb unclickable last";
            tag = span;
          } else {
            onclick_handler = function(e) {
              if (!(e.metaKey || e.ctrlKey)) {
                e.preventDefault();
                return _this.trigger("crumb_clicked", $(e.target).data());
              }
            };
            class_name = "crumb";
            tag = a;
          }
          return span({
            children: [
              tag({
                href: url,
                className: class_name,
                "data-field": field,
                "data-value": value,
                "data-facets_to_filter": facets_to_filter,
                onClick: onclick_handler
              }, name), !last ? span({
                className: "arrow"
              }, ">") : void 0
            ]
          });
        };
      })(this);
      non_category_facets = [];
      non_category_facet_keys = [];
      ref1 = this.props.selected_facets;
      for (k in ref1) {
        v = ref1[k];
        if (k !== "category" && v) {
          non_category_facet_keys.push(k);
          non_category_facets.push([k, v]);
        }
      }
      hide_class = this.props.content_type === "tops" ? "hidden" : "";
      return div({
        className: "breadcrumbs " + hide_class,
        children: [
          span({
            className: "results"
          }, this.props.result_count + " " + (this.props.result_count > 1 ? 'results' : 'result') + " in"), crumb("All", "content_type", "tops", this.props.snapshot.url(["category", "content_type"].concat(non_category_facet_keys))), this.props.content_type ? (url = this.props.snapshot.url(["category"].concat(non_category_facet_keys)), crumb(Scribd.R.Search.App.content_key_to_text(this.props.content_type), "content_type", this.props.content_type, url, !this.props.category_branch.length && !non_category_facets.length, (function() {
            var l, len, results;
            results = [];
            for (l = 0, len = non_category_facets.length; l < len; l++) {
              fac = non_category_facets[l];
              results.push(fac[0]);
            }
            return results;
          })())) : void 0, (function() {
            var l, len, ref2, results;
            ref2 = this.props.category_branch;
            results = [];
            for (i = l = 0, len = ref2.length; l < len; i = ++l) {
              category = ref2[i];
              url = this.props.snapshot.url(non_category_facet_keys, {
                category: category.id
              });
              results.push(crumb(category.name, "category", category.id, url, (i === this.props.category_branch.length - 1) && !non_category_facets.length, non_category_facet_keys));
            }
            return results;
          }).call(this), (function() {
            var l, len, len1, m, ref2, results;
            results = [];
            for (i = l = 0, len = non_category_facets.length; l < len; i = ++l) {
              facet = non_category_facets[i];
              field = facet[0];
              value = facet[1];
              last = i === (non_category_facets.length - 1);
              facets_to_filter = [];
              ref2 = non_category_facets.slice(i + 1);
              for (m = 0, len1 = ref2.length; m < len1; m++) {
                fac = ref2[m];
                facets_to_filter.push(fac[0]);
              }
              url = this.props.snapshot.url(facets_to_filter);
              results.push(crumb(Scribd.R.Search.App.facet_name(this.props.facet_options_hash, field, value), field, value, url, last, facets_to_filter));
            }
            return results;
          }).call(this)
        ]
      });
    }
  });

  component("Filters", {
    propTypes: {
      category_branch: types.array.isRequired,
      content_type: types.string.isRequired,
      selected_facets_hash: types.object.isRequired,
      facet_options_hash: types.object.isRequired,
      translated_facet_fields: types.object.isRequired
    },
    show_unlimited_audiobooks_only_filter: function() {
      return this.state.content_type === "audiobooks";
    },
    render: function() {
      var field, options;
      return div({
        className: "filters",
        children: [
          this.Package.CategoryTree({
            category_branch: this.props.category_branch,
            category_tree: this.props.category_tree,
            selected_value: this.props.selected_facets_hash['category'] || "",
            content_type: this.props.content_type
          }), (function() {
            var ref1, results;
            ref1 = this.props.facet_options_hash;
            results = [];
            for (field in ref1) {
              options = ref1[field];
              if (field !== "category") {
                results.push(this.Package.Filter({
                  field: field,
                  options: options,
                  translated_field: this.props.translated_facet_fields[field],
                  selected_value: this.props.selected_facets_hash[field] || ""
                }));
              } else {
                results.push(void 0);
              }
            }
            return results;
          }).call(this)
        ]
      });
    }
  });

  component("CategoryTree", {
    propTypes: {
      category_tree: types.object.isRequired,
      content_type: types.string.isRequired,
      category_branch: types.array.isRequired
    },
    render: function() {
      var category, content_type, i, last;
      return div({
        className: "filter category_filter",
        children: [
          div({
            className: "filter_title"
          }, "Category"), this.Package.Branch({
            element: {
              name: Scribd.R.Search.App.content_key_to_text("tops"),
              id: "tops"
            },
            selected: true,
            with_caret: this.props.content_type !== "tops",
            field: "content_type",
            children: []
          }), (function() {
            var l, len, ref1, ref2, results;
            if (this.props.content_type === "tops") {
              results = [];
              for (l = 0, len = CONTENT_TYPES.length; l < len; l++) {
                content_type = CONTENT_TYPES[l];
                if (content_type === "tops") {
                  continue;
                }
                results.push(this.Package.Branch({
                  element: {
                    name: Scribd.R.Search.App.content_key_to_text(content_type),
                    id: content_type
                  },
                  field: "content_type",
                  selected_value: this.props.content_type === content_type ? this.props.selected_value : void 0,
                  children: ((ref1 = this.props.category_tree[content_type]) != null ? ref1.subcategories : void 0) || []
                }));
              }
              return results;
            } else {
              return [
                this.Package.Branch({
                  element: {
                    name: Scribd.R.Search.App.content_key_to_text(this.props.content_type),
                    id: this.props.content_type
                  },
                  selected: true,
                  with_caret: this.props.category_branch.length,
                  field: "content_type",
                  children: this.props.category_branch.length ? [] : ((ref2 = this.props.category_tree[this.props.content_type]) != null ? ref2.subcategories : void 0) || []
                }), (function() {
                  var len1, m, ref3, results1;
                  ref3 = this.props.category_branch;
                  results1 = [];
                  for (i = m = 0, len1 = ref3.length; m < len1; i = ++m) {
                    category = ref3[i];
                    last = i === (this.props.category_branch.length - 1);
                    if (last) {
                      results1.push(this.Package.Branch({
                        element: category,
                        selected: true,
                        with_caret: false,
                        field: "category",
                        children: category.subcategories
                      }));
                    } else {
                      results1.push(this.Package.Branch({
                        element: category,
                        selected: true,
                        with_caret: true,
                        field: "category",
                        children: []
                      }));
                    }
                  }
                  return results1;
                }).call(this)
              ];
            }
          }).call(this)
        ]
      });
    }
  });

  component("Branch", {
    getInitialState: function() {
      return {
        compact: true
      };
    },
    componentDidMount: function() {
      return this.dispatch({
        compact: (function(_this) {
          return function(e) {
            return _this.setState({
              compact: true
            });
          };
        })(this),
        expand: (function(_this) {
          return function(e) {
            return _this.setState({
              compact: false
            });
          };
        })(this)
      });
    },
    render: function() {
      var branches_to_show, caret_class, child, i, selected_class;
      branches_to_show = this.props.children ? this.props.selected ? this.state.compact ? this.props.children.slice(0, +(CATEGORY_SHOW_MORE_LIMIT - 1) + 1 || 9e9) : this.props.children : void 0 : void 0;
      branches_to_show || (branches_to_show = []);
      caret_class = this.props.with_caret ? "with_caret" : "";
      selected_class = this.props.selected ? "selected" : "";
      return div({
        className: "branch",
        children: [
          div({
            className: "item " + selected_class + " " + caret_class,
            "data-id": this.props.element.id,
            onClick: (function(_this) {
              return function(e) {
                var $el;
                if (!(!_this.props.with_caret && _this.props.selected)) {
                  $el = $(e.currentTarget);
                  return _this.trigger("filter_selected", {
                    field: _this.props.field,
                    value: _this.props.element.id,
                    type: _this.props.element.type
                  });
                }
              };
            })(this),
            children: [
              this.props.with_caret ? span({
                className: "icon-caret_left caret"
              }) : void 0, this.props.element.name
            ]
          }), (function() {
            var l, len, results;
            results = [];
            for (i = l = 0, len = branches_to_show.length; l < len; i = ++l) {
              child = branches_to_show[i];
              results.push(this.Package.Branch({
                element: child,
                field: "category"
              }));
            }
            return results;
          }).call(this), branches_to_show.length >= CATEGORY_SHOW_MORE_LIMIT ? this.state.compact ? span({
            className: "see_more item",
            children: ["+ Show more"],
            onClick: (function(_this) {
              return function() {
                return _this.trigger("expand");
              };
            })(this)
          }) : span({
            className: "see_less item",
            children: ["- Show less"],
            onClick: (function(_this) {
              return function() {
                return _this.trigger("compact");
              };
            })(this)
          }) : void 0
        ]
      });
    }
  });

  component("Filter", {
    getInitialState: function() {
      return {
        compact: true
      };
    },
    componentDidMount: function() {
      return this.dispatch({
        compact: (function(_this) {
          return function(e) {
            return _this.setState({
              compact: true
            });
          };
        })(this),
        expand: (function(_this) {
          return function(e) {
            return _this.setState({
              compact: false
            });
          };
        })(this),
        radio_selected: (function(_this) {
          return function(e, v) {
            if (v.value !== _this.props.selected_value) {
              return _this.trigger("filter_selected", {
                field: _this.props.field,
                value: v.value
              });
            }
          };
        })(this)
      });
    },
    render: function() {
      return div({
        className: "filter",
        children: [
          div({
            className: "filter_title",
            children: [this.props.translated_field]
          }), this.Package.RadioForm({
            name: this.props.field,
            radio_options: this.state.compact ? this.props.options.slice(0, +(HIDE_SHOW_MORE_LIMIT - 1) + 1 || 9e9) : this.props.options,
            selected_value: this.props.selected_value
          }), this.props.options.length > HIDE_SHOW_MORE_LIMIT ? this.state.compact ? span({
            className: "see_more",
            children: ["+ Show more"],
            onClick: (function(_this) {
              return function() {
                return _this.trigger("expand");
              };
            })(this)
          }) : span({
            className: "see_less",
            children: ["- Show less"],
            onClick: (function(_this) {
              return function() {
                return _this.trigger("compact");
              };
            })(this)
          }) : void 0
        ]
      });
    }
  });

  component("RadioForm", {
    getInitialState: function() {
      return {
        selected_value: this.props.selected_value
      };
    },
    componentDidMount: function() {
      return this.dispatch({
        "radio_selected": (function(_this) {
          return function(e, v) {
            return _this.setState({
              selected_value: v.value
            });
          };
        })(this)
      });
    },
    componentWillReceiveProps: function(next_props) {
      return this.setState({
        selected_value: this.props.selected_value
      });
    },
    render: function() {
      var i, radio;
      return form({
        className: "radio_form",
        children: [
          (function() {
            var l, len, ref1, results;
            ref1 = this.props.radio_options;
            results = [];
            for (i = l = 0, len = ref1.length; l < len; i = ++l) {
              radio = ref1[i];
              results.push(div({
                children: [
                  Scribd.R.Shared.React.RadioInput({
                    key: i,
                    "class": "radio_form_radio_input",
                    name: this.props.name,
                    value: radio.value,
                    label_text: radio.name,
                    selected: this.state.selected_value === radio.value
                  })
                ]
              }));
            }
            return results;
          }).call(this)
        ]
      });
    }
  });

  component("Tops", {
    propTypes: {
      content_rows: types.object.isRequired,
      top_result: types.object,
      snapshot: types.object.isRequired
    },
    content_type_handler: function(e, v) {
      this.container().track_rats("search:more_results:click", {
        search_session_id: Scribd.R.Shared.React.SearchInput.get_search_session_id(),
        search_new_content_type: v
      });
      if (!(e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        return this.trigger("see_all", $(e.currentTarget).data("content_type"));
      }
    },
    render: function() {
      var content_type, has_content, result, row;
      row = (function(_this) {
        return function(content_type, children) {
          return div({
            className: "row",
            children: [
              div({
                className: "row_header",
                children: [
                  a({
                    href: _this.props.snapshot.url([], {
                      content_type: content_type
                    }),
                    className: "row_title",
                    "data-content_type": content_type,
                    onClick: _this.content_type_handler
                  }, Scribd.R.Search.App.content_key_to_text(content_type)), a({
                    href: _this.props.snapshot.url([], {
                      content_type: content_type
                    }),
                    className: "see_all",
                    "data-content_type": content_type,
                    onClick: _this.content_type_handler,
                    children: [
                      "See all", span({
                        className: "icon-caret caret"
                      })
                    ]
                  })
                ]
              }), children
            ]
          });
        };
      })(this);
      has_content = function(content) {
        return _.values(content)[0];
      };
      return div({
        className: "tops",
        children: [
          (function() {
            var ref1, results;
            ref1 = this.props.content_rows;
            results = [];
            for (content_type in ref1) {
              result = ref1[content_type];
              if (has_content(result.content)) {
                results.push(row(content_type, this.Package.Content({
                  content_type: content_type,
                  tracking_data: result.tracking_data,
                  content: result.content
                })));
              } else {
                results.push(void 0);
              }
            }
            return results;
          }).call(this)
        ]
      });
    }
  });

  component("Content", {
    shouldComponentUpdate: function(next_props, next_state) {
      var ref1;
      return !!((next_props.content.collections_html && next_props.content_type === "collections") || next_props.content.document_cells_html || (next_props.content.authors && ((ref1 = next_props.content_type) === "authors" || ref1 === "users")));
    },
    componentWillUnmount: function() {
      var $cell, cell, l, len, ref1, results;
      ref1 = this.container().find(".object_cell");
      results = [];
      for (l = 0, len = ref1.length; l < len; l++) {
        cell = ref1[l];
        $cell = $(cell);
        results.push($(window).off("scroll", $cell.data("scrolled_into_viewport_callback")));
      }
      return results;
    },
    componentDidMount: function() {
      var $cell, cell, l, len, ref1, results;
      this.container().find(".object_cell").scrolled_into_viewport((function(_this) {
        return function(e) {
          var $cell;
          $cell = $(e);
          if (!$cell.data("view_already_tracked")) {
            $cell.data("view_already_tracked", true);
            return _this.container().track_rats("search:module_item:view", _this.track_item_data($cell.data("object_id")));
          }
        };
      })(this));
      this.container().on("click", ".object_cell", (function(_this) {
        return function(e) {
          var $cell;
          $cell = $(e.currentTarget);
          return _this.container().track_rats("search:module_item:click", _this.track_item_data($cell.data("object_id")));
        };
      })(this));
      ref1 = this.container().find(".object_cell");
      results = [];
      for (l = 0, len = ref1.length; l < len; l++) {
        cell = ref1[l];
        $cell = $(cell);
        $cell.data("track_rats_value", this.track_item_data($cell.data("object_id")));
        results.push($cell.data("override_rats_name", "search:module_item:click"));
      }
      return results;
    },
    track_item_data: function(item_id) {
      return {
        search_session_id: Scribd.R.Shared.React.SearchInput.get_search_session_id(),
        module_id: this.props.tracking_data.tracking_id,
        item_id: this.props.tracking_data.results_tracking_ids[item_id],
        position: this.props.tracking_data.results_positions[item_id]
      };
    },
    render: function() {
      if (this.props.content_type === "authors" || this.props.content_type === "users") {
        return Scribd.R.Shared.React.Authors(this.props.content);
      } else if (this.props.content_type === "collections") {
        return Scribd.R.Shared.React.Collections(this.props.content);
      } else {
        return div({
          className: "documents",
          children: Scribd.R.Shared.React.Documents(this.props.content)
        });
      }
    }
  });

  component("TopResult", {
    propTypes: {
      type: types.string.isRequired,
      content_type: types.string.isRequired,
      search_loading: types.bool.isRequired
    },
    shouldComponentUpdate: function(next_props, next_state) {
      return !next_props.search_loading;
    },
    render: function() {
      var ref1, ref2, ref3, ref4, top_title;
      top_title = this.props.type === "unavailable_author" ? h2({
        className: "top_title"
      }, "Not Available") : this.props.type === "category_content" ? div({
        className: "category_content",
        children: [
          h2({
            className: "top_title"
          }, "Top Results in " + this.props.title), a({
            href: "javascript:void(0)",
            className: "view_more",
            onClick: (function(_this) {
              return function() {
                _this.trigger("filter_selected", {
                  field: "content_type",
                  value: _this.props.to_content_type
                });
                return _this.trigger("filter_selected", {
                  field: "category",
                  value: _this.props.to_category_id
                });
              };
            })(this),
            children: [
              "View all", span({
                className: "icon-caret caret"
              })
            ]
          })
        ]
      }) : (ref1 = this.props.type) === "unavailable_book" || ref1 === "unavailable_audiobook" ? h2({
        className: "top_title",
        children: [
          a({
            href: this.props.similar_url,
            className: "see_similar_titles doc_link book_link",
            children: [
              "See Similar titles", span({
                className: "icon-caret caret"
              })
            ]
          })
        ]
      }) : this.props.content_type === "tops" ? h2({
        className: "top_title"
      }, "Top Result") : h2({
        className: "top_title"
      }, "Related Result");
      return div({
        className: "row top_result top_" + this.props.type + "_result",
        children: [top_title, (ref2 = this.props.type) === "author" || ref2 === "unavailable_author" || ref2 === "publisher" ? Scribd.R.Shared.React.Authors(this.props.content) : (ref3 = this.props.type) === "book" || ref3 === "audiobook" || ref3 === "unavailable_book" || ref3 === "unavailable_audiobook" || ref3 === "document" || ref3 === "category_content" ? Scribd.R.Shared.React.Documents(this.props.content) : (ref4 = this.props.type) === "collection" || ref4 === "category" ? this.Package.SetResult(this.props.content) : void 0]
      });
    }
  });

  component("SetResult", {
    propTypes: {
      docs_count: types.number.isRequired,
      thumbnail: types.string,
      title: types.string.isRequired,
      url: types.string.isRequired
    },
    render: function() {
      var background_image_css, background_theme_css, pluralized_title;
      pluralized_title = this.props.docs_count === 1 ? "title" : "titles";
      background_image_css = this.props.thumbnail ? {
        backgroundImage: "url('" + this.props.thumbnail + "')",
        backgroundColor: "none"
      } : {};
      background_theme_css = this.props.theme_color ? {
        backgroundColor: this.props.theme_color
      } : {};
      return a({
        href: this.props.url,
        children: [
          div({
            className: "set_result",
            children: [
              div({
                className: "set_background",
                style: background_image_css,
                children: [
                  div({
                    className: "background_dimmer",
                    style: background_theme_css
                  })
                ]
              }), div({
                className: "set_title"
              }, this.props.title), div({
                className: "set_count"
              }, (Scribd.pretty_count(Number(this.props.docs_count))) + " " + pluralized_title)
            ]
          })
        ]
      });
    }
  });

  Scribd.R.Search.CONTENT_TYPES = CONTENT_TYPES;

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/search/unavailable_author.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.UnavailableAuthor = (function() {
    function UnavailableAuthor(container) {
      var grid, i, len, ref;
      this.container = container;
      this.container = $(this.container);
      this.setup_events();
      ref = this.container.find(".document_grid");
      for (i = 0, len = ref.length; i < len; i++) {
        grid = ref[i];
        new Scribd.UI.ObjectGrid($(grid));
      }
    }

    UnavailableAuthor.prototype.setup_events = function() {
      return this.container.dispatch("click", {
        show_unavailable_author_request: function($el) {
          var lb;
          lb = Scribd.Lightbox.open('unavailable_author_request_lightbox', Scribd.UnavailableAuthorRequestLightbox);
          return lb.set_data({
            author_name: $el.data("author_name"),
            author_id: $el.data("author_id")
          });
        }
      });
    };

    return UnavailableAuthor;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/search/unavailable_book.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.UnavailableBook = (function() {
    function UnavailableBook(container) {
      this.container = container;
      this.container = $(this.container);
      this.setup_events();
      new Scribd.UI.ObjectGrid(this.container.find(".document_grid"));
    }

    UnavailableBook.prototype.setup_events = function() {
      return this.container.dispatch("click", {
        show_unavailable_book_request: function($el) {
          var lb;
          lb = Scribd.Lightbox.open('unavailable_book_request_lightbox', Scribd.UnavailableBookRequestLightbox);
          return lb.set_data({
            book_id: $el.data("book_id")
          });
        }
      });
    };

    return UnavailableBook;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

