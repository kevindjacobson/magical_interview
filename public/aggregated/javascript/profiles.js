/************************************************************************
 * 'profiles.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:13 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - public/javascripts/jquery.nanoscroller.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/*! nanoScrollerJS - v0.7.2
* http://jamesflorentino.github.com/nanoScrollerJS/
* Copyright (c) 2013 James Florentino; Licensed MIT */


(function($, window, document) {
  "use strict";

  var BROWSER_IS_IE7, BROWSER_SCROLLBAR_WIDTH, DOMSCROLL, DOWN, DRAG, KEYDOWN, KEYUP, MOUSEDOWN, MOUSEMOVE, MOUSEUP, MOUSEWHEEL, NanoScroll, PANEDOWN, RESIZE, SCROLL, SCROLLBAR, TOUCHMOVE, UP, WHEEL, defaults, getBrowserScrollbarWidth;
  defaults = {
    /**
      a classname for the pane element.
      @property paneClass
      @type String
      @default 'pane'
    */

    paneClass: 'pane',
    /**
      a classname for the slider element.
      @property sliderClass
      @type String
      @default 'slider'
    */

    sliderClass: 'slider',
    /**
      a classname for the content element.
      @property contentClass
      @type String
      @default 'content'
    */

    contentClass: 'content',
    /**
      a setting to enable native scrolling in iOS devices.
      @property iOSNativeScrolling
      @type Boolean
      @default false
    */

    iOSNativeScrolling: false,
    /**
      a setting to prevent the rest of the page being
      scrolled when user scrolls the `.content` element.
      @property preventPageScrolling
      @type Boolean
      @default false
    */

    preventPageScrolling: false,
    /**
      a setting to disable binding to the resize event.
      @property disableResize
      @type Boolean
      @default false
    */

    disableResize: false,
    /**
      a setting to make the scrollbar always visible.
      @property alwaysVisible
      @type Boolean
      @default false
    */

    alwaysVisible: false,
    /**
      a default timeout for the `flash()` method.
      @property flashDelay
      @type Number
      @default 1500
    */

    flashDelay: 1500,
    /**
      a minimum height for the `.slider` element.
      @property sliderMinHeight
      @type Number
      @default 20
    */

    sliderMinHeight: 20,
    /**
      a maximum height for the `.slider` element.
      @property sliderMaxHeight
      @type Number
      @default null
    */

    sliderMaxHeight: null
  };
  /**
    @property SCROLLBAR
    @type String
    @static
    @final
    @private
  */

  SCROLLBAR = 'scrollbar';
  /**
    @property SCROLL
    @type String
    @static
    @final
    @private
  */

  SCROLL = 'scroll';
  /**
    @property MOUSEDOWN
    @type String
    @final
    @private
  */

  MOUSEDOWN = 'mousedown';
  /**
    @property MOUSEMOVE
    @type String
    @static
    @final
    @private
  */

  MOUSEMOVE = 'mousemove';
  /**
    @property MOUSEWHEEL
    @type String
    @final
    @private
  */

  MOUSEWHEEL = 'mousewheel';
  /**
    @property MOUSEUP
    @type String
    @static
    @final
    @private
  */

  MOUSEUP = 'mouseup';
  /**
    @property RESIZE
    @type String
    @final
    @private
  */

  RESIZE = 'resize';
  /**
    @property DRAG
    @type String
    @static
    @final
    @private
  */

  DRAG = 'drag';
  /**
    @property UP
    @type String
    @static
    @final
    @private
  */

  UP = 'up';
  /**
    @property PANEDOWN
    @type String
    @static
    @final
    @private
  */

  PANEDOWN = 'panedown';
  /**
    @property DOMSCROLL
    @type String
    @static
    @final
    @private
  */

  DOMSCROLL = 'DOMMouseScroll';
  /**
    @property DOWN
    @type String
    @static
    @final
    @private
  */

  DOWN = 'down';
  /**
    @property WHEEL
    @type String
    @static
    @final
    @private
  */

  WHEEL = 'wheel';
  /**
    @property KEYDOWN
    @type String
    @static
    @final
    @private
  */

  KEYDOWN = 'keydown';
  /**
    @property KEYUP
    @type String
    @static
    @final
    @private
  */

  KEYUP = 'keyup';
  /**
    @property TOUCHMOVE
    @type String
    @static
    @final
    @private
  */

  TOUCHMOVE = 'touchmove';
  /**
    @property BROWSER_IS_IE7
    @type Boolean
    @static
    @final
    @private
  */

  BROWSER_IS_IE7 = window.navigator.appName === 'Microsoft Internet Explorer' && /msie 7./i.test(window.navigator.appVersion) && window.ActiveXObject;
  /**
    @property BROWSER_SCROLLBAR_WIDTH
    @type Number
    @static
    @default null
    @private
  */

  BROWSER_SCROLLBAR_WIDTH = null;
  /**
    Returns browser's native scrollbar width
    @method getBrowserScrollbarWidth
    @return {Number} the scrollbar width in pixels
    @static
    @private
  */

  getBrowserScrollbarWidth = function() {
    var outer, outerStyle, scrollbarWidth;
    outer = document.createElement('div');
    outerStyle = outer.style;
    outerStyle.position = 'absolute';
    outerStyle.width = '100px';
    outerStyle.height = '100px';
    outerStyle.overflow = SCROLL;
    outerStyle.top = '-9999px';
    document.body.appendChild(outer);
    scrollbarWidth = outer.offsetWidth - outer.clientWidth;
    document.body.removeChild(outer);
    return scrollbarWidth;
  };
  /**
    @class NanoScroll
    @param element {HTMLElement|Node} the main element
    @param options {Object} nanoScroller's options
    @constructor
  */

  NanoScroll = (function() {

    function NanoScroll(el, options) {
      this.el = el;
      this.options = options;
      BROWSER_SCROLLBAR_WIDTH || (BROWSER_SCROLLBAR_WIDTH = getBrowserScrollbarWidth());
      this.$el = $(this.el);
      this.doc = $(document);
      this.win = $(window);
      this.$content = this.$el.children("." + options.contentClass);
      this.$content.attr('tabindex', 0);
      this.content = this.$content[0];
      if (this.options.iOSNativeScrolling && (this.el.style.WebkitOverflowScrolling != null)) {
        this.nativeScrolling();
      } else {
        this.generate();
      }
      this.createEvents();
      this.addEvents();
      this.reset();
    }

    /**
      Prevents the rest of the page being scrolled
      when user scrolls the `.content` element.
      @method preventScrolling
      @param event {Event}
      @param direction {String} Scroll direction (up or down)
      @private
    */


    NanoScroll.prototype.preventScrolling = function(e, direction) {
      if (!this.isActive) {
        return;
      }
      if (e.type === DOMSCROLL) {
        if (direction === DOWN && e.originalEvent.detail > 0 || direction === UP && e.originalEvent.detail < 0) {
          e.preventDefault();
        }
      } else if (e.type === MOUSEWHEEL) {
        if (!e.originalEvent || !e.originalEvent.wheelDelta) {
          return;
        }
        if (direction === DOWN && e.originalEvent.wheelDelta < 0 || direction === UP && e.originalEvent.wheelDelta > 0) {
          e.preventDefault();
        }
      }
    };

    /**
      Enable iOS native scrolling
    */


    NanoScroll.prototype.nativeScrolling = function() {
      this.$content.css({
        WebkitOverflowScrolling: 'touch'
      });
      this.iOSNativeScrolling = true;
      this.isActive = true;
    };

    /**
      Updates those nanoScroller properties that
      are related to current scrollbar position.
      @method updateScrollValues
      @private
    */


    NanoScroll.prototype.updateScrollValues = function() {
      var content;
      content = this.content;
      this.maxScrollTop = content.scrollHeight - content.clientHeight;
      this.contentScrollTop = content.scrollTop;
      if (!this.iOSNativeScrolling) {
        this.maxSliderTop = this.paneHeight - this.sliderHeight;
        this.sliderTop = this.contentScrollTop * this.maxSliderTop / this.maxScrollTop;
      }
    };

    /**
      Creates event related methods
      @method createEvents
      @private
    */


    NanoScroll.prototype.createEvents = function() {
      var _this = this;
      this.events = {
        down: function(e) {
          _this.isBeingDragged = true;
          _this.offsetY = e.pageY - _this.slider.offset().top;
          _this.pane.addClass('active');
          _this.doc.bind(MOUSEMOVE, _this.events[DRAG]).bind(MOUSEUP, _this.events[UP]);
          return false;
        },
        drag: function(e) {
          _this.sliderY = e.pageY - _this.$el.offset().top - _this.offsetY;
          _this.scroll();
          _this.updateScrollValues();
          if (_this.contentScrollTop >= _this.maxScrollTop) {
            _this.$el.trigger('scrollend');
          } else if (_this.contentScrollTop === 0) {
            _this.$el.trigger('scrolltop');
          }
          return false;
        },
        up: function(e) {
          _this.isBeingDragged = false;
          _this.pane.removeClass('active');
          _this.doc.unbind(MOUSEMOVE, _this.events[DRAG]).unbind(MOUSEUP, _this.events[UP]);
          return false;
        },
        resize: function(e) {
          _this.reset();
        },
        panedown: function(e) {
          _this.sliderY = (e.offsetY || e.originalEvent.layerY) - (_this.sliderHeight * 0.5);
          _this.scroll();
          _this.events.down(e);
          return false;
        },
        scroll: function(e) {
          if (_this.isBeingDragged) {
            return;
          }
          _this.updateScrollValues();
          if (!_this.iOSNativeScrolling) {
            _this.sliderY = _this.sliderTop;
            _this.slider.css({
              top: _this.sliderTop
            });
          }
          if (e == null) {
            return;
          }
          if (_this.contentScrollTop >= _this.maxScrollTop) {
            if (_this.options.preventPageScrolling) {
              _this.preventScrolling(e, DOWN);
            }
            _this.$el.trigger('scrollend');
          } else if (_this.contentScrollTop === 0) {
            if (_this.options.preventPageScrolling) {
              _this.preventScrolling(e, UP);
            }
            _this.$el.trigger('scrolltop');
          }
        },
        wheel: function(e) {
          if (e == null) {
            return;
          }
          _this.sliderY += -e.wheelDeltaY || -e.delta;
          _this.scroll();
          return false;
        }
      };
    };

    /**
      Adds event listeners with jQuery.
      @method addEvents
      @private
    */


    NanoScroll.prototype.addEvents = function() {
      var events;
      this.removeEvents();
      events = this.events;
      if (!this.options.disableResize) {
        this.win.bind(RESIZE, events[RESIZE]);
      }
      if (!this.iOSNativeScrolling) {
        this.slider.bind(MOUSEDOWN, events[DOWN]);
        this.pane.bind(MOUSEDOWN, events[PANEDOWN]).bind("" + MOUSEWHEEL + " " + DOMSCROLL, events[WHEEL]);
      }
      this.$content.bind("" + SCROLL + " " + MOUSEWHEEL + " " + DOMSCROLL + " " + TOUCHMOVE, events[SCROLL]);
    };

    /**
      Removes event listeners with jQuery.
      @method removeEvents
      @private
    */


    NanoScroll.prototype.removeEvents = function() {
      var events;
      events = this.events;
      this.win.unbind(RESIZE, events[RESIZE]);
      if (!this.iOSNativeScrolling) {
        this.slider.unbind();
        this.pane.unbind();
      }
      this.$content.unbind("" + SCROLL + " " + MOUSEWHEEL + " " + DOMSCROLL + " " + TOUCHMOVE, events[SCROLL]);
    };

    /**
      Generates nanoScroller's scrollbar and elements for it.
      @method generate
      @chainable
      @private
    */


    NanoScroll.prototype.generate = function() {
      var contentClass, cssRule, options, paneClass, sliderClass;
      options = this.options;
      paneClass = options.paneClass, sliderClass = options.sliderClass, contentClass = options.contentClass;
      if (!this.$el.find("" + paneClass).length && !this.$el.find("" + sliderClass).length) {
        this.$el.append("<div class=\"" + paneClass + "\"><div class=\"" + sliderClass + "\" /></div>");
      }
      this.pane = this.$el.children("." + paneClass);
      this.slider = this.pane.find("." + sliderClass);
      if (BROWSER_SCROLLBAR_WIDTH) {
        cssRule = this.$el.css('direction') === 'rtl' ? {
          left: -BROWSER_SCROLLBAR_WIDTH
        } : {
          right: -BROWSER_SCROLLBAR_WIDTH
        };
        this.$el.addClass('has-scrollbar');
      }
      if (cssRule != null) {
        this.$content.css(cssRule);
      }
      return this;
    };

    /**
      @method restore
      @private
    */


    NanoScroll.prototype.restore = function() {
      this.stopped = false;
      this.pane.show();
      this.addEvents();
    };

    /**
      Resets nanoScroller's scrollbar.
      @method reset
      @chainable
      @example
          $(".nano").nanoScroller();
    */


    NanoScroll.prototype.reset = function() {
      var content, contentHeight, contentStyle, contentStyleOverflowY, paneBottom, paneHeight, paneOuterHeight, paneTop, sliderHeight;
      if (this.iOSNativeScrolling) {
        this.contentHeight = this.content.scrollHeight;
        return;
      }
      if (!this.$el.find("." + this.options.paneClass).length) {
        this.generate().stop();
      }
      if (this.stopped) {
        this.restore();
      }
      content = this.content;
      contentStyle = content.style;
      contentStyleOverflowY = contentStyle.overflowY;
      if (BROWSER_IS_IE7) {
        this.$content.css({
          height: this.$content.height()
        });
      }
      contentHeight = content.scrollHeight + BROWSER_SCROLLBAR_WIDTH;
      paneHeight = this.pane.outerHeight();
      paneTop = parseInt(this.pane.css('top'), 10);
      paneBottom = parseInt(this.pane.css('bottom'), 10);
      paneOuterHeight = paneHeight + paneTop + paneBottom;
      sliderHeight = Math.round(paneOuterHeight / contentHeight * paneOuterHeight);
      if (sliderHeight < this.options.sliderMinHeight) {
        sliderHeight = this.options.sliderMinHeight;
      } else if ((this.options.sliderMaxHeight != null) && sliderHeight > this.options.sliderMaxHeight) {
        sliderHeight = this.options.sliderMaxHeight;
      }
      if (contentStyleOverflowY === SCROLL && contentStyle.overflowX !== SCROLL) {
        sliderHeight += BROWSER_SCROLLBAR_WIDTH;
      }
      this.maxSliderTop = paneOuterHeight - sliderHeight;
      this.contentHeight = contentHeight;
      this.paneHeight = paneHeight;
      this.paneOuterHeight = paneOuterHeight;
      this.sliderHeight = sliderHeight;
      this.slider.height(sliderHeight);
      this.events.scroll();
      this.pane.show();
      this.isActive = true;
      if ((content.scrollHeight === content.clientHeight) || (this.pane.outerHeight(true) >= content.scrollHeight && contentStyleOverflowY !== SCROLL)) {
        this.pane.hide();
        this.isActive = false;
      } else if (this.el.clientHeight === content.scrollHeight && contentStyleOverflowY === SCROLL) {
        this.slider.hide();
      } else {
        this.slider.show();
      }
      this.pane.css({
        opacity: (this.options.alwaysVisible ? 1 : ''),
        visibility: (this.options.alwaysVisible ? 'visible' : '')
      });
      return this;
    };

    /**
      @method scroll
      @private
      @example
          $(".nano").nanoScroller({ scroll: 'top' });
    */


    NanoScroll.prototype.scroll = function() {
      if (!this.isActive) {
        return;
      }
      this.sliderY = Math.max(0, this.sliderY);
      this.sliderY = Math.min(this.maxSliderTop, this.sliderY);
      this.$content.scrollTop((this.paneHeight - this.contentHeight + BROWSER_SCROLLBAR_WIDTH) * this.sliderY / this.maxSliderTop * -1);
      if (!this.iOSNativeScrolling) {
        this.slider.css({
          top: this.sliderY
        });
      }
      return this;
    };

    /**
      Scroll at the bottom with an offset value
      @method scrollBottom
      @param offsetY {Number}
      @chainable
      @example
          $(".nano").nanoScroller({ scrollBottom: value });
    */


    NanoScroll.prototype.scrollBottom = function(offsetY) {
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.$content.scrollTop(this.contentHeight - this.$content.height() - offsetY).trigger(MOUSEWHEEL);
      return this;
    };

    /**
      Scroll at the top with an offset value
      @method scrollTop
      @param offsetY {Number}
      @chainable
      @example
          $(".nano").nanoScroller({ scrollTop: value });
    */


    NanoScroll.prototype.scrollTop = function(offsetY) {
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.$content.scrollTop(+offsetY).trigger(MOUSEWHEEL);
      return this;
    };

    /**
      Scroll to an element
      @method scrollTo
      @param node {Node} A node to scroll to.
      @chainable
      @example
          $(".nano").nanoScroller({ scrollTo: $('#a_node') });
    */


    NanoScroll.prototype.scrollTo = function(node) {
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.scrollTop($(node).get(0).offsetTop);
      return this;
    };

    /**
      To stop the operation.
      This option will tell the plugin to disable all event bindings and hide the gadget scrollbar from the UI.
      @method stop
      @chainable
      @example
          $(".nano").nanoScroller({ stop: true });
    */


    NanoScroll.prototype.stop = function() {
      this.stopped = true;
      this.removeEvents();
      this.pane.hide();
      return this;
    };

    /**
      To flash the scrollbar gadget for an amount of time defined in plugin settings (defaults to 1,5s).
      Useful if you want to show the user (e.g. on pageload) that there is more content waiting for him.
      @method flash
      @chainable
      @example
          $(".nano").nanoScroller({ flash: true });
    */


    NanoScroll.prototype.flash = function() {
      var _this = this;
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.pane.addClass('flashed');
      setTimeout(function() {
        _this.pane.removeClass('flashed');
      }, this.options.flashDelay);
      return this;
    };

    return NanoScroll;

  })();
  $.fn.nanoScroller = function(settings) {
    return this.each(function() {
      var options, scrollbar;
      if (!(scrollbar = this.nanoscroller)) {
        options = $.extend({}, defaults, settings);
        this.nanoscroller = scrollbar = new NanoScroll(this, options);
      }
      if (settings && typeof settings === "object") {
        $.extend(scrollbar.options, settings);
        if (settings.scrollBottom) {
          return scrollbar.scrollBottom(settings.scrollBottom);
        }
        if (settings.scrollTop) {
          return scrollbar.scrollTop(settings.scrollTop);
        }
        if (settings.scrollTo) {
          return scrollbar.scrollTo(settings.scrollTo);
        }
        if (settings.scroll === 'bottom') {
          return scrollbar.scrollBottom(0);
        }
        if (settings.scroll === 'top') {
          return scrollbar.scrollTop(0);
        }
        if (settings.scroll && settings.scroll instanceof $) {
          return scrollbar.scrollTo(settings.scroll);
        }
        if (settings.stop) {
          return scrollbar.stop();
        }
        if (settings.flash) {
          return scrollbar.flash();
        }
      }
      return scrollbar.reset();
    });
  };
})(jQuery, window, document);


/* ----------------------------------------------------------------------
   - public/javascripts/jquery.mousewheel.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/*! Copyright (c) 2013 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.1.3
 *
 * Requires: 1.2.2+
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];
    var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];
    var lowestDelta, lowestDeltaXY;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    $.event.special.mousewheel = {
        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },

        unmousewheel: function(fn) {
            return this.unbind("mousewheel", fn);
        }
    });


    function handler(event) {
        var orgEvent = event || window.event,
            args = [].slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0,
            absDeltaXY = 0,
            fn;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";

        // Old school scrollwheel delta
        if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }
        if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }

        // New school wheel delta (wheel event)
        if ( orgEvent.deltaY ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( orgEvent.deltaX ) {
            deltaX = orgEvent.deltaX;
            delta  = deltaX * -1;
        }

        // Webkit
        if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }
        if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Look for lowest delta to normalize the delta values
        absDelta = Math.abs(delta);
        if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }
        absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }

        // Get a whole value for the deltas
        fn = delta > 0 ? 'floor' : 'ceil';
        delta  = Math[fn](delta / lowestDelta);
        deltaX = Math[fn](deltaX / lowestDeltaXY);
        deltaY = Math[fn](deltaY / lowestDeltaXY);

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

}));




/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - public/javascripts/newhome/sliding.coffee (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.PageDots = (function() {
    PageDots.prototype.dot_size = 12;

    PageDots.prototype.template = "<div class=\"page_picker\">\n  <div class=\"fill\"></div>\n  <div class=\"dots\"></div>\n</div>";

    PageDots.prototype.update_fill = function() {
      return this.fill.stop().animate({
        left: ((this.current_page - 1) * this.dot_size * this.per_page) + "px",
        width: (this.per_page * this.dot_size) + "px"
      }, "fast");
    };

    PageDots.prototype.goto_page = function(current_page) {
      this.current_page = current_page;
      return this.update_fill();
    };

    PageDots.prototype.is_first = function() {
      return this.current_page === 1;
    };

    PageDots.prototype.is_last = function() {
      return this.current_page === this.total_pages;
    };

    function PageDots(total_pages, per_page) {
      this.total_pages = total_pages;
      this.per_page = per_page != null ? per_page : 1;
      this.container = $(this.template).css({
        width: (this.total_pages * this.dot_size * this.per_page) + "px"
      });
      this.fill = this.container.find(".fill");
      this.current_page = 1;
      this.update_fill();
    }

    return PageDots;

  })();

  Scribd.UI.SlidingList = (function() {
    SlidingList.prototype.speed = "fast";

    SlidingList.prototype.PageDots = Scribd.UI.PageDots;

    SlidingList.prototype.calculate_pages = function() {
      var child, inner_width, j, len, ref;
      this.calculate_height();
      inner_width = 0;
      ref = this.sliding.children();
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        inner_width += $(child).outerWidth(true);
      }
      this.sliding.width(inner_width);
      this.page_width = this.sliding.parent().width();
      return this.num_pages = Math.ceil(inner_width / this.page_width);
    };

    SlidingList.prototype.calculate_height = function() {
      return this.list_content.height(this.sliding.find(".document_cell:first").outerHeight(true));
    };

    function SlidingList(container) {
      this.container = $(container);
      this.container.data("list", this);
      this.sliding = this.container.find(".sliding_content");
      this.list_content = this.container.find(".list_content");
      this.page = 1;
      this.calculate_pages();
      if (this.num_pages > 1 && this.PageDots) {
        this.dots = new this.PageDots(this.num_pages);
        this.container.find(".list_dots").append(this.dots.container);
      }
      this.goto_page(1);
    }

    SlidingList.prototype.page_left = function() {
      return this.goto_page((this.page - 2 + this.num_pages) % this.num_pages + 1);
    };

    SlidingList.prototype.page_right = function() {
      return this.goto_page(this.page % this.num_pages + 1);
    };

    SlidingList.prototype.page_offset = function(page) {
      return this.page_width * (page - 1);
    };

    SlidingList.prototype.goto_page = function(i) {
      var page, ref;
      page = Math.max(1, Math.min(this.num_pages, i));
      this.sliding.animate({
        marginLeft: -this.page_offset(page)
      }, this.speed);
      if ((ref = this.dots) != null) {
        ref.goto_page(page);
      }
      this.page = page;
      return this.container.toggleClass("on_first_page", page === 1).toggleClass("on_last_page", page === this.num_pages);
    };

    return SlidingList;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - public/javascripts/jquery_global/sticky.coffee (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
(function() {
  $.fn.sticky_container = function(opts) {
    var before_bottom, before_stick, before_unbottom, before_unstick, bottom_class, bottomed, dont_override_elem, padding, root, static_callback, sticky_callback, sticky_class, stuck, test_stickynes, unstick_after, w;
    if (opts == null) {
      opts = {};
    }
    root = this.offset();
    w = $(window);
    padding = opts.padding != null ? opts.padding : 0;
    sticky_class = opts.sticky_class || "stuck";
    bottom_class = opts.bottom_class || "bottomed";
    sticky_callback = opts.sticky_callback, static_callback = opts.static_callback, before_stick = opts.before_stick, before_unstick = opts.before_unstick, before_bottom = opts.before_bottom, before_unbottom = opts.before_unbottom;
    if (opts.unstick_after) {
      unstick_after = $(opts.unstick_after);
    }
    if (opts.dont_override_elem) {
      dont_override_elem = $(opts.dont_override_elem);
    }
    stuck = false;
    bottomed = false;
    test_stickynes = (function(_this) {
      return function() {
        var bottom, differential, edge, el_top, is_stuck, top;
        top = w.scrollTop();
        is_stuck = top > root.top - padding;
        if (unstick_after) {
          if (is_stuck) {
            bottom = unstick_after.offset().top + unstick_after.height();
            if (top + w.height() > bottom) {
              is_stuck = false;
              if (!bottomed) {
                if (typeof before_bottom === "function") {
                  before_bottom(_this);
                }
                bottomed = true;
                if (bottom_class) {
                  _this.addClass(bottom_class);
                }
              }
            } else {
              if (bottomed) {
                if (typeof before_unbottom === "function") {
                  before_unbottom(_this);
                }
                bottomed = false;
                if (bottom_class) {
                  _this.removeClass(bottom_class);
                }
              }
            }
          } else {
            if (bottomed) {
              if (typeof before_unbottom === "function") {
                before_unbottom(_this);
              }
              bottomed = false;
              if (bottom_class) {
                _this.removeClass(bottom_class);
              }
            }
          }
        }
        if (dont_override_elem) {
          if (is_stuck) {
            el_top = dont_override_elem.offset().top;
            differential = top + _this.height() - el_top;
            if (differential > 0) {
              _this.css("top", -differential + 38);
            } else {
              _this.css("top", 38);
            }
          }
        }
        edge = false;
        if (is_stuck) {
          if (!stuck) {
            if (typeof before_stick === "function") {
              before_stick(_this);
            }
            _this.addClass(sticky_class);
            stuck = true;
            edge = true;
          }
          if (typeof sticky_callback === "function") {
            sticky_callback(_this, edge);
          }
        } else {
          if (stuck) {
            if (typeof before_unstick === "function") {
              before_unstick(_this);
            }
            _this.removeClass(sticky_class);
            stuck = false;
            edge = true;
          }
          if (typeof static_callback === "function") {
            static_callback(_this, edge);
          }
        }
        return void 0;
      };
    })(this);
    this.on("Scribd:update_root", (function(_this) {
      return function() {
        return root = _this.offset();
      };
    })(this));
    this.on("Scribd:restick", test_stickynes);
    w.on("scroll resize", test_stickynes);
    return this;
  };

}).call(this);




/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-15 19:39:42 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-08 22:43:32 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/pmp_promo_banner.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.PmpPromoBanner = (function() {
    function PmpPromoBanner(container, page_name) {
      this.page_name = page_name;
      this.container = $(container);
      this.container.dispatch("click", {
        start_trial_button: (function(_this) {
          return function($el, ev) {
            if (Scribd.logged_in) {
              _this.track_click();
              return "continue";
            }
            ev.preventDefault();
            return Scribd.SignIn.open("subscribe", $el.attr("href"));
          };
        })(this)
      });
    }

    PmpPromoBanner.prototype.track_click = function() {
      return this.container.track({
        category: "pmp_promo_banner:" + this.page_name + "_page",
        action: 'click',
        label: 'start_trial_button'
      });
    };

    return PmpPromoBanner;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/load_more.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.LoadMore = (function() {
    LoadMore.prototype.load_on_scroll = -1;

    LoadMore.prototype.clicked_once = true;

    function LoadMore(container, load_callback, _load_on_scroll) {
      var win;
      this.load_callback = load_callback;
      this.container = $(container);
      this.container.data("object", this);
      this.top = this.container.offset().top;
      if (_load_on_scroll != null) {
        this.load_on_scroll = _load_on_scroll;
      }
      if (this.load_on_scroll !== 0) {
        win = $(window);
        win.on("scroll.load_more_btn", (function(_this) {
          return function() {
            if (_this.loading || !_this.clicked_once || _this.container.is(".disabled")) {
              return;
            }
            if (win.scrollTop() + win.height() >= _this.top) {
              return _this.load_more(function(has_more) {
                _this.load_on_scroll -= 1;
                if (_this.load_on_scroll === 0 || !has_more) {
                  return win.off("scroll.load_more_btn");
                }
              });
            }
          };
        })(this));
      }
      this.container.on("click", (function(_this) {
        return function(e) {
          if ($(e.target).closest("a").length) {
            e.preventDefault();
          }
          _this.clicked_once = true;
          return _this.load_more();
        };
      })(this));
    }

    LoadMore.prototype.set_loading = function(loading) {
      this.loading = loading;
      this.container.toggleClass("loading", loading);
      return setTimeout((function(_this) {
        return function() {
          return _this.container.toggleClass("show_loader", _this.loading);
        };
      })(this), 10);
    };

    LoadMore.prototype.reset = function() {
      return this.enable();
    };

    LoadMore.prototype.enable = function() {
      return this.container.removeClass("no_more disabled");
    };

    LoadMore.prototype.disable = function() {
      return this.container.addClass("disabled");
    };

    LoadMore.prototype.load_more = function(callback) {
      if (this.container.is(".disabled,.loading")) {
        return false;
      }
      this.set_loading(true);
      return typeof this.load_callback === "function" ? this.load_callback((function(_this) {
        return function(has_more) {
          _this.top = _this.container.offset().top;
          _this.set_loading(false);
          if (typeof callback === "function") {
            callback.apply(null, arguments);
          }
          if (!has_more) {
            return _this.container.addClass("no_more disabled");
          }
        };
      })(this)) : void 0;
    };

    return LoadMore;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/grids/grouped_documents_grid.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.UI.GroupedDocumentsGrid = (function() {
    function GroupedDocumentsGrid(container, opts) {
      var load_more;
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.merge_grouped_grid = bind(this.merge_grouped_grid, this);
      this.clean_up_after_removal = bind(this.clean_up_after_removal, this);
      this.load_documents = bind(this.load_documents, this);
      this.container = $(this.container);
      this.params = {
        page: 1,
        grouping: this.opts.grouping || 'recency',
        reading_state: this.opts.state,
        full_access: this.opts.full_access
      };
      load_more = this.container.find(".load_more_btn");
      this.load_more = new Scribd.UI.LoadMore(load_more, (function(_this) {
        return function(done) {
          _this.params.page++;
          return _this.load_documents(done);
        };
      })(this));
      Scribd.UI.GroupedDocumentsGrid.instance = this;
      $(document).on("scribd:update_grouped_grid", (function(_this) {
        return function(v, e) {
          return _this.clean_up_after_removal();
        };
      })(this));
    }

    GroupedDocumentsGrid.prototype.load_documents = function(done, pre_callback) {
      return $.ajax({
        url: this.opts.more_url,
        data: this.params,
        type: "get",
        dataType: "json",
        success: (function(_this) {
          return function(res) {
            var $grouped_grid;
            if (res.grouped_grid) {
              $grouped_grid = $(res.grouped_grid);
              _this.container.removeClass(".loading_content");
              if (_this.params.page > 1) {
                if (typeof callback === "function") {
                  callback();
                }
                _this.merge_grouped_grid($grouped_grid);
              }
              if (res.has_more) {
                _this.load_more.enable();
              }
            }
            return typeof done === "function" ? done(res.has_more) : void 0;
          };
        })(this)
      }, true);
    };

    GroupedDocumentsGrid.prototype.clean_up_after_removal = function() {
      var $grid, grid, i, len, results, selectable_grids;
      selectable_grids = this.container.find(".autogen_class_views_shared_grids_selectable_document_grid");
      results = [];
      for (i = 0, len = selectable_grids.length; i < len; i++) {
        grid = selectable_grids[i];
        $grid = $(grid);
        if (!$grid.children().length) {
          $grid.prev().remove();
          results.push($grid.remove());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    GroupedDocumentsGrid.prototype.merge_grouped_grid = function($grid) {
      var $el, el, extracted_container, first_new_grid, first_new_script, first_new_title, i, last_group_grid, last_group_title, len, ref, results;
      extracted_container = $grid.children();
      first_new_title = $grid.find("h2").first();
      first_new_grid = $grid.find(".document_grid").first();
      first_new_script = $grid.find("script").first();
      last_group_title = this.container.find("h2").last();
      last_group_grid = this.container.find(".document_grid").last();
      if (first_new_title.text() === last_group_title.text()) {
        first_new_title.remove();
        first_new_grid.children().appendTo(last_group_grid);
        first_new_grid.remove();
        first_new_script.remove();
        if ((ref = last_group_grid.data("object")) != null) {
          ref.after_new_items_added();
        }
      }
      results = [];
      for (i = 0, len = extracted_container.length; i < len; i++) {
        el = extracted_container[i];
        $el = $(el);
        if ($el.is("h2.group_header")) {
          $el.insertBefore(this.container.find(".load_more"));
        }
        if ($el.is(".document_grid")) {
          if (this.container.find(".document_grid.edit_mode").length) {
            $el.addClass("edit_mode");
          }
          $el.insertBefore(this.container.find(".load_more"));
          results.push(new Scribd.SelectableDocumentGrid($el));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return GroupedDocumentsGrid;

  })();

  Scribd.UI.LowerMarginGrid = (function(superClass) {
    extend(LowerMarginGrid, superClass);

    function LowerMarginGrid() {
      return LowerMarginGrid.__super__.constructor.apply(this, arguments);
    }

    LowerMarginGrid.prototype.margin = 40;

    return LowerMarginGrid;

  })(Scribd.UI.ObjectGrid);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/grids/selectable_document_grid.coffee (last modified: 2016-06-07 22:23:07 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SelectableDocumentGrid = (function() {
    function SelectableDocumentGrid(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      new Scribd.UI.LowerMarginGrid(this.container, this.opts);
      this.container.on("click", ".select_layer", (function(_this) {
        return function(e) {
          var $el, bookmark_ids, i, ids, len, ref, ref1, selected_doc;
          $el = $(e.target);
          $el.closest(".select_layer").toggleClass("selected");
          ids = [];
          bookmark_ids = [];
          ref = _this.container.find(".select_layer.selected");
          for (i = 0, len = ref.length; i < len; i++) {
            selected_doc = ref[i];
            ids.push($(selected_doc).closest("[data-object_id]").data("object_id"));
            bookmark_ids.push((ref1 = $(selected_doc).closest("[data-my_library_data]").data("my_library_data")) != null ? ref1.bookmark_id : void 0);
          }
          $(document).trigger("scribd:selectable_document_grid:selection", {
            ids: ids,
            bookmark_ids: bookmark_ids,
            grid_id: _this.container.attr("id")
          });
          e.preventDefault();
          return e.stopPropagation();
        };
      })(this));
    }

    return SelectableDocumentGrid;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filtered_document_page.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.FilteredDocumentPage = (function() {
    function FilteredDocumentPage(container) {
      var filter_picker;
      this.container = $(container);
      filter_picker = this.container.find(".filter_picker");
      if (filter_picker.is(".open")) {
        this.container.find(".toggle_filters_btn").addClass("open");
      }
      this.container.on("click", ".toggle_filters_btn", (function(_this) {
        return function(e) {
          $(e.currentTarget).toggleClass("open");
          return filter_picker.slideToggle("fast");
        };
      })(this));
      this.container.find(".language_filter_picker").fancy_select();
      this.container.on("change", ".language_filter_picker", (function(_this) {
        return function(e) {
          return window.location = $(e.currentTarget).val();
        };
      })(this));
    }

    return FilteredDocumentPage;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filter.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Filter = (function() {
    function Filter(container, opts) {
      this.container = container;
      if (opts == null) {
        opts = {};
      }
      this.container = $(this.container);
      this.container.on("click", ".row:not(.selected)", (function(_this) {
        return function(e) {
          var val;
          $(document.body).trigger("scribd:close_hover_menus");
          val = $(e.target).attr('value');
          _this.render_value(val, $(e.currentTarget));
          _this.container.trigger("scribd:filter:" + opts.filter_name, {
            value: val,
            extra: $(e.target).data()
          });
          _this.container.find(".row").removeClass("selected");
          $(e.currentTarget).addClass("selected");
          return typeof callback === "function" ? callback(val) : void 0;
        };
      })(this));
    }

    Filter.prototype.render_value = function(val, row) {
      return this.container.find(".filter_label .current_value_text").text(row.text());
    };

    return Filter;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/search_input.coffee (last modified: 2016-01-21 00:24:17 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SearchInput = (function() {
    function SearchInput(container) {
      this.container = container;
      this.container = $(this.container);
      this.container.dispatch("click", {
        close_search: (function(_this) {
          return function() {
            _this.container.removeClass("open");
            _this.trigger("close");
            return "continue";
          };
        })(this),
        open_search: (function(_this) {
          return function() {
            _this.container.addClass("open");
            _this.container.find(".search_controls input").focus();
            _this.trigger("open");
            return "continue";
          };
        })(this)
      });
      this.container.find(".search_controls").on("ajax:success", (function(_this) {
        return function(e, v) {
          return _this.trigger("results", v);
        };
      })(this));
    }

    SearchInput.prototype.trigger = function(event_name, value) {
      return $(document).trigger("scribd:search_input:" + event_name, value);
    };

    return SearchInput;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/profiles/_profile_admin.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.ProfileAdmin = (function() {
    ProfileAdmin.prototype.flash = function(msg, type) {
      if (type == null) {
        type = "category";
      }
      return $("<div class='flash_message'></div>").text(msg).appendTo(this.container.find("." + type + "_flash").empty());
    };

    function ProfileAdmin(container, user_id) {
      this.flash = bind(this.flash, this);
      this.container = $(container);
      this.container.dispatch("click", {
        open_admin_btn: (function(_this) {
          return function(btn) {
            return _this.container.toggleClass("open").trigger("Scribd:content_updated");
          };
        })(this)
      });
      this.container.find(".admin_action_input").change((function(_this) {
        return function(e) {
          var detail, form, input;
          input = $(e.currentTarget);
          form = input.closest("form");
          detail = prompt("Details for this action for posterity (you can leave this blank):");
          if (detail != null) {
            return form.find("[name='administrative_action_detail']").val(detail).end().submit();
          }
        };
      })(this));
      this.container.find(".admin_action").on("ajax:complete", (function(_this) {
        return function(e, xhr) {
          return _this.flash(xhr.responseText, "admin");
        };
      })(this));
    }

    return ProfileAdmin;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/profiles/_profile_document_grid.coffee (last modified: 2016-02-18 20:37:17 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.UI.ProfileDocumentGrid = (function(superClass) {
    extend(ProfileDocumentGrid, superClass);

    function ProfileDocumentGrid(container, opts) {
      var base, load_more;
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.load_documents = bind(this.load_documents, this);
      ProfileDocumentGrid.__super__.constructor.apply(this, arguments);
      this.params = {
        page: 1
      };
      load_more = this.container.find(".load_more_btn");
      this.load_more = new Scribd.UI.LoadMore(load_more, (function(_this) {
        return function(done) {
          _this.params.page++;
          return _this.load_documents(done);
        };
      })(this));
      this.load_more.disable();
      (base = Scribd.UI.ProfileDocumentGrid).instances || (base.instances = []);
      Scribd.UI.ProfileDocumentGrid.instances.push(this);
    }

    ProfileDocumentGrid.prototype.load_documents = function(done, pre_callback) {
      return $.ajax({
        url: this.opts.more_url.join(""),
        data: this.params,
        type: "get",
        dataType: "json",
        success: (function(_this) {
          return function(res) {
            var $grid;
            if (res.documents) {
              $grid = $(res.documents);
              $grid.children(".object_cell").insertBefore(_this.container.find(".load_more"));
              _this.after_new_items_added();
            }
            return typeof done === "function" ? done(res.has_more) : void 0;
          };
        })(this)
      }, true);
    };

    return ProfileDocumentGrid;

  })(Scribd.UI.ObjectGrid);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/profiles/_reviews_carousel.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.ReviewsCarousel = (function() {
    ReviewsCarousel.prototype.item_width = 756;

    ReviewsCarousel.prototype.first_class = "on_first_page";

    ReviewsCarousel.prototype.last_class = "on_last_page";

    ReviewsCarousel.prototype.current_item_count = 1;

    ReviewsCarousel.prototype.animation_speed = 400;

    function ReviewsCarousel(container, opts) {
      this.opts = opts != null ? opts : {};
      this.opt_out = bind(this.opt_out, this);
      this.container = $(container);
      this.carousel = this.container.find(".carousel_scrolling");
      this.count_current = this.container.find(".count .current");
      this.count_total = this.container.find(".count .total");
      this.last_item_id = this.opts.last_item_id;
      this.container.dispatch("click", {
        page_left: _.throttle((function(_this) {
          return function() {
            return _this.move(_this.item_width);
          };
        })(this), this.animation_speed + 50),
        page_right: _.throttle((function(_this) {
          return function() {
            return _this.move(-_this.item_width);
          };
        })(this), this.animation_speed + 50),
        opt_out: this.opt_out
      });
      this.container.on("scribd:review_added", (function(_this) {
        return function(event, data) {
          _this.container.trigger("scribd:review_added:review_carousel", data);
          _this.remove_item(_this.get_item());
          return _this.update_count_total(-1);
        };
      })(this));
    }

    ReviewsCarousel.prototype.loaded_item_count = function() {
      return this.container.find(".item").length;
    };

    ReviewsCarousel.prototype.get_item = function() {
      var item;
      return item = this.container.find(".item:eq(" + (this.current_item_count - 1) + ")");
    };

    ReviewsCarousel.prototype.remove_item = function(item) {
      if (this.current_item_count === this.loaded_item_count() && this.loaded_item_count() > 1) {
        this.move(this.item_width);
        this.container.addClass(this.last_class);
      }
      item.remove();
      this.update_for_last_item();
      this.update_for_first_item();
      if (!this.container.find(".item").length) {
        return this.container.remove();
      }
    };

    ReviewsCarousel.prototype.update_for_last_item = function() {
      if (this.current_item_count === this.loaded_item_count()) {
        return this.container.addClass(this.last_class);
      }
    };

    ReviewsCarousel.prototype.update_for_first_item = function() {
      if (this.current_item_count === 1) {
        return this.container.addClass(this.first_class);
      }
    };

    ReviewsCarousel.prototype.move = function(distance) {
      var current_item_count, left;
      if (distance > 0) {
        this.current_item_count--;
      } else {
        this.current_item_count++;
      }
      this.container.removeClass(this.first_class + " " + this.last_class);
      this.update_for_last_item();
      this.update_for_first_item();
      if (this.current_item_count === 1 && this.loaded_item_count() === 1) {
        this.container.removeClass("has_paddles");
      }
      left = parseInt(this.carousel.css("marginLeft"));
      this.carousel.animate({
        marginLeft: (left + distance) + "px"
      }, this.animation_speed);
      this.count_current.text(this.current_item_count);
      if (this.opts.more_documents) {
        current_item_count = parseInt(this.count_current.text());
        if (current_item_count === this.loaded_item_count()) {
          this.container.addClass("loading");
        }
        if (this.loaded_item_count() - current_item_count === 10) {
          this.opts.more_documents = false;
          $.ajax({
            url: this.opts.more_documents_url + "?last_item_id=" + this.opts.last_item_id,
            error: (function(_this) {
              return function() {
                return _this.total_count.text(_this.loaded_item_count());
              };
            })(this),
            success: (function(_this) {
              return function(response) {
                _this.opts.more_documents = response.more_documents;
                _this.opts.last_item_id = response.last_item_id;
                _this.carousel.append($(response.reviews).find(".item"));
                return _this.container.removeClass("loading");
              };
            })(this)
          });
        }
      }
      return this.container.trigger("scribd:ratings_carousel_move");
    };

    ReviewsCarousel.prototype.update_count_total = function(delta) {
      return this.count_total.text(parseInt(this.count_total.text()) + delta);
    };

    ReviewsCarousel.prototype.opt_out = function(target) {
      var item;
      if (target.is(":disabled")) {
        return;
      }
      target.prop("disabled", true);
      item = this.get_item();
      return $.ajax({
        method: "post",
        url: item.data("opt_out_url"),
        error: (function(_this) {
          return function() {
            item.show();
            _this.update_count_total(1);
            return (new Scribd.Flasher).show("error", "Review opt out not saved");
          };
        })(this),
        success: (function(_this) {
          return function() {
            _this.remove_item(item);
            return _this.update_count_total(-1);
          };
        })(this),
        complete: function() {
          return target.prop("disabled", false);
        }
      });
    };

    return ReviewsCarousel;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/profiles/show.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.UserProfile = (function() {
    function UserProfile(container, user) {
      var ref;
      this.user = user;
      this.setup_theme_events = bind(this.setup_theme_events, this);
      this.setup_description = bind(this.setup_description, this);
      this.scroll_to_tab = bind(this.scroll_to_tab, this);
      this.setup_events = bind(this.setup_events, this);
      this.track_review_tab_view = bind(this.track_review_tab_view, this);
      this.container = $(container);
      this.container.find(".more_user_description").hide();
      if ((ref = this.container.find(".grid_container:visible .load_more").data("object")) != null) {
        ref.enable();
      }
      this.setup_events();
      this.track_review_tab_view();
      this.container.dispatch("click", {
        tab: (function(_this) {
          return function($el, ev) {
            var $curr, ref1;
            ev.preventDefault();
            $el = $(ev.target);
            if ($el.is(".current") || $el.is(":disabled") || $el.is(".unselectable")) {
              return;
            }
            $curr = _this.container.find(".grid_container:visible");
            if ((ref1 = $curr.find(".load_more").data("object")) != null) {
              ref1.disable();
            }
            if (!$curr.length) {
              $curr = _this.container.find(".grid_container").first();
            }
            $curr.fadeOut("slow", function() {
              var $grid_container, pr_grid, ref2, section;
              section = $el.data('section');
              if (!section) {
                section = $el.closest('.tab').data('section');
              }
              $grid_container = _this.container.find(".grid_container[data-section=" + section + "]");
              _this.container.find(".grid_container[data-section=" + section + "]").fadeIn(_this.track_review_tab_view);
              pr_grid = (ref2 = $grid_container.find(".object_grid")) != null ? ref2.data("object") : void 0;
              if (pr_grid != null) {
                pr_grid.fit_to_width();
              }
              if (pr_grid != null) {
                pr_grid.load_more.reset();
              }
              return $el.trigger("scribd:set_tab");
            });
            _this.scroll_to_tab();
            return "continue";
          };
        })(this),
        load_more_reviews_btn: (function(_this) {
          return function(target) {
            if (target.hasClass("loading")) {
              return;
            }
            target.addClass("loading");
            return $.ajax({
              url: (_this.user.more_reviews_url.join("")) + "?last_item_id=" + (_this.last_item_id()),
              success: function(data) {
                $(data.reviews).insertAfter(_this.container.find(".review_list").last());
                target.removeClass("loading");
                if (!data.more_reviews) {
                  return target.remove();
                }
              }
            });
          };
        })(this)
      });
      this.container.find(".floating_profile_header").stick_in_parent({
        parent: this.container,
        offset_top: Scribd.Header.prototype.height,
        bottoming: false
      });
      Scribd.hook_tooltips(this.container, Scribd.Tooltips.Under2);
    }

    UserProfile.prototype.last_item_id = function() {
      return this.container.find(".review_list:last .book_review_wrapper:last").data("review_id");
    };

    UserProfile.prototype.track_review_tab_view = function() {
      if (!$(".reviews:visible").length) {
        return;
      }
      return this.track_review_tab_view_once();
    };

    UserProfile.prototype.track_review_tab_view_once = _.once(function() {
      return this.container.track_rats("ratings:profile_reviews:view", {
        word_user_id: this.user.id
      });
    });

    UserProfile.prototype.setup_events = function() {
      $(document).on("scribd:search_input:results", (function(_this) {
        return function(e, values) {
          var $search_container;
          _this.container.find(".grids_holder").addClass("search_open");
          $search_container = _this.container.find(".grid_container.search_placeholder");
          $search_container.html(values.widget).fadeIn("slow");
          return _this.scroll_to_tab();
        };
      })(this));
      $(document).on("scribd:search_input:close", (function(_this) {
        return function() {
          return _this.container.find(".search_placeholder").fadeOut("slow", function() {
            _this.container.find(".search_placeholder").children().remove();
            return _this.container.find(".grids_holder").removeClass("search_open");
          });
        };
      })(this));
      $(window).on("scribd:review_added:review_carousel", (function(_this) {
        return function(event, data) {
          return $(data.preview_1).insertBefore(_this.container.find(".reviews .review_list:first"));
        };
      })(this));
      this.setup_description();
      return this.setup_theme_events();
    };

    UserProfile.prototype.scroll_to_tab = function() {
      var top_position;
      top_position = this.container.find(".grids_holder").offset().top - Scribd.Header.prototype.height;
      if (top_position < $(window).scrollTop()) {
        return $(window).scrollTop(top_position);
      }
    };

    UserProfile.prototype.setup_description = function() {
      var $description;
      $description = this.container.find(".user_description");
      $description.on("click", ".read_more", (function(_this) {
        return function() {
          $description.removeClass("truncated");
          return $description.find(".description_text").html($description.data("full_text"));
        };
      })(this));
      return this.container.on("click", ".read_less", (function(_this) {
        return function() {
          $description.addClass("truncated");
          return $description.find(".description_text").html($description.data("short_text"));
        };
      })(this));
    };

    UserProfile.prototype.setup_theme_events = function() {
      var custom_header, custom_header_gradient, custom_user_image_placeholder;
      custom_header = this.container.find(".custom_color:not(.gradient)");
      custom_header_gradient = this.container.find(".custom_color.gradient");
      custom_user_image_placeholder = this.container.find(".user_image_placeholder");
      return $(document).on("scribd:theme_change", (function(_this) {
        return function(e, theme) {
          if (theme["background-color"]) {
            custom_header.css({
              "background-color": theme["background-color"]
            });
            custom_header_gradient.attr("style", theme["gradient_raw_css"]);
            custom_user_image_placeholder.css({
              "background-color": theme["background-color"]
            });
          }
          if (theme['background-image'] != null) {
            custom_header.find(".document_background_image").css(theme);
          }
          if (theme.background_image_title != null) {
            _this.container.find(".background_info a").text(theme.background_image_title);
          }
          if (theme['background-position-y'] != null) {
            return custom_header.find(".document_background_image").css(theme);
          }
        };
      })(this));
    };

    return UserProfile;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

