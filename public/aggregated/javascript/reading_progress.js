/************************************************************************
 * 'reading_progress.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:13 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-05-24 20:14:50 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/base.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.ReadingProgress = {};

  Scribd.ReadingProgress.Base = (function() {
    Base.prototype.events = {
      focus: "focus.reading_progress",
      scroll: "scroll.reading_progress"
    };

    Base.prototype.default_opts = function() {
      return {
        throttle_get: 60000,
        throttle_post: 10000
      };
    };

    Base.prototype.enabled = function() {
      var ref, ref1;
      if (!((ref = Scribd.ServerOptions) != null ? ref.reading_progress_enabled : void 0)) {
        return false;
      }
      if (!Scribd.logged_in) {
        return false;
      }
      if ((ref1 = Scribd.current_doc) != null ? ref1.is_sheet_music : void 0) {
        return false;
      }
      return true;
    };

    function Base(opts) {
      var ref, ref1, ref2;
      this.opts = opts != null ? opts : {};
      if (!this.enabled()) {
        return;
      }
      this.opts = _.extend(this.default_opts(), this.opts);
      this.get_ms = ((ref = Scribd.ServerOptions) != null ? ref.reading_progress_throttle_get_milliseconds : void 0) || this.opts.throttle_get;
      this.post_ms = ((ref1 = Scribd.ServerOptions) != null ? ref1.reading_progress_throttle_post_milliseconds : void 0) || this.opts.throttle_post;
      this.url = (ref2 = Scribd.current_doc.reading_progress) != null ? ref2.update_url : void 0;
      this.doc_id = Scribd.current_doc.id;
      this.offset = null;
      this.offset_type = null;
      this.percentage = null;
      this.throttled_get_handler = _.throttle((function(_this) {
        return function() {
          return _this.get();
        };
      })(this), this.get_ms, {
        leading: true,
        trailing: false
      });
      this.throttled_post_handler = _.throttle((function(_this) {
        return function() {
          return _this.post();
        };
      })(this), this.post_ms, {
        leading: false,
        trailing: true
      });
      $(window).off(this.events.focus).on(this.events.focus, this.throttled_get_handler);
    }

    Base.prototype.update_external_progress = function(data) {
      if (!(data != null ? data.progress : void 0)) {
        return;
      }
      if (data.progress.from_current_device) {
        return;
      }
      if (data.progress.device_name === "browser") {
        return;
      }
      return $(window).trigger("scribd:external_reading_progress", data.progress);
    };

    Base.prototype.get = function() {
      return $.get(this.url, {
        doc_id: this.doc_id
      }, this.update_external_progress);
    };

    Base.prototype.post = function() {
      return $.post(this.url, {
        doc_id: this.doc_id,
        offset: this.offset,
        offset_type: this.offset_type,
        percentage: this.percentage
      }, this.update_external_progress);
    };

    return Base;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/audio.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.Audio = (function(superClass) {
    extend(Audio, superClass);

    Audio.get_track_and_position = function(offset) {
      var chapter, chapters, duration, i, index, len;
      chapters = Scribd.audiobook_player.current_chapters();
      if (offset > Scribd.audiobook_player.get_runtime()) {
        return {
          track_num: chapters.length - 1,
          track_pos: chapters[chapters.length - 1].duration
        };
      } else {
        duration = 0;
        for (index = i = 0, len = chapters.length; i < len; index = ++i) {
          chapter = chapters[index];
          if (duration + chapter.duration < offset) {
            duration += chapter.duration;
          } else {
            return {
              track_num: index,
              track_pos: offset - duration
            };
          }
        }
      }
    };

    Audio.prototype.previous_progress = 0;

    Audio.prototype.enabled = function() {
      if (!this.player) {
        return false;
      }
      return Audio.__super__.enabled.apply(this, arguments);
    };

    Audio.prototype.default_opts = function() {
      return _.extend(Audio.__super__.default_opts.apply(this, arguments), {
        preview_restricted: null,
        preview_threshold: null,
        player: null
      });
    };

    function Audio(opts) {
      this.opts = opts != null ? opts : {};
      this.update = bind(this.update, this);
      this.player = Scribd.audiobook_player;
      this.previous_progress = this.get_progress();
      Audio.__super__.constructor.call(this, this.opts);
      this.player.on("scribd:audiobook:play scribd:audiobook:pause scribd:audiobook:bookmark_location scribd:audiobook:unload scribd:audiobook:trackChanged scribd:audiobook:next scribd:audiobook:prev scribd:audiobook:seekTo scribd:audiobook:skipBack scribd:audiobook:jumpTo", this.update);
      setInterval(this.update, this.post_ms);
    }

    Audio.prototype.update = function() {
      var progress;
      if (!this.enabled()) {
        return;
      }
      progress = this.get_progress();
      this.offset_type = "ms";
      this.offset = progress;
      this.percentage = progress / this.player.get_runtime() * 100;
      if (this.player.isPlaying()) {
        this.post();
        return this.track_for_payouts();
      }
    };

    Audio.prototype.get_progress = function(track, position) {
      var chapter, chapters, i, len, progress, ref;
      if (track == null) {
        track = this.player.get_track_num();
      }
      if (position == null) {
        position = this.player.get_track_pos();
      }
      chapters = (ref = this.player.current_chapters()) != null ? ref.slice(0, track) : void 0;
      if (!chapters) {
        return;
      }
      progress = 0;
      for (i = 0, len = chapters.length; i < len; i++) {
        chapter = chapters[i];
        progress += chapter.duration;
      }
      progress += position;
      if (this.opts.preview_restricted) {
        return progress = Math.min(progress, this.opts.preview_threshold);
      } else {
        return progress;
      }
    };

    Audio.prototype.track_for_payouts = function() {
      var progress;
      progress = this.get_progress();
      $rat("abook_listen", [Scribd.current_doc.id, void 0, void 0, this.previous_progress, progress]);
      $rat.root().flushEvents();
      return this.previous_progress = progress;
    };

    return Audio;

  })(Scribd.ReadingProgress.Base);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/epub.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.Epub = (function(superClass) {
    extend(Epub, superClass);

    function Epub() {
      return Epub.__super__.constructor.apply(this, arguments);
    }

    Epub.prototype.update = function(offset_type, offset, percentage) {
      if (!this.enabled()) {
        return;
      }
      this.offset_type = offset_type;
      this.offset = offset;
      this.percentage = percentage;
      return this.throttled_post_handler();
    };

    Epub.prototype.track = function() {};

    return Epub;

  })(Scribd.ReadingProgress.Base);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/pdf.coffee (last modified: 2016-05-24 20:14:50 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.Pdf = (function(superClass) {
    extend(Pdf, superClass);

    Pdf.prototype.enabled = function() {
      if (!window.docManager) {
        return false;
      }
      if (!this.opts.scroll_node) {
        return false;
      }
      return Pdf.__super__.enabled.apply(this, arguments);
    };

    Pdf.prototype.default_opts = function() {
      return _.extend(Pdf.__super__.default_opts.apply(this, arguments), {
        scroll_node: null
      });
    };

    function Pdf(opts) {
      this.opts = opts != null ? opts : {};
      this.update = bind(this.update, this);
      Pdf.__super__.constructor.call(this, this.opts);
      $(this.opts.scroll_node).off(this.events.scroll).on(this.events.scroll, this.update);
    }

    Pdf.prototype.update = function() {
      var page;
      if (!this.enabled()) {
        return;
      }
      page = window.docManager.currentPageNum() - 1;
      this.offset_type = "page";
      this.offset = page;
      this.percentage = page / this.opts.total_pages * 100;
      return this.throttled_post_handler();
    };

    return Pdf;

  })(Scribd.ReadingProgress.Base);

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-05-17 23:37:24 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/external_progress_lightbox.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.ExternalProgressLightbox = (function(superClass) {
    extend(ExternalProgressLightbox, superClass);

    ExternalProgressLightbox.should_be_shown = function(progress) {
      if (!(progress != null ? progress.offset : void 0)) {
        return false;
      }
      if (progress.from_current_device) {
        return false;
      }
      if (progress.device_name === "browser") {
        return false;
      }
      return true;
    };

    function ExternalProgressLightbox(container, opts) {
      var ref;
      this.opts = opts;
      this.container = $(container);
      ExternalProgressLightbox.__super__.constructor.apply(this, arguments);
      this.show(this.progress = (ref = Scribd.current_doc) != null ? ref.reading_progress : void 0);
      $(window).on("scribd:external_reading_progress", (function(_this) {
        return function(event, progress) {
          return _this.show(progress);
        };
      })(this));
    }

    ExternalProgressLightbox.prototype.show = function(progress1) {
      var document_type;
      this.progress = progress1;
      if (Scribd.ReadingProgress.ExternalProgressLightbox.should_be_shown(this.progress)) {
        this.container.find(".device_name").text(this.progress.device_name);
        ExternalProgressLightbox.__super__.show.apply(this, arguments);
        document_type = Scribd.current_doc.is_comic ? "comic" : Scribd.current_doc.is_sheet_music ? "sheet music" : "book";
        return this.container.track_rats("reading_progress:progress_moved:show", {
          doc_id: Scribd.current_doc.id,
          destination_offset: this.progress.offset,
          offset_type: this.progress.offset_type,
          document_type: document_type
        });
      }
    };

    return ExternalProgressLightbox;

  })(Scribd.StackedLightbox);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/past_preview_lightbox.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.PastPreviewLightbox = (function(superClass) {
    extend(PastPreviewLightbox, superClass);

    PastPreviewLightbox.should_be_shown = (function() {
      var show;
      show = true;
      return function() {
        var progress, ref;
        if (!show) {
          return false;
        }
        if (!Scribd.logged_in) {
          return false;
        }
        show = false;
        progress = ((ref = Scribd.current_doc.reading_progress) != null ? ref.offset : void 0) || 0;
        if (Scribd.read_page != null) {
          return Scribd.read_page.epub.isProgressBeyondBounds(null, progress);
        } else if (typeof docManager !== "undefined" && docManager !== null) {
          return progress + 1 > docManager._maximumAllowedPage;
        }
      };
    })();

    function PastPreviewLightbox(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      PastPreviewLightbox.__super__.constructor.apply(this, arguments);
      this.show();
      this.container.dispatch("click", {
        restart_preview: (function(_this) {
          return function() {
            if (Scribd.read_page != null) {
              Scribd.read_page.goto_progress({
                offset_type: "character",
                offset: 0
              });
            } else if (typeof docManager !== "undefined" && docManager !== null) {
              docManager.gotoPage(1);
            }
            return _this.close(true);
          };
        })(this),
        get_full_title: (function(_this) {
          return function() {
            _this.close(true);
            return "continue";
          };
        })(this)
      });
    }

    PastPreviewLightbox.prototype.show = function() {
      var document_type;
      if (!Scribd.ReadingProgress.PastPreviewLightbox.should_be_shown()) {
        return;
      }
      if (!this.opts.credit_restricted) {
        return;
      }
      PastPreviewLightbox.__super__.show.apply(this, arguments);
      document_type = Scribd.current_doc.is_comic ? "comic" : Scribd.current_doc.is_sheet_music ? "sheet music" : "book";
      return this.container.track_rats("reading_progress:progress_moved:show", {
        doc_id: Scribd.current_doc.id,
        desired_offset: Scribd.current_doc.reading_progress.offset,
        offset_type: Scribd.current_doc.reading_progress.offset_type,
        document_type: document_type,
        is_preview: true
      });
    };

    PastPreviewLightbox.prototype.close = function(close) {
      if (close == null) {
        close = false;
      }
      if (close) {
        return PastPreviewLightbox.__super__.close.apply(this, arguments);
      }
    };

    return PastPreviewLightbox;

  })(Scribd.StackedLightbox);

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

