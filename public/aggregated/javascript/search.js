/************************************************************************
 * 'search.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-03-03 23:50:10 +0000
 * Generated at: 2016-03-22 23:30:01 +0000
 ************************************************************************/


/************************************************************************
 * :files, 'spec_javascripts', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'spec_javascripts', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-03-03 23:50:10 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-03-03 23:50:10 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - public/javascripts/jquery_global/follow_button.coffee (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
(function() {
  $(function() {
    return $(document).on("click", "[data-follow_button]", function(e) {
      var btn, params;
      btn = $(e.currentTarget);
      if (btn.is(".loading")) {
        return;
      }
      if (btn.is(".following")) {
        btn.removeClass("following");
        return $.ajax({
          type: "post",
          url: "/friends/" + (btn.data("user_id")),
          data: Scribd.CSRF.with_token({
            _method: "delete"
          }),
          success: function(res) {
            return btn.removeClass("loading");
          }
        });
      } else {
        if (!btn.data("follow_source")) {
          Scribd.log("You should provide data-follow_source for follow button", null, "warn");
        }
        params = {
          "followship[publisher_id]": btn.data("user_id"),
          "followship[source]": btn.data("follow_source") || "unknown_source"
        };
        btn.addClass("following");
        return $.ajax({
          type: "post",
          data: Scribd.CSRF.with_token(),
          url: "/friends?" + $.param(params),
          success: function(res) {
            return btn.removeClass("loading");
          }
        });
      }
    });
  });

}).call(this);




/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-21 00:14:18 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/recommendation_tracking.coffee (last modified: 2016-01-21 00:14:18 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.RecommendationTracking = (function() {
    RecommendationTracking._page_count = 0;

    RecommendationTracking._compilation_ids = {};

    function RecommendationTracking() {
      throw "Scribd.RecommendationTracking is not instantiatable";
    }

    RecommendationTracking.Module = (function() {
      function Module(container, opts) {
        this.opts = opts != null ? opts : {};
        this.ready = bind(this.ready, this);
        this.container = $(container);
        this.container.on("scribd:enclosing_tracking_module", (function(_this) {
          return function(e, fn) {
            return fn(_this);
          };
        })(this));
        if (this.opts.compilation_id) {
          Scribd.RecommendationTracking.page_view_deferred(this.opts.compilation_id).done((function(_this) {
            return function(view_id) {
              return _this.ready(view_id, _this.opts.widget_name);
            };
          })(this));
        } else {
          this.container.on("scribd:setup_tracking", (function(_this) {
            return function(e, view_id, widget_name) {
              return _this.ready(view_id, widget_name);
            };
          })(this));
        }
      }

      Module.prototype.setup_inview_tracking = function() {
        if (this.tracking == null) {
          return typeof console !== "undefined" && console !== null ? console.error("missing tracking") : void 0;
        }
        this.container.one("inview", (function(_this) {
          return function() {
            var base;
            Scribd.RecommendationTracking.track_module_view(_this.tracking.view_id, _this.tracking.module_id, _this.tracking.widget_name);
            return typeof (base = _this.opts).on_in_view === "function" ? base.on_in_view(_this.tracking) : void 0;
          };
        })(this));
        return Scribd.RecommendationTracking.trigger_inview_check();
      };

      Module.prototype.setup_click_tracking = function(children) {
        var e, i, len, results;
        if (children == null) {
          children = this.container.find("[data-track_uuid]");
        }
        if (this.tracking == null) {
          return typeof console !== "undefined" && console !== null ? console.error("missing tracking") : void 0;
        }
        results = [];
        for (i = 0, len = children.length; i < len; i++) {
          e = children[i];
          e = $(e);
          e.attr("data-track_rats", "rc");
          results.push(e.attr("data-track_rats_value", JSON.stringify({
            "vi": this.tracking.view_id,
            "ri": e.data("track_uuid")
          })));
        }
        return results;
      };

      Module.prototype.ready = function(view_id, widget_name) {
        var base, module_id;
        module_id = this.opts.module_id || this.container.data("track_uuid");
        if (!module_id) {
          return;
        }
        this.tracking = {
          widget_name: widget_name,
          view_id: view_id,
          module_id: module_id
        };
        if (typeof (base = this.opts).on_tracking === "function") {
          base.on_tracking(this.tracking);
        }
        this.setup_inview_tracking();
        return this.setup_click_tracking();
      };

      return Module;

    })();

    RecommendationTracking.page_view_deferred = function(compilation_id) {
      var deferred;
      if (!compilation_id) {
        console.debug("attempted page view without compilation id");
        return $.Deferred();
      }
      RecommendationTracking._view_id_deferred || (RecommendationTracking._view_id_deferred = {});
      deferred = RecommendationTracking._view_id_deferred[compilation_id];
      if (!deferred) {
        deferred = $.Deferred();
        RecommendationTracking._view_id_deferred[compilation_id] = deferred;
        Scribd.RecommendationTracking.track_page_view(compilation_id, function(view_id) {
          return deferred.resolve(view_id);
        });
      }
      return deferred;
    };

    RecommendationTracking.track_page_view = function(compilation_id, callback) {
      var count;
      if (Scribd.logging_enabled) {
        console.debug("page view", compilation_id);
      }
      count = this._compilation_ids[compilation_id];
      if (count == null) {
        count = this._compilation_ids[compilation_id] = this._page_count++;
      }
      return $rat.root().withVid((function(_this) {
        return function(view_id) {
          view_id = view_id + "." + count;
          $rat("pv", {
            "vi": view_id,
            "ci": compilation_id
          });
          return typeof callback === "function" ? callback(view_id) : void 0;
        };
      })(this));
    };

    RecommendationTracking.track_module_view = function(view_id, module_id, widget) {
      var data;
      if (Scribd.logging_enabled) {
        console.debug("module view", arguments);
      }
      data = {
        "vi": view_id,
        "mi": module_id
      };
      if (widget != null) {
        data.w = widget;
      }
      return $rat("mv", data);
    };

    RecommendationTracking.track_obj_view = function(view_id, rec_id) {
      if (Scribd.logging_enabled) {
        console.debug("obj view", arguments);
      }
      return $rat("rv", {
        "vi": view_id,
        "ri": rec_id
      });
    };

    RecommendationTracking.track_obj_click = function(view_id, rec_id) {
      if (Scribd.logging_enabled) {
        console.debug("obj click", arguments);
      }
      return $rat("rc", {
        "vi": view_id,
        "ri": rec_id
      });
    };

    RecommendationTracking.trigger_inview_check = function() {
      this.trigger_inview_check = _.debounce(function() {
        return $.event.special.inview.run();
      }, 0);
      return this.trigger_inview_check();
    };

    return RecommendationTracking;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/solr/base.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Search || (Scribd.Search = {});

  Scribd.UI || (Scribd.UI = {});

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-01-21 00:24:17 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/login/_archive_login_lightbox.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.ArchiveLoginLightbox = (function() {
    function ArchiveLoginLightbox(container) {
      this.set_page();
      this.container = $(container);
      this.container.on("click", "a.skip_login", (function(_this) {
        return function() {
          return _this.container.track({
            action: "click",
            label: _this.page + ":login_lightbox:skip_login"
          });
        };
      })(this));
    }

    ArchiveLoginLightbox.prototype.set_page = function() {
      var ref;
      this.page = window.location.pathname.split("/")[1];
      this.page || (this.page = "home");
      if (((ref = Scribd.current_doc) != null ? ref.signup_context : void 0) != null) {
        return this.page = this.page + "_" + Scribd.current_doc.signup_context;
      }
    };

    return ArchiveLoginLightbox;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/pills.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Pills = (function() {
    function Pills(container, opts) {
      this.container = container;
      if (opts == null) {
        opts = {};
      }
      this.container = $(this.container);
      Scribd.hook_tooltips(this.container, {
        position: (function(_this) {
          return function(elm, tooltip_elm) {
            var height, p, tip_width, width;
            p = elm.position();
            tip_width = tooltip_elm.outerWidth();
            width = elm.outerWidth();
            height = elm.outerHeight();
            return tooltip_elm.css({
              left: p.left + Math.floor((width - tip_width) / 2)
            });
          };
        })(this)
      });
      this.container.on("click", ".title:not(.disabled)", (function(_this) {
        return function(e) {
          var val;
          val = $(e.target).data('value');
          _this.container.trigger("Scribd:pills", val);
          if (opts.callback) {
            return callback(val);
          }
        };
      })(this));
    }

    return Pills;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/carousels/carousel.coffee (last modified: 2016-01-21 00:24:17 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  if (Scribd.UI == null) {
    Scribd.UI = {};
  }

  Scribd.UI.Carousel = (function() {
    Carousel.prototype.anim_speed = 200;

    Carousel.prototype.easing = "ease_in_out_cubic";

    Carousel.prototype.images_loaded = false;

    Carousel.setup_mouse_move = _.once(function() {
      var clean;
      clean = _.throttle(this.clean_removed_carousels, 2000);
      return $(document.body).on("mousemove", _.throttle(function(e) {
        var carousel, h, i, j, k, l, len, len1, other, ref, ref1, results, top, y;
        clean();
        y = e.pageY;
        ref = Scribd.UI.Carousel.carousels;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          carousel = ref[i];
          top = carousel.container.offset().top;
          if (y < top || y > top + 400) {
            continue;
          }
          h = carousel.container.outerHeight();
          if (y > top + h) {
            continue;
          }
          carousel.show_paddles(true);
          ref1 = Scribd.UI.Carousel.carousels;
          for (k = l = 0, len1 = ref1.length; l < len1; k = ++l) {
            other = ref1[k];
            if (i === k) {
              continue;
            }
            other.show_paddles(false);
          }
          break;
        }
        return results;
      }, 150));
    });

    Carousel.clean_removed_carousels = function() {
      var carousel;
      return Scribd.UI.Carousel.carousels = (function() {
        var j, len, ref, results;
        ref = Scribd.UI.Carousel.carousels;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          carousel = ref[j];
          if (!$.contains(document.documentElement, carousel.container[0])) {
            continue;
          }
          results.push(carousel);
        }
        return results;
      })();
    };

    function Carousel(container, opts) {
      var check_items;
      this.container = container;
      this.opts = opts != null ? opts : {};
      Scribd.UI.Carousel.carousels.push(this);
      this.container = $(this.container).data("carousel", this);
      this.images_loaded = !this.container.data("lazy_images");
      if (this.container.hasClass("cache_widget")) {
        this.container = this.container.find('.carousel_widget');
      }
      this.carousel = this.container.find(".carousel");
      this.scrolling = this.carousel.find(".carousel_scrolling");
      check_items = this.check_items_inview;
      this.check_items_inview = _.debounce(((function(_this) {
        return function() {
          return check_items.apply(_this);
        };
      })(this)), 500);
      this.container.on("scribd:reshape_carousel", (function(_this) {
        return function() {
          return _this.reshape();
        };
      })(this));
      if (this.opts.tracking_module !== false) {
        new Scribd.RecommendationTracking.Module(this.container, {
          on_tracking: (function(_this) {
            return function(tracking) {
              _this.tracking = tracking;
            };
          })(this),
          on_in_view: (function(_this) {
            return function() {
              return _this.check_items_inview();
            };
          })(this)
        });
      }
      this.setup_events();
      this.setup_scrollbar();
      this.setup_flags();
      if (this.opts.show_ui_on_mousemove) {
        Scribd.UI.Carousel.setup_mouse_move();
      }
      this.reshape();
      this.setup_viewport_scrolling();
    }

    Carousel.prototype.setup_viewport_scrolling = function() {
      var cache_offsets, check_visibility, has_been_viewed, listen_target, resize_handler, scroll_handler, scroll_parent, top, win;
      if (this.images_loaded) {
        return;
      }
      win = $(window);
      scroll_parent = this.container.closest(".carousel_scroll_parent");
      has_been_viewed = false;
      if (scroll_parent.length) {
        listen_target = scroll_parent;
        top = 0;
        cache_offsets = _.throttle((function(_this) {
          return function() {
            return top = _this.container.offset().top + scroll_parent[0].scrollTop - scroll_parent.offset().top - scroll_parent.height();
          };
        })(this), 1000, {
          trailing: false
        });
        check_visibility = (function(_this) {
          return function() {
            cache_offsets();
            return scroll_parent[0].scrollTop > top;
          };
        })(this);
      } else {
        listen_target = win;
        top = this.container.offset().top;
        check_visibility = (function(_this) {
          return function() {
            return win.scrollTop() + win.height() > top;
          };
        })(this);
      }
      resize_handler = (function(_this) {
        return function() {
          if (has_been_viewed) {
            return _this.show_visible_images();
          }
        };
      })(this);
      scroll_handler = (function(_this) {
        return function() {
          if (check_visibility()) {
            has_been_viewed = true;
            _this.show_visible_images();
            return listen_target.off("scroll resize", scroll_handler);
          }
        };
      })(this);
      win.on("resize", _.debounce(resize_handler, 100));
      listen_target.on("scroll resize", scroll_handler);
      return _.defer(scroll_handler);
    };

    Carousel.prototype.setup_events = function() {
      if (this.opts.disable_click) {
        return;
      }
      this.container.dispatch("click", {
        carousel_prev: (function(_this) {
          return function() {
            _this.on_interact();
            return _this.scroll_items(-_this.cells_to_scroll());
          };
        })(this),
        carousel_next: (function(_this) {
          return function() {
            _this.on_interact();
            return _this.scroll_items(_this.cells_to_scroll());
          };
        })(this)
      });
      return this.container.on("click", ".doc_link", function(e) {
        return $(e.target).trigger("scribd:doc_link_clicked");
      });
    };

    Carousel.prototype.setup_scrollbar = function() {
      var thumb, update_classes;
      this.scrollbar = this.container.find(".carousel_scrollbar");
      thumb = this.scrollbar.find(".carousel_scrollbar_thumb");
      update_classes = _.debounce((function(_this) {
        return function(left, outer, inner) {
          _this.container.toggleClass("on_first_page", left === 0);
          return _this.container.toggleClass("on_last_page", left + outer === inner);
        };
      })(this), 100);
      this.update_scrollbar = (function(_this) {
        return function() {
          var available, inner, left, left_edge, outer, right_edge;
          inner = _this.scroll_width();
          outer = _this.scrolling.innerWidth();
          left = _this.scrolling.scrollLeft();
          available = _this.scrollbar.width();
          left_edge = Math.floor(left / inner * outer);
          right_edge = outer - Math.floor((left + outer) / inner * outer);
          left_edge = Math.min(left_edge, available - 10);
          if (right_edge <= 10) {
            right_edge = 0;
          }
          if (right_edge > available - left_edge) {
            right_edge = available - left_edge - 10;
          }
          update_classes(left, outer, inner);
          return thumb.css({
            left: left_edge + "px",
            right: right_edge + "px"
          });
        };
      })(this);
      this.scrolling.on("scroll", (function(_this) {
        return function() {
          _this.on_interact();
          _this.update_scrollbar();
          return _this.check_items_inview();
        };
      })(this));
      this.update_scrollbar();
      return thumb.draggable({
        start: (function(_this) {
          return function() {
            return _this.container.addClass("dragging");
          };
        })(this),
        stop: (function(_this) {
          return function() {
            return _this.container.removeClass("dragging");
          };
        })(this),
        move: (function(_this) {
          return function(dx, dy) {
            var scale;
            scale = _this.scroll_width() / _this.scrolling.innerWidth();
            return _this.scrolling.scrollLeft(_this.scrolling.scrollLeft() + dx * scale);
          };
        })(this)
      });
    };

    Carousel.prototype.scroll_items = function(n) {
      var left, max, target, time, width;
      width = this.cell_width();
      if (width === 0) {
        return;
      }
      if (this.scrolling.is(":animated")) {
        return;
      }
      left = this.scrolling.scrollLeft();
      target = Math.floor(left / width + 0.1) * width + n * width;
      max = this.scroll_width() - this.scrolling.innerWidth();
      target = Math.max(0, Math.min(target, max));
      if (max - target < 15) {
        target = max;
      }
      if (target < 15) {
        target = 0;
      }
      if (left === target) {
        return;
      }
      time = Math.floor(this.anim_speed * Math.abs((left - target) / width));
      return this.scrolling.animate({
        scrollLeft: target
      }, {
        duration: time,
        easing: "smoothstep"
      });
    };

    Carousel.prototype.cells_to_scroll = function() {
      var visible_cells;
      visible_cells = this.scrolling.width() / this.cell_width();
      if (visible_cells <= 1.5) {
        return 1;
      }
      return Math.ceil(visible_cells) - 1;
    };

    Carousel.prototype.cell_width = function() {
      return this.carousel.find(".object_cell:first").outerWidth(true);
    };

    Carousel.prototype.scroll_width = function() {
      var ref;
      return ((ref = this.scrolling[0]) != null ? ref.scrollWidth : void 0) || 0;
    };

    Carousel.prototype.reshape = function() {
      var inner, outer;
      inner = this.scroll_width();
      outer = this.scrolling.innerWidth();
      this.container.toggleClass("has_no_scrolling", inner - outer < 5);
      return typeof this.update_scrollbar === "function" ? this.update_scrollbar() : void 0;
    };

    Carousel.prototype.show_visible_images = function() {
      var j, len, max, ref, results, thumb;
      if (this.images_loaded) {
        return;
      }
      max = this.scrolling.innerWidth();
      ref = this.carousel.find("[data-thumb_url]");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        thumb = ref[j];
        thumb = $(thumb);
        if (thumb.position().left < max) {
          results.push(this.show_image($(thumb)));
        } else {
          break;
        }
      }
      return results;
    };

    Carousel.prototype.show_all_images = function() {
      var j, len, ref, results, thumb;
      if (this.images_loaded) {
        return;
      }
      this.images_loaded = true;
      ref = this.carousel.find("[data-thumb_url]");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        thumb = ref[j];
        results.push(this.show_image($(thumb)));
      }
      return results;
    };

    Carousel.prototype.setup_flags = function() {
      return Scribd.DocumentCell.add_flags(this.container);
    };

    Carousel.prototype.show_image = function(cell) {
      var srcset, thumb, thumb_url;
      thumb = cell.find(".thumb");
      if (!thumb.length) {
        thumb = cell;
      }
      thumb_url = thumb.data("thumb_url");
      srcset = thumb.data("srcset");
      if (srcset != null) {
        thumb.removeData("srcset");
        if ((window.devicePixelRatio != null) && window.devicePixelRatio > 1) {
          thumb_url = srcset.split(" ")[2];
        }
      }
      if (thumb_url != null) {
        thumb.removeData("thumb_url");
        if (window.location.hash.match(/\bdebug_images\b/)) {
          thumb.css({
            backgroundColor: "red"
          });
          return setTimeout(function() {
            return thumb.css({
              backgroundImage: "url('" + thumb_url + "')"
            });
          }, 500);
        } else {
          return thumb.css({
            backgroundImage: "url('" + thumb_url + "')"
          });
        }
      }
    };

    Carousel.prototype.show_paddles = function(enable) {
      if (enable == null) {
        enable = true;
      }
      return this.container.toggleClass("ui_visible", !!enable);
    };

    Carousel.prototype.on_interact = function() {
      this.on_interact = function() {};
      this.show_all_images();
      return $(document.body).track({
        category: this.opts.page || "carousel",
        action: "click",
        label: "carousel:first_carousel_click"
      });
    };

    Carousel.prototype.check_items_inview = function() {
      var el, idx, in_view, j, left, len, outer, rec_id, ref, threshold, width;
      if (this.tracking == null) {
        return;
      }
      threshold = 50;
      outer = this.scrolling.innerWidth();
      ref = this.container.find(".document_cell .thumb");
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        el = ref[idx];
        el = $(el);
        if (el.is(".visibility_tracked")) {
          continue;
        }
        left = el.position().left;
        width = el.width();
        in_view = left + threshold >= 0 && left + width - threshold <= outer;
        if (!in_view) {
          continue;
        }
        rec_id = el.closest(".document_cell").data("track_uuid");
        Scribd.RecommendationTracking.track_obj_view(this.tracking.view_id, rec_id);
        el.addClass("visibility_tracked");
      }
      return null;
    };

    return Carousel;

  })();

  Scribd.UI.Carousel.carousels = [];

  Scribd.UI.SquareCarousel = (function(superClass) {
    extend(SquareCarousel, superClass);

    function SquareCarousel() {
      return SquareCarousel.__super__.constructor.apply(this, arguments);
    }

    return SquareCarousel;

  })(Scribd.UI.Carousel);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filtered_document_page.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.FilteredDocumentPage = (function() {
    function FilteredDocumentPage(container) {
      var filter_picker;
      this.container = $(container);
      filter_picker = this.container.find(".filter_picker");
      if (filter_picker.is(".open")) {
        this.container.find(".toggle_filters_btn").addClass("open");
      }
      this.container.on("click", ".toggle_filters_btn", (function(_this) {
        return function(e) {
          $(e.currentTarget).toggleClass("open");
          return filter_picker.slideToggle("fast");
        };
      })(this));
      this.container.find(".language_filter_picker").fancy_select();
      this.container.on("change", ".language_filter_picker", (function(_this) {
        return function(e) {
          return window.location = $(e.currentTarget).val();
        };
      })(this));
    }

    return FilteredDocumentPage;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filter.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Filter = (function() {
    function Filter(container, opts) {
      this.container = container;
      if (opts == null) {
        opts = {};
      }
      this.container = $(this.container);
      this.container.on("click", ".row:not(.selected)", (function(_this) {
        return function(e) {
          var val;
          $(document.body).trigger("scribd:close_hover_menus");
          val = $(e.target).attr('value');
          _this.render_value(val, $(e.currentTarget));
          _this.container.trigger("scribd:filter:" + opts.filter_name, {
            value: val,
            extra: $(e.target).data()
          });
          _this.container.find(".row").removeClass("selected");
          $(e.currentTarget).addClass("selected");
          return typeof callback === "function" ? callback(val) : void 0;
        };
      })(this));
    }

    Filter.prototype.render_value = function(val, row) {
      return this.container.find(".filter_label .current_value_text").text(row.text());
    };

    return Filter;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/search/unavailable_author.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.UnavailableAuthor = (function() {
    function UnavailableAuthor(container) {
      var grid, i, len, ref;
      this.container = container;
      this.container = $(this.container);
      this.setup_events();
      ref = this.container.find(".document_grid");
      for (i = 0, len = ref.length; i < len; i++) {
        grid = ref[i];
        new Scribd.UI.ObjectGrid($(grid));
      }
    }

    UnavailableAuthor.prototype.setup_events = function() {
      return this.container.dispatch("click", {
        show_unavailable_author_request: function($el) {
          var lb;
          lb = Scribd.Lightbox.open('unavailable_author_request_lightbox', Scribd.UnavailableAuthorRequestLightbox);
          return lb.set_data({
            author_name: $el.data("author_name"),
            author_id: $el.data("author_id")
          });
        }
      });
    };

    return UnavailableAuthor;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/search/unavailable_book.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.UnavailableBook = (function() {
    function UnavailableBook(container) {
      this.container = container;
      this.container = $(this.container);
      this.setup_events();
      new Scribd.UI.ObjectGrid(this.container.find(".document_grid"));
    }

    UnavailableBook.prototype.setup_events = function() {
      return this.container.dispatch("click", {
        show_unavailable_book_request: function($el) {
          var lb;
          lb = Scribd.Lightbox.open('unavailable_book_request_lightbox', Scribd.UnavailableBookRequestLightbox);
          return lb.set_data({
            book_id: $el.data("book_id")
          });
        }
      });
    };

    return UnavailableBook;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/restriction_banner.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.ReadRestrictionBanner = (function() {
    function ReadRestrictionBanner(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      this.container.dispatch("click", {
        publisher_request_btn: (function(_this) {
          return function(btn) {
            var banner, base;
            if (btn.is(".disabled")) {
              return;
            }
            $.post(btn.data("href"));
            banner = btn.closest(".read_restriction_banner");
            btn.addClass("disabled");
            banner.addClass("request_submitted").find(".success_message").hide().slideDown();
            return typeof (base = _this.opts).after_submit === "function" ? base.after_submit(btn) : void 0;
          };
        })(this)
      });
    }

    return ReadRestrictionBanner;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/solr/show.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.UI.SearchResultRow = (function(superClass) {
    extend(SearchResultRow, superClass);

    SearchResultRow.prototype.min_spacing = 40;

    SearchResultRow.prototype.min_min_spacing = 20;

    function SearchResultRow(container) {
      this.container = $(container);
      this.setup_bookends();
      this.setup_events();
      SearchResultRow.__super__.constructor.apply(this, arguments);
    }

    SearchResultRow.prototype.setup_events = function() {
      return this.container.dispatch("click", {
        show_unavailable_book_modal: function(result_element) {
          var lb;
          lb = Scribd.Lightbox.open('unavailable_book_request_lightbox', Scribd.UnavailableBookRequestLightbox);
          return lb.set_data({
            book_id: result_element.id
          });
        }
      });
    };

    SearchResultRow.prototype.setup_bookends = function() {
      this.unavailable_cell = this.container.find(".unavailable_cell");
      if (!this.unavailable_cell.length) {
        this.unavailable_cell = null;
      }
      this.more_results_cell = this.container.find(".more_results");
      if (!this.more_results_cell.length) {
        this.more_results_cell = null;
      }
      this.grid = this.container.find(".object_grid").last();
      return this.cells = this.grid.find(".object_cell");
    };

    SearchResultRow.prototype.get_width = function() {
      this._inner || (this._inner = this.container.find(".section_row"));
      return this._inner.outerWidth() - this._inner.find(".solr_top_result").outerWidth();
    };

    SearchResultRow.prototype.fit_to_width = function() {
      var has_more, n, visible_cells;
      SearchResultRow.__super__.fit_to_width.apply(this, arguments);
      n = this.get_n(this.get_width());
      if (this.unavailable_cell) {
        n -= 1;
      }
      has_more = false;
      if (this.more_results_cell) {
        if (this.cells.length > n) {
          this.more_results_cell.show();
          has_more = true;
          n -= 1;
        } else {
          this.more_results_cell.hide();
        }
      }
      visible_cells = this.cells.hide().slice(0, n).show().css("margin-right", "");
      if (!has_more) {
        visible_cells.last().css("margin-right", "0");
      }
      if (this.unavailable_cell) {
        return this.unavailable_cell.css("margin-right", (this._current_spacing - 45) + "px");
      }
    };

    return SearchResultRow;

  })(Scribd.UI.ObjectGrid);

  Scribd.UI.Search = (function() {
    function Search(container1) {
      this.container = container1;
      this.container = $(this.container);
      this.setup_rows();
      this.setup_tracking();
    }

    Search.prototype.setup_tracking = function() {
      return Scribd.RecommendationTracking.page_view_deferred(null).done((function(_this) {
        return function(view_id) {
          return _this.container.attr("data-track_rats_value", JSON.stringify({
            view_id: view_id
          }));
        };
      })(this));
    };

    Search.prototype.setup_rows = function() {
      var i, len, results, row, rows;
      rows = this.container.find(".section");
      results = [];
      for (i = 0, len = rows.length; i < len; i++) {
        row = rows[i];
        row = $(row);
        results.push(new Scribd.UI.SearchResultRow(row));
      }
      return results;
    };

    return Search;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/solr/authors.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.UI.AuthorSearch = (function(superClass) {
    extend(AuthorSearch, superClass);

    AuthorSearch.prototype.page = 1;

    function AuthorSearch(container) {
      this.container = container;
      AuthorSearch.__super__.constructor.apply(this, arguments);
      this.container = $(this.container);
    }

    return AuthorSearch;

  })(Scribd.UI.Search);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/solr/_unavailable_result.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UnavailableResultCell = (function() {
    function UnavailableResultCell(container) {
      this.container = container;
      new Scribd.ReadRestrictionBanner(this.container, {
        after_submit: (function(_this) {
          return function(btn) {
            Scribd.Lightbox.open("publisher_request_lb");
            return btn.closest(".on_request").remove();
          };
        })(this)
      });
    }

    return UnavailableResultCell;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/solr/users.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var UserGrid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  UserGrid = (function(superClass) {
    extend(UserGrid, superClass);

    function UserGrid() {
      return UserGrid.__super__.constructor.apply(this, arguments);
    }

    UserGrid.prototype.min_spacing = 40;

    UserGrid.prototype.min_min_spacing = 20;

    UserGrid.prototype.cell_width = 150;

    return UserGrid;

  })(Scribd.UI.ObjectGrid);

  Scribd.UI.Search.Users = (function(superClass) {
    extend(Users, superClass);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.setup_grid = function() {
      var grid;
      grid = this.container.find(".all_results_grid .object_grid");
      if (!grid.length) {
        return;
      }
      return new UserGrid(grid);
    };

    return Users;

  })(Scribd.UI.Search);

}).call(this);
