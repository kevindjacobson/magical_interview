/************************************************************************
 * 'book_preview.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:11 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-15 19:39:42 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/browser_history.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.BrowserHistory = (function() {
    function BrowserHistory() {}

    BrowserHistory.current_id = 0;

    BrowserHistory.restore_id = 0;

    BrowserHistory.original_title = document.title;

    BrowserHistory.enabled = function() {
      return !!(typeof history !== "undefined" && history !== null ? history.pushState : void 0);
    };

    BrowserHistory.init = function() {
      if (!BrowserHistory.enabled()) {
        return;
      }
      return $(window).on("popstate.browserhistory", function(e) {
        var state;
        state = e.originalEvent.state;
        if (state != null ? state.id : void 0) {
          BrowserHistory.current_id = state.id;
        } else {
          BrowserHistory.current_id = 0;
        }
        if (state != null ? state.title : void 0) {
          return document.title = state.title;
        } else {
          return document.title = BrowserHistory.original_title;
        }
      });
    };

    BrowserHistory.begin = function() {
      if (!BrowserHistory.enabled()) {
        return;
      }
      return BrowserHistory.restore_id = BrowserHistory.current_id;
    };

    BrowserHistory.restore = function() {
      var delta;
      if (!BrowserHistory.enabled()) {
        return;
      }
      delta = BrowserHistory.restore_id - BrowserHistory.current_id;
      BrowserHistory.current_id = BrowserHistory.restore_id;
      return history.go(delta);
    };

    BrowserHistory.push = function(url, state) {
      var ref, title;
      if (!BrowserHistory.enabled()) {
        return;
      }
      if (state.url == null) {
        state.url = url;
      }
      state.id = ++BrowserHistory.current_id;
      title = (ref = state.title) != null ? ref : "";
      history.pushState(state, title, url);
      if (title) {
        return document.title = title;
      }
    };

    BrowserHistory.pop = function() {
      if (!BrowserHistory.enabled()) {
        return;
      }
      return history.go(-1);
    };

    BrowserHistory.disable = function() {
      $(window).off("popstate.browserhistory");
      return BrowserHistory.enabled = function() {
        return false;
      };
    };

    return BrowserHistory;

  })();

  Scribd.BrowserHistory.init();

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-12 00:02:31 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/popover.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var valid_directions, valid_events,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  valid_events = ["hover", "click"];

  valid_directions = ["top", "left", "right", "bottom"];

  Scribd.Popover = (function() {
    function Popover(selector, opts) {
      var base, base1, ref, ref1;
      this.opts = opts;
      if (this.opts == null) {
        this.opts = {};
      }
      if (!(ref = this.opts.event, indexOf.call(valid_events, ref) >= 0)) {
        return;
      }
      if (!(ref1 = this.opts.direction, indexOf.call(valid_directions, ref1) >= 0)) {
        return;
      }
      if ((base = this.opts).delay == null) {
        base.delay = 200;
      }
      if ((base1 = this.opts).offset == null) {
        base1.offset = {
          top: 0,
          left: 0
        };
      }
      this.container = $(selector);
      this.trigger = $(selector).find(".popover_trigger").first();
      this.content = $(selector).find(".popover_content").first();
      this.container.data("popover", this);
      this["setup_" + this.opts.event].call(this);
    }

    Popover.prototype.open = function() {
      var offset;
      this.content.show();
      offset = this.calculate_offset(this.opts.direction);
      return this.apply_offset(this.content, offset);
    };

    Popover.prototype.close = function() {
      return this.content.hide();
    };

    Popover.prototype.setup_hover = function() {
      var enter, exit, hovering, timeout;
      timeout = null;
      hovering = false;
      enter = function() {
        timeout = clearTimeout(timeout);
        if (hovering) {
          return;
        }
        return hovering = true;
      };
      exit = (function(_this) {
        return function() {
          hovering = false;
          return timeout != null ? timeout : timeout = setTimeout(_.bind(_this.close, _this), _this.opts.delay);
        };
      })(this);
      this.trigger.mouseenter((function(_this) {
        return function() {
          return enter() && _this.open();
        };
      })(this));
      this.content.mouseenter(enter);
      this.trigger.mouseleave(exit);
      return this.content.mouseleave(exit);
    };

    Popover.prototype.setup_click = function() {
      var complete, open;
      open = false;
      complete = (function(_this) {
        return function(e) {
          if ($(e.target).closest(".popover_content").length > 0) {
            return;
          }
          $(document).off("click.popover");
          _this.close();
          return open = false;
        };
      })(this);
      return this.trigger.click((function(_this) {
        return function(e) {
          e.stopPropagation();
          if (open) {
            return complete(e);
          }
          _this.open();
          open = true;
          return $(document).on("click.popover", complete);
        };
      })(this));
    };

    Popover.prototype.calculate_offset = function(direction) {
      var height, width;
      if (this.trigger_position == null) {
        this.trigger_position = this.get_position(this.trigger);
      }
      width = this.content.outerWidth();
      height = this.content.outerHeight();
      return this["calculate_" + direction + "_offset"](width, height);
    };

    Popover.prototype.calculate_top_offset = function(width, height) {
      return {
        top: this.trigger_position.top - height,
        left: this.trigger_position.left + (this.trigger_position.width / 2) - (width / 2)
      };
    };

    Popover.prototype.calculate_bottom_offset = function(width, height) {
      return {
        top: this.trigger_position.top + this.trigger_position.height,
        left: this.trigger_position.left + (this.trigger_position.width / 2) - (width / 2)
      };
    };

    Popover.prototype.calculate_left_offset = function(width, height) {
      return {
        top: this.trigger_position.top + (this.trigger_position.height / 2) - (height / 2),
        left: this.trigger_position.left - width
      };
    };

    Popover.prototype.calculate_right_offset = function(width, height) {
      return {
        top: this.trigger_position.top + (this.trigger_position.height / 2) - (height / 2),
        left: this.trigger_position.left + this.trigger_position.width
      };
    };

    Popover.prototype.get_position = function($el) {
      var result;
      result = $el.position();
      result.width = $el.outerWidth();
      result.height = $el.outerHeight();
      result.margin = {};
      result.margin.top = parseInt($el.css('margin-top'), 10);
      if (_.isNaN(result.margin.top)) {
        result.margin.top = 0;
      }
      result.margin.left = parseInt($el.css('margin-left'), 10);
      if (_.isNaN(result.margin.left)) {
        result.margin.left = 0;
      }
      return result;
    };

    Popover.prototype.apply_offset = function($el, offset) {
      offset.top += this.trigger_position.margin.top;
      offset.left += this.trigger_position.margin.left;
      offset.top += this.opts.offset.top;
      offset.left += this.opts.offset.left;
      $el.css("top", offset.top + "px");
      return $el.css("left", offset.left + "px");
    };

    return Popover;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/carousels/carousel.coffee (last modified: 2016-05-09 22:37:19 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  if (Scribd.UI == null) {
    Scribd.UI = {};
  }

  Scribd.UI.Carousel = (function() {
    Carousel.prototype.anim_speed = 200;

    Carousel.prototype.easing = "ease_in_out_cubic";

    Carousel.prototype.images_loaded = false;

    Carousel.setup_mouse_move = _.once(function() {
      var clean;
      clean = _.throttle(this.clean_removed_carousels, 2000);
      return $(document.body).on("mousemove", _.throttle(function(e) {
        var carousel, h, i, j, k, l, len, len1, other, ref, ref1, results, top, y;
        clean();
        y = e.pageY;
        ref = Scribd.UI.Carousel.carousels;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          carousel = ref[i];
          top = carousel.container.offset().top;
          if (y < top || y > top + 400) {
            continue;
          }
          h = carousel.container.outerHeight();
          if (y > top + h) {
            continue;
          }
          carousel.show_paddles(true);
          ref1 = Scribd.UI.Carousel.carousels;
          for (k = l = 0, len1 = ref1.length; l < len1; k = ++l) {
            other = ref1[k];
            if (i === k) {
              continue;
            }
            other.show_paddles(false);
          }
          break;
        }
        return results;
      }, 150));
    });

    Carousel.clean_removed_carousels = function() {
      var carousel;
      return Scribd.UI.Carousel.carousels = (function() {
        var j, len, ref, results;
        ref = Scribd.UI.Carousel.carousels;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          carousel = ref[j];
          if (!$.contains(document.documentElement, carousel.container[0])) {
            continue;
          }
          results.push(carousel);
        }
        return results;
      })();
    };

    function Carousel(container, opts) {
      var check_items;
      this.container = container;
      this.opts = opts != null ? opts : {};
      Scribd.UI.Carousel.carousels.push(this);
      this.container = $(this.container).data("carousel", this);
      this.images_loaded = !this.container.data("lazy_images");
      if (this.container.hasClass("cache_widget")) {
        this.container = this.container.find('.carousel_widget');
      }
      this.carousel = this.container.find(".carousel");
      this.scrolling = this.carousel.find(".carousel_scrolling");
      check_items = this.check_items_inview;
      this.check_items_inview = _.debounce(((function(_this) {
        return function() {
          return check_items.apply(_this);
        };
      })(this)), 500);
      this.container.on("scribd:reshape_carousel", (function(_this) {
        return function() {
          return _this.reshape();
        };
      })(this));
      if (this.opts.tracking_module !== false) {
        new Scribd.RecommendationTracking.Module(this.container, {
          on_tracking: (function(_this) {
            return function(tracking) {
              _this.tracking = tracking;
            };
          })(this),
          on_in_view: (function(_this) {
            return function() {
              return _this.check_items_inview();
            };
          })(this)
        });
      }
      this.setup_events();
      this.setup_scrollbar();
      this.setup_flags();
      if (this.opts.show_ui_on_mousemove) {
        Scribd.UI.Carousel.setup_mouse_move();
      }
      this.reshape();
      this.setup_viewport_scrolling();
    }

    Carousel.prototype.setup_viewport_scrolling = function() {
      var cache_offsets, check_visibility, has_been_viewed, listen_target, resize_handler, scroll_handler, scroll_parent, top, win;
      if (this.images_loaded) {
        return;
      }
      win = $(window);
      scroll_parent = this.container.closest(".carousel_scroll_parent");
      has_been_viewed = false;
      if (scroll_parent.length) {
        listen_target = scroll_parent;
        top = 0;
        cache_offsets = _.throttle((function(_this) {
          return function() {
            return top = _this.container.offset().top + scroll_parent[0].scrollTop - scroll_parent.offset().top - scroll_parent.height();
          };
        })(this), 1000, {
          trailing: false
        });
        check_visibility = (function(_this) {
          return function() {
            cache_offsets();
            return scroll_parent[0].scrollTop > top;
          };
        })(this);
      } else {
        listen_target = win;
        top = this.container.offset().top;
        check_visibility = (function(_this) {
          return function() {
            return win.scrollTop() + win.height() > top;
          };
        })(this);
      }
      resize_handler = (function(_this) {
        return function() {
          if (has_been_viewed) {
            return _this.show_visible_images();
          }
        };
      })(this);
      scroll_handler = (function(_this) {
        return function() {
          if (check_visibility()) {
            has_been_viewed = true;
            _this.show_visible_images();
            return listen_target.off("scroll resize", scroll_handler);
          }
        };
      })(this);
      win.on("resize", _.debounce(resize_handler, 100));
      listen_target.on("scroll resize", scroll_handler);
      return _.defer(scroll_handler);
    };

    Carousel.prototype.setup_events = function() {
      if (this.opts.disable_click) {
        return;
      }
      this.container.dispatch("click", {
        carousel_prev: (function(_this) {
          return function() {
            _this.on_interact();
            return _this.scroll_items(-_this.cells_to_scroll());
          };
        })(this),
        carousel_next: (function(_this) {
          return function() {
            _this.on_interact();
            return _this.scroll_items(_this.cells_to_scroll());
          };
        })(this)
      });
      return this.container.on("click", ".doc_link", function(e) {
        return $(e.target).trigger("scribd:doc_link_clicked");
      });
    };

    Carousel.prototype.setup_scrollbar = function() {
      var thumb, update_classes;
      this.scrollbar = this.container.find(".carousel_scrollbar");
      thumb = this.scrollbar.find(".carousel_scrollbar_thumb");
      update_classes = _.debounce((function(_this) {
        return function(left, outer, inner) {
          _this.container.toggleClass("on_first_page", left === 0);
          return _this.container.toggleClass("on_last_page", left + outer === inner);
        };
      })(this), 100);
      this.update_scrollbar = (function(_this) {
        return function() {
          var available, inner, left, left_edge, outer, right_edge;
          inner = _this.scroll_width();
          outer = _this.scrolling.innerWidth();
          left = _this.scrolling.scrollLeft();
          available = _this.scrollbar.width();
          left_edge = Math.floor(left / inner * outer);
          right_edge = outer - Math.floor((left + outer) / inner * outer);
          left_edge = Math.min(left_edge, available - 10);
          if (right_edge <= 10) {
            right_edge = 0;
          }
          if (right_edge > available - left_edge) {
            right_edge = available - left_edge - 10;
          }
          update_classes(left, outer, inner);
          return thumb.css({
            left: left_edge + "px",
            right: right_edge + "px"
          });
        };
      })(this);
      this.scrolling.on("scroll", (function(_this) {
        return function() {
          _this.on_interact();
          _this.update_scrollbar();
          return _this.check_items_inview();
        };
      })(this));
      this.update_scrollbar();
      return thumb.draggable({
        start: (function(_this) {
          return function() {
            return _this.container.addClass("dragging");
          };
        })(this),
        stop: (function(_this) {
          return function() {
            return _this.container.removeClass("dragging");
          };
        })(this),
        move: (function(_this) {
          return function(dx, dy) {
            var scale;
            scale = _this.scroll_width() / _this.scrolling.innerWidth();
            return _this.scrolling.scrollLeft(_this.scrolling.scrollLeft() + dx * scale);
          };
        })(this)
      });
    };

    Carousel.prototype.scroll_items = function(n) {
      var left, max, target, time, width;
      width = this.cell_width();
      if (width === 0) {
        return;
      }
      if (this.scrolling.is(":animated")) {
        return;
      }
      left = this.scrolling.scrollLeft();
      target = Math.floor(left / width + 0.1) * width + n * width;
      max = this.scroll_width() - this.scrolling.innerWidth();
      target = Math.max(0, Math.min(target, max));
      if (max - target < 15) {
        target = max;
      }
      if (target < 15) {
        target = 0;
      }
      if (left === target) {
        return;
      }
      time = Math.floor(this.anim_speed * Math.abs((left - target) / width));
      return this.scrolling.animate({
        scrollLeft: target
      }, {
        duration: time,
        easing: "smoothstep"
      });
    };

    Carousel.prototype.cells_to_scroll = function() {
      var visible_cells;
      visible_cells = this.scrolling.width() / this.cell_width();
      if (visible_cells <= 1.5) {
        return 1;
      }
      return Math.ceil(visible_cells) - 1;
    };

    Carousel.prototype.cell_width = function() {
      return this.carousel.find(".object_cell:first").outerWidth(true);
    };

    Carousel.prototype.scroll_width = function() {
      var ref;
      return ((ref = this.scrolling[0]) != null ? ref.scrollWidth : void 0) || 0;
    };

    Carousel.prototype.reshape = function() {
      var inner, outer;
      inner = this.scroll_width();
      outer = this.scrolling.innerWidth();
      this.container.toggleClass("has_no_scrolling", inner - outer < 5);
      return typeof this.update_scrollbar === "function" ? this.update_scrollbar() : void 0;
    };

    Carousel.prototype.show_visible_images = function() {
      var j, len, max, ref, results, thumb;
      if (this.images_loaded) {
        return;
      }
      max = this.scrolling.innerWidth();
      ref = this.carousel.find("img[data-src]");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        thumb = ref[j];
        thumb = $(thumb);
        if (thumb.position().left < max) {
          results.push(this.show_image($(thumb)));
        } else {
          break;
        }
      }
      return results;
    };

    Carousel.prototype.show_all_images = function() {
      var j, len, ref, results, thumb;
      if (this.images_loaded) {
        return;
      }
      this.images_loaded = true;
      ref = this.carousel.find("img[data-src]");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        thumb = ref[j];
        results.push(this.show_image($(thumb)));
      }
      return results;
    };

    Carousel.prototype.setup_flags = function() {
      return Scribd.DocumentCell.add_flags(this.container);
    };

    Carousel.prototype.flush_images = function() {
      var flush;
      flush = (function(_this) {
        return function() {
          var ref;
          if (!((ref = _this._load_queue) != null ? ref.length : void 0)) {
            return;
          }
          $(_this._load_queue).velocity("transition.fadeIn");
          return _this._load_queue = [];
        };
      })(this);
      this.flush_images = _.debounce(flush, 10);
      return this.flush_images();
    };

    Carousel.prototype.show_image = function(img) {
      var ref, src, srcset;
      img = $(img);
      ref = img.data(), src = ref.src, srcset = ref.srcset;
      if (!src) {
        return;
      }
      img.on("load", (function(_this) {
        return function(e) {
          _this._load_queue || (_this._load_queue = []);
          _this._load_queue.push(img[0]);
          return _this.flush_images();
        };
      })(this));
      if (window.location.hash.match(/\bdebug_images\b/)) {
        img.style({
          backgroundImage: "red"
        });
        setTimeout(function() {
          img.style({
            backgroundImage: ""
          });
          img.attr("src", src);
          return img.attr("srcset", srcset);
        }, 500);
      } else {
        img.attr("src", src);
        img.attr("srcset", srcset);
      }
      img.removeData("src");
      return img.removeData("srcset");
    };

    Carousel.prototype.show_paddles = function(enable) {
      if (enable == null) {
        enable = true;
      }
      return this.container.toggleClass("ui_visible", !!enable);
    };

    Carousel.prototype.on_interact = function() {
      this.on_interact = function() {};
      this.show_all_images();
      return $(document.body).track({
        category: this.opts.page || "carousel",
        action: "click",
        label: "carousel:first_carousel_click"
      });
    };

    Carousel.prototype.check_items_inview = function() {
      var el, idx, in_view, j, left, len, outer, rec_id, ref, threshold, width;
      if (this.tracking == null) {
        return;
      }
      threshold = 50;
      outer = this.scrolling.innerWidth();
      ref = this.container.find(".document_cell .thumb");
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        el = ref[idx];
        el = $(el);
        if (el.is(".visibility_tracked")) {
          continue;
        }
        left = el.position().left;
        width = el.width();
        in_view = left + threshold >= 0 && left + width - threshold <= outer;
        if (!in_view) {
          continue;
        }
        rec_id = el.closest(".document_cell").data("track_uuid");
        Scribd.RecommendationTracking.track_obj_view(this.tracking.view_id, rec_id);
        el.addClass("visibility_tracked");
      }
      return null;
    };

    return Carousel;

  })();

  Scribd.UI.Carousel.carousels = [];

  Scribd.UI.SquareCarousel = (function(superClass) {
    extend(SquareCarousel, superClass);

    function SquareCarousel() {
      return SquareCarousel.__super__.constructor.apply(this, arguments);
    }

    return SquareCarousel;

  })(Scribd.UI.Carousel);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/smart_tabs.coffee (last modified: 2016-01-21 00:14:18 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SmartTabs = (function() {
    function SmartTabs(container, opts) {
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.container = $(this.container);
      this.setup_opts();
      this.setup_tabs();
      this.setup_events();
    }

    SmartTabs.prototype.setup_opts = function() {
      return this.opts = _.extend({
        bind_click: false
      }, this.opts);
    };

    SmartTabs.prototype.setup_tabs = function() {
      var more_tab, nav, parent_width, tabs, update_tabs;
      if (!this.container.find(".tab.hover_menu").length) {
        return;
      }
      nav = this.container;
      tabs = nav.find(".tab").not(":last");
      more_tab = nav.find(".tab:last");
      parent_width = $(window).width();
      update_tabs = (function(_this) {
        return function() {
          var $el, available_width, extra_tabs, i, j, k, len, len1, real_width, results, sub_menu, t, tab, tpl;
          available_width = Math.min($(window).width(), _this.opts.max_width) - 200;
          tabs.show();
          real_width = more_tab.outerWidth(true);
          for (i = 0, len = tabs.length; i < len; i++) {
            t = tabs[i];
            real_width += $(t).outerWidth(true);
          }
          extra_tabs = [];
          for (j = tabs.length - 1; j >= 0; j += -1) {
            t = tabs[j];
            if (real_width <= available_width) {
              break;
            }
            t = $(t);
            real_width -= t.outerWidth(true);
            t.hide();
            extra_tabs.push(t);
          }
          more_tab.toggle(!!extra_tabs.length);
          if (extra_tabs.length) {
            sub_menu = more_tab.find(".sub_menu");
            tpl = _.template(sub_menu.data("row_template"));
            sub_menu.empty();
            results = [];
            for (k = 0, len1 = extra_tabs.length; k < len1; k++) {
              tab = extra_tabs[k];
              $el = $(tpl({
                tab_name: tab.data("name"),
                label: tab.text()
              }));
              $el.data(tab.data());
              if (tab.hasClass("current")) {
                more_tab.addClass("current");
              }
              results.push(sub_menu.append($el));
            }
            return results;
          } else {
            return _this.container.find(".tab:visible:last").addClass("last");
          }
        };
      })(this);
      $(window).on("resize", _.debounce(update_tabs, 100));
      return update_tabs();
    };

    SmartTabs.prototype.set_current_tab = function(el) {
      var current_url, modified_url;
      el.addClass("current").siblings(".current").removeClass("current");
      if (this.opts.modify_url) {
        current_url = window.location.href;
        modified_url = Scribd.add_url_parameter(current_url, "tab", el.data("section"));
        return window.history.replaceState({}, "profile_tab", modified_url);
      }
    };

    SmartTabs.prototype.setup_events = function() {
      this.container.on("scribd:set_tab", (function(_this) {
        return function(e) {
          return _this.set_current_tab($(e.target));
        };
      })(this));
      if (!this.opts.bind_click) {
        return;
      }
      this.container.on("click", ".tab", (function(_this) {
        return function(e) {
          if ($(e.currentTarget).is(".current") || $(e.currentTarget).is(".unselectable")) {
            return;
          }
          return _this.set_current_tab($(e.currentTarget));
        };
      })(this));
      return this.container.trigger("scribd:tab:clicked", $(e.currentTarget));
    };

    return SmartTabs;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/star_ratings.coffee (last modified: 2016-02-05 22:21:55 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, ref, span;

  ref = React.DOM, span = ref.span, a = ref.a;

  component = Scribd.R.component_builder("Shared.React.StarRatings", {
    "css_class": "star_ratings"
  });

  component({
    lit: "icon-feature light_lit",
    unlit: "icon-feature_outline",
    half_lit_container: "half_lit",
    half_lit: "icon-feature_half light_lit",
    tip: ["I didn't like it at all", "I didn't like it that much", "I thought it was OK", "I liked it", "I loved it"],
    "static": {
      instances: [],
      bind_global_handlers: _.once(function() {
        return $(window).on("scribd:rating_update", function(event, component) {
          var i, instance, instances, len, results;
          instances = Scribd.R.Shared.React.StarRatings.instances;
          results = [];
          for (i = 0, len = instances.length; i < len; i++) {
            instance = instances[i];
            if (!instance.props.current_user) {
              continue;
            }
            if (instance === component) {
              continue;
            }
            if (component.props.doc_id !== instance.props.doc_id) {
              continue;
            }
            results.push(instance.setState({
              user_rating: component.state.user_rating
            }));
          }
          return results;
        });
      })
    },
    getInitialState: function() {
      return {
        user_rating: this.props.user_rating || 0,
        rating_required: false,
        selected_star: 0,
        show_clear_rating: this.props.show_clear_rating,
        inform_saved: false
      };
    },
    toggle_rated: function() {
      return this.container().toggleClass("rated", this.state.user_rating > 0);
    },
    componentDidMount: function() {
      Scribd.R.Shared.React.StarRatings.instances.push(this);
      this.container().toggleClass("static", !this.props.active || !this.props.current_user);
      if (this.props.current_user) {
        this.container().toggleClass("current_user");
      }
      this.toggle_rated();
      return Scribd.R.Shared.React.StarRatings.bind_global_handlers();
    },
    componentDidUpdate: function() {
      this.container().toggleClass("selecting", this.state.selected_star > 0);
      return this.toggle_rated();
    },
    render: function() {
      return [this.stars(), this.stats(), this.tips(), this.clear_rating(), this.rating_required()];
    },
    stars: function() {
      var rating_to_display, system_rating;
      system_rating = this.props.current_user_rating_only ? 0 : this.props.system_rating;
      rating_to_display = this.state.selected_star || this.state.user_rating || system_rating;
      return span({
        className: "stars",
        onMouseLeave: (function(_this) {
          return function() {
            if (!_this.props.active) {
              return;
            }
            return _this.setState({
              selected_star: 0
            });
          };
        })(this),
        children: _.map([1, 2, 3, 4, 5], (function(_this) {
          return function(value) {
            var cls;
            if (value <= rating_to_display) {
              cls = _this.lit;
            } else {
              if (value === rating_to_display + 0.5) {
                cls = _this.half_lit_container;
              } else {
                cls = _this.unlit;
              }
            }
            return span({
              className: "rating_star " + cls,
              "data-value": value,
              onMouseOver: function(event) {
                if (!_this.props.active) {
                  return;
                }
                return _this.setState({
                  selected_star: $(event.target).data("value")
                });
              },
              onClick: function(event) {
                if (!_this.props.active) {
                  return;
                }
                if (event.type === "right") {
                  return;
                }
                if (_this.state.user_rating === _this.state.selected_star) {
                  return;
                }
                return _this.rate_title($(event.target).data("value"));
              },
              children: cls === _this.half_lit_container ? [
                span({
                  className: _this.unlit,
                  "data-value": value
                }), span({
                  className: _this.half_lit,
                  "data-value": value
                })
              ] : void 0
            });
          };
        })(this))
      });
    },
    stats: function() {
      var count;
      if (!this.props.show_stats) {
        return;
      }
      count = this.props.rating_count;
      if (this.state.user_rating) {
        count++;
      }
      return span({
        className: "stats"
      }, "(" + count + " " + (count === 1 ? "rating" : "ratings") + ")");
    },
    inform_saved: function() {
      return span({
        className: "inform_saved"
      }, "Saved!");
    },
    tips: function() {
      if (!this.props.active) {
        return;
      }
      if (!this.props.show_tips) {
        return;
      }
      if (!(this.state.selected_star > 0)) {
        return;
      }
      if (this.state.inform_saved) {
        return this.inform_saved();
      }
      return span({
        className: "tips",
        children: span({
          className: "tip"
        }, this.tip[this.state.selected_star - 1])
      });
    },
    clear_rating: function() {
      if (!this.props.active) {
        return;
      }
      if (!this.state.show_clear_rating) {
        return;
      }
      if (this.state.selected_star > 0) {
        return;
      }
      if (!(this.state.user_rating > 0)) {
        return;
      }
      if (this.state.inform_saved) {
        return this.inform_saved();
      }
      return a({
        className: "clear_rating",
        onClick: (function(_this) {
          return function() {
            return _this.rate_title(0);
          };
        })(this)
      }, "Clear rating");
    },
    rating_required: function() {
      if (!this.props.active) {
        return;
      }
      if (!this.state.rating_required) {
        return;
      }
      if (this.state.selected_star > 0) {
        return;
      }
      if (this.state.user_rating > 0) {
        return;
      }
      return span({
        className: "rating_required_message"
      }, "Rating required");
    },
    rate_title: function(user_rating) {
      return Scribd.with_login("rate_document", (function(_this) {
        return function() {
          var previous_user_rating, xhr;
          previous_user_rating = _this.state.user_rating;
          _this.setState({
            user_rating: user_rating,
            inform_saved: true
          }, function() {
            return this.container().trigger("scribd:rating_update", [this, 0 === previous_user_rating]);
          });
          window.setTimeout(function() {
            return _this.setState({
              inform_saved: false
            });
          }, 1000);
          xhr = $.post(_this.props.ratings_path, {
            rated: user_rating
          });
          xhr.fail(function() {
            (new Scribd.Flasher).show("error", "Your rating was not saved. Please try again.");
            return _this.setState({
              user_rating: previous_user_rating
            }, function() {
              return this.container().trigger("scribd:rating_update", this);
            });
          });
          return xhr.always(function() {
            return _this.container().track_rats("ratings:rating:update", {
              word_document_id: _this.props.doc_id,
              rating: _this.state.user_rating
            });
          });
        };
      })(this));
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/review_form.coffee (last modified: 2016-07-08 22:43:33 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, ref, span, textarea;

  ref = React.DOM, textarea = ref.textarea, div = ref.div, a = ref.a, span = ref.span;

  component = Scribd.R.component_builder("Shared.React.ReviewForm", {
    "css_class": "review_form",
    "track_category": "review_form"
  });

  component({
    getInitialState: function() {
      return {
        saved_text: this.props.review_text || "",
        review_text: this.props.review_text || "",
        focused: false,
        posted: false,
        posting: false,
        post_attempt: false,
        review_id: this.props.review_id,
        delete_url: this.props.delete_url
      };
    },
    toggle_focused: function() {
      return this.container().toggleClass("focused", this.state.focused || !!this.state.review_id);
    },
    rating_update_handler: function() {
      return this.forceUpdate();
    },
    review_edit_handler: function() {
      return this.setState({
        posted: false
      }, this.scroll_into_view);
    },
    review_delete_handler: function(event, data, review_controls) {
      if (!review_controls.props.current_user) {
        return;
      }
      if (review_controls.props.doc_id !== this.props.doc_id) {
        return;
      }
      this.setState({
        saved_text: "",
        review_text: "",
        focused: false,
        posted: false,
        posting: false,
        post_attempt: false,
        review_id: null,
        delete_url: null
      });
      this.refs.review_star_rating.setState({
        user_rating: 0
      });
      this.container().trigger("scribd:rating_update", this.refs.review_star_rating);
      return this.scroll_into_view();
    },
    before_unload_text: function() {
      return "Wait, your review has not been posted yet. Are you sure you want to leave this page?";
    },
    dirty_state: function() {
      return this.state.review_text !== this.state.saved_text;
    },
    word_count: function(text) {
      var review_text;
      review_text = $.trim(text);
      if (review_text.length) {
        return review_text.split(" ").length;
      } else {
        return 0;
      }
    },
    before_unload_handler: function() {
      if (this.dirty_state()) {
        this.track_abandoned = true;
        return this.before_unload_text();
      }
    },
    unload_handler: function() {
      if (this.track_abandoned) {
        return this.track("abandoned", true);
      }
    },
    carousel_move_handler: function() {
      return this.setState({
        focused: false
      });
    },
    componentWillMount: function() {
      if (this.props.hide_until_edit && this.props.review_text) {
        return this.setState({
          posted: true
        });
      }
    },
    componentDidMount: function() {
      var bind_element, book_preview_container, ref1, ref2;
      this.toggle_focused();
      book_preview_container = this.container().closest(".book_preview_container");
      bind_element = book_preview_container.length ? book_preview_container : $(window);
      bind_element.on("scribd:rating_update", this.rating_update_handler);
      bind_element.on("scribd:review_edit", this.review_edit_handler);
      bind_element.on("scribd:review_deleted", this.review_delete_handler);
      bind_element.on("scribd:ratings_carousel_move", this.carousel_move_handler);
      if (Scribd.rails_env === "test") {
        this.container().on("unload", (function(_this) {
          return function() {
            return _this.before_unload_handler();
          };
        })(this));
      }
      if (this.container().closest("#lightboxes").length) {
        if ((ref1 = Scribd.BookPreview) != null) {
          ref1.review_form_refs[1] = this;
        }
      } else {
        $(window).on("beforeunload", this.before_unload_handler);
        $(window).on("unload", this.unload_handler);
        if ((ref2 = Scribd.BookPreview) != null) {
          ref2.review_form_refs[0] = this;
        }
      }
      this.forceUpdate();
      return this.refs.review_star_rating.setState({
        show_clear_rating: !this.state.review_id
      });
    },
    componentDidUpdate: function() {
      this.toggle_focused();
      this.container().toggleClass("hidden", this.state.posted);
      if (this.state.focused) {
        return typeof Scribd.init_spinners === "function" ? Scribd.init_spinners() : void 0;
      }
    },
    render: function() {
      return [this.star_label(), this.rating_stars(), this.textarea_label(), this.textarea_tip(), this.textarea(), this.buttons()];
    },
    star_label: function() {
      if (!this.props.show_star_label) {
        return;
      }
      return div({
        className: "star_label"
      }, "What did you think?");
    },
    rating_stars: function() {
      return Scribd.R.Shared.React.StarRatings(this.extend_props(this.props.rating_star_props));
    },
    textarea_label: function() {
      return div({
        className: "textarea_label",
        children: [
          "Write a review? ", span({
            className: "optional"
          }, "(optional)")
        ]
      });
    },
    textarea_tip: function() {
      if (!(this.state.focused || this.state.review_id)) {
        return;
      }
      return div({
        className: "textarea_tip"
      }, "Tip: The most helpful reviews are at least 25 words long");
    },
    textarea: function() {
      var placeholder_text;
      placeholder_text = (function() {
        var ref1;
        switch ((ref1 = this.refs.review_star_rating) != null ? ref1.state.user_rating : void 0) {
          case 0:
            return "Tell us what you liked about this book!";
          case 1:
            return "What didn't you like about the book?";
          case 2:
            return "What would have made this book better?";
          case 3:
            return "What did or didn't you like about this book?";
          case 4:
            return "What was your favorite part of the book?";
          case 5:
            return "What made this book so great?";
        }
      }).call(this);
      return textarea({
        name: "text",
        className: "review_body",
        onFocus: (function(_this) {
          return function() {
            return Scribd.with_login("review_document", function() {
              return _this.setState({
                focused: true
              });
            });
          };
        })(this),
        onChange: (function(_this) {
          return function(event) {
            return _this.setState({
              review_text: $(event.target).val()
            });
          };
        })(this),
        placeholder: placeholder_text,
        value: this.state.review_text
      });
    },
    buttons: function() {
      var info, valid, warn, word_count, word_label;
      if (!(this.state.focused || this.state.review_id)) {
        return;
      }
      word_count = this.word_count(this.state.review_text);
      valid = true;
      warn = false;
      if (word_count < 10) {
        word_label = word_count === 9 ? "word" : "words";
        info = (10 - word_count) + " " + word_label + " left to post a review";
        valid = false;
        if (this.state.post_attempt) {
          warn = true;
        }
      } else if (this.state.review_text.length >= 10000) {
        info = "Oops! Maximum review length is 10,000 characters";
        valid = false;
        warn = true;
      } else if ((this.refs.review_star_rating != null) && !this.refs.review_star_rating.state.user_rating) {
        info = "Looks great! Don’t forget to rate it, too";
        valid = false;
        if (this.state.post_attempt) {
          warn = true;
        }
      } else {
        info = "Looks great! Feel free to keep going";
      }
      return div({
        className: "buttons",
        children: [
          span({
            className: warn ? "warn" : void 0
          }, info), this.common_button({
            className: "outline_btn cancel_btn",
            onClick: (function(_this) {
              return function() {
                if (_this.edit_review_lb_context()) {
                  return _this.container().trigger("scribd:review_cancel:edit_review_lb");
                } else {
                  _this.setState({
                    review_text: _this.state.saved_text,
                    posted: !!_this.state.saved_text.length,
                    focused: false
                  });
                  return _this.container().trigger("scribd:review_cancel");
                }
              };
            })(this)
          }, "Cancel"), this.common_button({
            disabled: !valid || this.state.review_text === this.state.saved_text,
            className: classNames("post_review", {
              loading: this.state.posting
            }),
            children: [
              div({
                className: "scribd_spinner",
                "data-size": 30
              }), "" + (this.state.review_id ? "Update" : "Post review")
            ],
            onClick: (function(_this) {
              return function() {
                var xhr;
                if (valid && _this.state.review_text !== _this.state.saved_text) {
                  _this.setState({
                    posting: true
                  });
                  xhr = $.post(_this.props.post_url, {
                    text: _this.state.review_text
                  }, function(response) {
                    if (_this.state.review_id) {
                      _this.track("updated");
                    } else {
                      _this.track("added");
                    }
                    _this.setState({
                      posted: true,
                      delete_url: response.review_delete_url,
                      review_id: response.review_id,
                      saved_text: _this.state.review_text
                    });
                    if (_this.edit_review_lb_context()) {
                      return _this.container().trigger("scribd:review_added:edit_review_lb", response);
                    } else {
                      _this.container().trigger("scribd:review_added", response);
                      return _this.refs.review_star_rating.setState({
                        show_clear_rating: false
                      });
                    }
                  });
                  xhr.fail(function() {
                    return (new Scribd.Flasher).show("error", "Your review was not saved. Please try again.");
                  });
                  return xhr.always(function() {
                    return _this.setState({
                      posting: false
                    });
                  });
                } else {
                  return _this.setState({
                    post_attempt: true
                  }, function() {
                    if (!_this.refs.review_star_rating.state.user_rating) {
                      return _this.refs.review_star_rating.setState({
                        rating_required: true
                      }, _this.scroll_into_view);
                    }
                  });
                }
              };
            })(this)
          })
        ]
      });
    },
    scroll_into_view: function() {
      var end_of_reading_container, lightbox, offset_element, top;
      lightbox = this.container().closest("#lightboxes");
      end_of_reading_container = this.container().closest(".end_of_reading_container");
      offset_element = lightbox.length ? lightbox : $(document.body);
      top = this.container().position().top;
      if (end_of_reading_container.length) {
        top = this.container().closest(".body").offset().top - 100;
      }
      if (offset_element.scrollTop() > top) {
        return offset_element.animate({
          scrollTop: top
        });
      }
    },
    track: function(action) {
      return this.container().track_rats("ratings:review:" + action, {
        word_document_id: this.props.doc_id,
        review_id: this.state.review_id,
        review_word_count: this.word_count(this.state.review_text)
      });
    },
    edit_review_lb_context: function() {
      return this.container().closest("#edit_review_lb").length;
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/library_button.coffee (last modified: 2016-07-12 00:02:31 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, button, component, div, li, ref, span, ul;

  ref = React.DOM, button = ref.button, span = ref.span, a = ref.a, div = ref.div, li = ref.li, ul = ref.ul;

  component = Scribd.R.component_builder("Shared.React.LibraryButton", {
    "css_class": "library_button"
  });

  component({
    actions_list_timeout: null,
    "static": {
      instances: [],
      preview_players: {},
      bind_global_handlers: _.once(function() {
        $(window).on("click", (function(_this) {
          return function(event) {
            var i, instance, len, ref1, results;
            try {
              ref1 = _this.instances;
              results = [];
              for (i = 0, len = ref1.length; i < len; i++) {
                instance = ref1[i];
                if (!$(event.target).closest(instance.container()).length) {
                  results.push(instance.setState({
                    show_actions: false
                  }));
                } else {
                  results.push(void 0);
                }
              }
              return results;
            } catch (undefined) {}
          };
        })(this));
        $(window).on("scribd:collection_lightbox:add_documents scribd:collection_lightbox:remove_documents", (function(_this) {
          return function() {
            try {
              return _this.instances[_this.instances.length - 1].update_in_collection();
            } catch (undefined) {}
          };
        })(this));
        $(window).on("scribd:library_button_update", (function(_this) {
          return function(event, component, state) {
            var i, instance, len, ref1, results;
            ref1 = _this.instances;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              instance = ref1[i];
              if (instance === component) {
                continue;
              }
              if (component.props.document_id !== instance.props.document_id) {
                continue;
              }
              results.push(instance.setState(state));
            }
            return results;
          };
        })(this));
        return $(window).on("scribd:library_button:go_to_selects", (function(_this) {
          return function() {
            var instance;
            instance = _this.instances[_this.instances.length - 1];
            try {
              return instance.container().track_rats("caps:go_to_scribd_selects:click", {
                doc_id: instance.state.document_id
              });
            } catch (undefined) {}
          };
        })(this));
      })
    },
    get_event_container_by_id: function(id) {
      if (id) {
        return $("#" + id);
      } else {
        return $(document.body);
      }
    },
    getInitialState: function() {
      return _.extend({
        params: {},
        loading: false,
        preview_playing: false,
        show_actions: false
      }, this.props);
    },
    componentDidMount: function() {
      var event_container;
      Scribd.R.Shared.React.LibraryButton.instances.push(this);
      Scribd.R.Shared.React.LibraryButton.bind_global_handlers();
      Scribd.init_spinners(this.container());
      event_container = this.props.event_container_id ? $("#" + this.props.event_container_id) : $(document.body);
      if (!this.props.in_player) {
        event_container.on("scribd:credit_redeemed", this.credit_redeemed);
      }
      if (this.state.params.from_payment_update) {
        Scribd.CreditLightbox.load(this.props.credit_lightbox_url, event_container, this.props.params);
      }
      if (this.state.actions_select) {
        return this.container().addClass("has_actions_select");
      }
    },
    componentDidUpdate: function() {
      this.container().toggleClass("hover", this.state.show_actions);
      Scribd.R.Shared.React.LibraryButton.current_instance = this;
      return this.container().find("button").toggleClass("loading", this.state.loading).prop("disabled", this.state.loading);
    },
    credit_redeemed: function() {
      this.container().track_rats("caps:title_confirm:click", {
        doc_id: this.props.document_id
      });
      this.setState({
        credit_restricted: false
      });
      return this.add_to_library();
    },
    update_in_collection: function() {
      this.setState({
        loading: true
      });
      return $.post(this.state.check_in_collection_url, (function(_this) {
        return function(response) {
          var state;
          state = {
            loading: false,
            in_collection: response.in_collection
          };
          if (response.in_collection) {
            state.in_library = true;
          }
          _this.setState(state);
          _this.container().trigger("scribd:library_button:update_in_collection", {
            document_id: _this.state.document_id,
            in_collection: response.in_collection
          });
          return _this.container().trigger("scribd:library_button_update", [_this, state]);
        };
      })(this));
    },
    get_orientation: function() {
      var state;
      state = this.state.orientation;
      if (this.props.orientation === "auto") {
        if (this.container()[0].getBoundingClientRect().top < 260) {
          state = "bottom";
        } else {
          state = "top";
        }
      }
      return state;
    },
    render: function() {
      return [this.main_button(), this.actions_select(), this.actions_list()];
    },
    play_sample_action_opts: function() {
      var opts;
      opts = {
        children: []
      };
      if (this.state.preview_playing) {
        opts.children.push(span({
          className: "icon-pause_button"
        }));
        opts.children.push("Playing...");
        opts.onClick = (function(_this) {
          return function() {
            if (_this.state.loading) {
              return;
            }
            Scribd.R.Shared.React.LibraryButton.preview_players[_this.state.document_id].pause();
            _this.setState({
              preview_playing: false
            });
            return _this.container().trigger("scribd:library_button_update", [
              _this, {
                preview_playing: false
              }
            ]);
          };
        })(this);
      } else {
        opts.children.push(span({
          className: "icon-play_button"
        }));
        opts.children.push("Play sample");
        if (Scribd.R.Shared.React.LibraryButton.preview_players[this.state.document_id]) {
          opts.onClick = (function(_this) {
            return function() {
              if (_this.state.loading) {
                return;
              }
              Scribd.R.Shared.React.LibraryButton.preview_players[_this.state.document_id].play();
              _this.container().track_rats("bookpage:play_sample:click", {
                doc_id: _this.state.document_id
              });
              _this.setState({
                preview_playing: true
              });
              return _this.container().trigger("scribd:library_button_update", [
                _this, {
                  preview_playing: true
                }
              ]);
            };
          })(this);
        } else {
          opts.onClick = (function(_this) {
            return function() {
              if (_this.state.loading) {
                return;
              }
              return Scribd.Findaway.with_findaway(function() {
                Scribd.R.Shared.React.LibraryButton.preview_players[_this.state.document_id] = soundManager.createSound({
                  url: _this.state.audiobook_sample_url,
                  autoPlay: true,
                  multiShot: false,
                  onload: function(success) {
                    if (!success) {
                      throw "Failed to load sample: " + audiobook_sample_url;
                    }
                    _this.container().track_rats("bookpage:play_sample:click", {
                      doc_id: _this.state.document_id
                    });
                    _this.setState({
                      preview_playing: true,
                      loading: false
                    });
                    return _this.container().trigger("scribd:library_button_update", [
                      _this, {
                        preview_playing: true
                      }
                    ]);
                  }
                });
                return _this.setState({
                  loading: true
                });
              });
            };
          })(this);
        }
      }
      return opts;
    },
    library_remove_action_opts: function() {
      return {
        onClick: this.remove_from_library,
        children: ["Remove from library"]
      };
    },
    library_add_action_opts: function() {
      return {
        onClick: this.add_to_library,
        children: ["Add to library"]
      };
    },
    library_action_opts: function() {
      if (this.state.in_library) {
        return {
          onClick: this.remove_from_library,
          children: ["In your library"]
        };
      } else {
        return this.library_add_action_opts();
      }
    },
    read_preview_action_opts: function() {
      return {
        children: ["Read preview"],
        href: this.state.start_reading_url,
        onClick: (function(_this) {
          return function() {
            if (_this.state.loading) {
              return;
            }
            return _this.container().track_rats("bookpage:read_preview:click", {
              doc_id: _this.state.document_id
            });
          };
        })(this)
      };
    },
    get_full_title_action_opts: function() {
      return {
        children: ["Get full title"],
        onClick: (function(_this) {
          return function() {
            if (_this.state.loading) {
              return;
            }
            return Scribd.with_login(function() {
              _this.container().track_rats("caps:get_full_title:click", {
                doc_id: _this.state.document_id
              });
              if (!_this.state.subscriber && _this.state.free_trial_url) {
                return document.location = _this.state.free_trial_url;
              } else {
                _this.container().trigger("scribd:credit_btn_clicked");
                return Scribd.CreditLightbox.load(_this.state.credit_lightbox_url, _this.get_event_container_by_id(_this.state.event_container_id));
              }
            });
          };
        })(this)
      };
    },
    main_button: function() {
      var classes, opts;
      classes = classNames("main_button", "inherit_tracking", {
        has_actions_select: this.state.actions_select,
        loading: this.state.loading
      });
      opts = {
        className: this.button_classes(classes),
        children: [button(this.library_action_opts())]
      };
      if (!this.state.hovercard) {
        if (this.state.is_series_canonical) {
          opts.children = [button(this.library_action_opts())];
        } else if (this.state.force_get_full_title) {
          if (this.state.paused && !this.state.actions_select) {
            return;
          }
          opts.children = [button(this.get_full_title_action_opts())];
        } else {
          if (this.state.subscriber) {
            if (this.state.credit_restricted && this.state.in_library && this.state.show_get_full_title && !this.state.paused) {
              opts.children = [button(this.get_full_title_action_opts())];
            }
          } else {
            if (this.state.document_type === "audiobook" && this.state.audiobook_sample_url) {
              opts.children = [button(this.play_sample_action_opts())];
            } else if (this.state.start_reading_url && this.state.show_preview) {
              opts.children = [a(this.read_preview_action_opts())];
            }
          }
        }
      }
      opts.children.push(div({
        className: "scribd_spinner",
        "data-size": 30
      }));
      return div(opts);
    },
    actions_list: function() {
      if (!(this.state.show_actions && this.state.actions_select)) {
        return;
      }
      return div({
        className: "autogen_class_views_shared_popover actions_list_wrapper " + this.state.orientation,
        onMouseEnter: (function(_this) {
          return function() {
            return window.clearTimeout(_this.actions_list_timeout);
          };
        })(this),
        onMouseLeave: (function(_this) {
          return function() {
            return _this.actions_list_timeout = window.setTimeout(function() {
              return _this.setState({
                show_actions: false
              });
            }, 500);
          };
        })(this),
        onClick: (function(_this) {
          return function(event) {
            if (_this.state.loading) {
              return;
            }
            event.preventDefault();
            return _this.setState({
              show_actions: false
            });
          };
        })(this),
        children: [
          div({
            className: "popover_content",
            children: [this.arrow(), this.list_items()]
          })
        ]
      });
    },
    actions_select: function() {
      var classes;
      if (!this.state.actions_select) {
        return;
      }
      classes = classNames("actions_select", {
        hover: this.state.show_actions,
        loading: this.state.loading
      });
      return button({
        className: this.button_classes(classes),
        children: [
          span({
            className: "icon-down_arrow"
          }), span({
            className: "visually_hidden",
            children: "Other library actions"
          })
        ],
        onClick: (function(_this) {
          return function() {
            if (_this.state.loading) {
              return;
            }
            _this.container().track_rats("library_btn:menu_button:click", {
              doc_id: _this.state.document_id,
              action: _this.state.show_actions ? "hide" : "show"
            });
            return _this.setState({
              show_actions: !_this.state.show_actions,
              orientation: _this.get_orientation()
            });
          };
        })(this)
      });
    },
    arrow: function() {
      return div({
        className: "popover_arrow"
      });
    },
    list_items: function() {
      var opts;
      opts = {
        className: "actions_list",
        children: [li({}, button(this.collection_action_opts()))]
      };
      if (this.state.hovercard && this.state.in_library) {
        opts.children.unshift(li({}, button(this.library_remove_action_opts())));
      }
      if (!this.state.is_series_canonical) {
        opts.children.unshift(li({}, button(this.finished_action_opts())));
      }
      if (!this.state.hovercard) {
        if (this.state.subscriber) {
          if (this.state.credit_restricted) {
            if (this.state.in_library) {
              opts.children.push(li({}, button(this.library_remove_action_opts())));
            } else if (this.state.show_get_full_title && !this.state.paused) {
              opts.children.unshift(li({}, button(this.get_full_title_action_opts())));
            }
          } else if (this.state.in_library) {
            opts.children.push(li({}, button(this.library_remove_action_opts())));
          }
        } else {
          if (this.state.credit_restricted && this.state.show_get_full_title && !this.state.paused) {
            opts.children.unshift(li({}, button(this.get_full_title_action_opts())));
          }
          if (this.state.in_library) {
            opts.children.push(li({}, button(this.library_remove_action_opts())));
          } else {
            if (this.state.start_reading_url && this.state.show_preview && !this.state.is_series_canonical) {
              opts.children.unshift(li({}, button(this.library_add_action_opts())));
            }
          }
        }
      }
      return ul(opts);
    },
    finished_action_opts: function() {
      var bookmark_state, event_name, is_finished, opts;
      opts = {
        className: "finished_btn inherit_tracking"
      };
      if (this.state.is_finished) {
        opts.children = "Unmark as finished";
        bookmark_state = "saved";
        is_finished = false;
        event_name = "library_btn:unmark_as_finished:click";
      } else {
        opts.children = "Mark as finished";
        bookmark_state = "finished_reading";
        is_finished = true;
        event_name = "library_btn:mark_as_finished:click";
      }
      opts.onClick = (function(_this) {
        return function() {
          if (_this.state.loading) {
            return;
          }
          _this.container().track_rats(event_name, {
            doc_id: _this.state.document_id
          });
          return Scribd.with_login("add_to_library", function() {
            _this.setState({
              loading: true
            });
            return Scribd.Bookmarks.update_bookmarks_states({
              document_ids: [_this.state.document_id],
              state: bookmark_state
            }, {
              success: function() {
                var state;
                state = {
                  is_finished: is_finished,
                  in_library: true
                };
                _this.setState(state);
                return _this.container().trigger("scribd:library_button_update", [_this, state]);
              },
              complete: function() {
                return _this.setState({
                  loading: false
                });
              }
            });
          });
        };
      })(this);
      return opts;
    },
    collection_action_opts: function() {
      var opts;
      opts = {
        className: "collections_btn inherit_tracking",
        onClick: (function(_this) {
          return function() {
            var rat_tracking_label, track_page_name;
            if (_this.state.loading) {
              return;
            }
            _this.container().track_rats("library_btn:add_to_collection_button:click", {
              doc_id: _this.state.document_id
            }, rat_tracking_label = "library_btn");
            track_page_name = Scribd.tracker.location_data(_this.container()).shift();
            return Scribd.with_login("add_to_collection", function() {
              return Scribd.AddToCollectionLightbox.remote_open(_this.state.document_id, rat_tracking_label, track_page_name);
            });
          };
        })(this)
      };
      if (this.state.in_collection) {
        opts.children = ["Edit collections"];
      } else {
        opts.children = ["Add to collection"];
      }
      return opts;
    },
    button_classes: function(classes) {
      return "flat_btn " + classes + " " + this.state.extra_button_classes;
    },
    add_to_library: function() {
      if (this.state.loading) {
        return;
      }
      this.container().track_rats("library_btn:add_to_library:click", {
        doc_id: this.state.document_id
      });
      return Scribd.with_login("add_to_library", (function(_this) {
        return function() {
          _this.setState({
            loading: true
          });
          return Scribd.Bookmarks.add_bookmark(_this.state.document_id, {
            success: function() {
              var state;
              state = {
                in_library: true
              };
              _this.setState(state);
              _this.container().trigger("scribd:update_my_library_state", ["add"]);
              _this.container().trigger("scribd:library_button_update", [_this, state]);
              if (_this.state.in_player || _this.state.page === "read") {
                return Scribd.Bookmarks.update_bookmarks_states({
                  document_ids: [_this.state.document_id],
                  state: "currently_reading"
                });
              }
            },
            complete: function() {
              return _this.setState({
                loading: false
              });
            }
          });
        };
      })(this));
    },
    remove_from_library: function() {
      var lb, update;
      if (this.state.loading) {
        return;
      }
      this.setState({
        loading: true
      });
      this.container().track_rats("library_btn:remove_from_library:click", {
        doc_id: this.state.document_id
      });
      update = (function(_this) {
        return function() {
          return Scribd.Bookmarks.remove_bookmark(_this.state.document_id, {
            success: function() {
              var state;
              state = {
                in_library: false,
                in_collection: false,
                is_finished: false
              };
              _this.setState(state, function() {
                _this.container().trigger("scribd:update_my_library_state", ["remove"]);
                return _this.container().trigger("scribd:library_button_update", [_this, state]);
              });
              return _this.update_in_collection();
            },
            complete: function() {
              return _this.setState({
                loading: false
              });
            }
          });
        };
      })(this);
      if (this.state.in_collection) {
        lb = Scribd.Lightbox.open("confirm_lightbox", Scribd.ConfirmLightbox);
        lb.set_template("remove_from_library", {
          title: "Remove book from your Library?"
        });
        lb.set_confirm_callback(update);
        return lb.set_choose_callback((function(_this) {
          return function() {
            return _this.setState({
              loading: false
            });
          };
        })(this));
      } else {
        return update();
      }
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/sharing_buttons.coffee (last modified: 2016-05-03 20:22:21 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.SharingButtons = (function() {
    var open;

    open = function(url, width, height) {
      var w;
      if (width == null) {
        width = 500;
      }
      if (height == null) {
        height = 450;
      }
      w = window.open(url, "", "width=" + width + ",height=" + height + ",resizable=1,scrollbars=1");
      return typeof w.focus === "function" ? w.focus() : void 0;
    };

    function SharingButtons(container, opts) {
      this.opts = opts;
      this.share_pinterest = bind(this.share_pinterest, this);
      this.share_twitter = bind(this.share_twitter, this);
      this.share_facebook = bind(this.share_facebook, this);
      this.share_googleplus = bind(this.share_googleplus, this);
      this.share_linkedin = bind(this.share_linkedin, this);
      this.share_embed = bind(this.share_embed, this);
      this.container = $(container);
      this.container.dispatch("click", {
        share_facebook_btn: this.share_facebook,
        share_twitter_btn: this.share_twitter,
        share_pinterest_btn: this.share_pinterest,
        share_linkedin_btn: this.share_linkedin,
        share_embed_btn: this.share_embed
      });
      this.container.on("click", ".email a, .share_email_btn", (function(_this) {
        return function(e) {
          _this.container.trigger("scribd:share:email");
        };
      })(this));
    }

    SharingButtons.prototype.share_embed = function() {
      var base;
      this.container.trigger("scribd:share:embed");
      Scribd.Lightbox.remote_open("embed_dialog", "/read/embed_dialog?id=" + this.opts.id);
      return typeof (base = this.opts).click_fn === "function" ? base.click_fn() : void 0;
    };

    SharingButtons.prototype.share_linkedin = function() {
      var base;
      this.container.trigger("scribd:share:linkedin");
      open("http://www.linkedin.com/shareArticle?" + $.param({
        title: this.opts.title,
        url: this.opts.url,
        source: "Scribd",
        summary: this.opts.description && Scribd.truncate(this.opts.description)
      }));
      return typeof (base = this.opts).click_fn === "function" ? base.click_fn() : void 0;
    };

    SharingButtons.prototype.share_googleplus = function() {
      var base;
      this.container.trigger("scribd:share:googleplus");
      open("https://plus.google.com/share?" + $.param({
        url: this.opts.url
      }));
      return typeof (base = this.opts).click_fn === "function" ? base.click_fn() : void 0;
    };

    SharingButtons.prototype.share_facebook = function() {
      var base;
      this.container.trigger("scribd:share:facebook");
      FB.ui({
        method: "feed",
        name: this.opts.title,
        link: this.opts.url,
        picture: this.opts.thumbnail_url,
        caption: this.opts.description && Scribd.truncate(this.opts.description),
        display: "popup"
      }, function(response) {
        if (self.name !== "scribdAudioPlayer") {
          return self.close();
        }
      });
      return typeof (base = this.opts).click_fn === "function" ? base.click_fn() : void 0;
    };

    SharingButtons.prototype.share_twitter = function(btn) {
      var base, text;
      this.container.trigger("scribd:share:twitter");
      text = btn.data("text") || this.opts.twitter_message;
      open("https://twitter.com/share?" + $.param({
        text: text,
        url: this.opts.url,
        original_referer: this.opts.url
      }));
      return typeof (base = this.opts).click_fn === "function" ? base.click_fn() : void 0;
    };

    SharingButtons.prototype.share_pinterest = function() {
      var base, desc;
      this.container.trigger("scribd:share:pinterest");
      desc = this.opts.message || (this.opts.title + " on Scribd");
      open("http://www.pinterest.com/pin/create/button/?" + $.param({
        url: this.opts.url,
        media: this.opts.thumbnail_url,
        description: desc
      }));
      return typeof (base = this.opts).click_fn === "function" ? base.click_fn() : void 0;
    };

    return SharingButtons;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/review_controls.coffee (last modified: 2016-01-21 00:17:55 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, label, ref, span;

  ref = React.DOM, div = ref.div, a = ref.a, span = ref.span, label = ref.label;

  component = Scribd.R.component_builder("Shared.React.ReviewControls", {
    "css_class": "review_controls",
    "track_category": "review_controls"
  });

  component({
    getInitialState: function() {
      return {
        vote: this.props.vote || 0,
        upvote_count: this.props.upvote_count || 0
      };
    },
    render: function() {
      return [
        this.stars(), this.upvote_count(), div({
          className: "bottom",
          children: [
            this.helpful_undo(), this.vote_link(), div({
              children: [this.edit_review(), this.separator(), this.delete_review(), this.permalink()]
            })
          ]
        })
      ];
    },
    stars: function() {
      return Scribd.R.Shared.React.StarRatings(this.extend_props(this.props.rating_star_props));
    },
    upvote_count: function() {
      var person_label;
      if (!(this.state.upvote_count > 0)) {
        return;
      }
      person_label = this.state.upvote_count === 1 ? "person" : "people";
      return div({
        className: "upvote_count",
        children: [this.state.upvote_count + " " + person_label + " found this helpful"]
      });
    },
    helpful_undo: function() {
      var helpful_label;
      if (!this.state.vote) {
        return;
      }
      helpful_label = (function() {
        switch (this.state.vote) {
          case 1:
            return "helpful";
          case -1:
            return "unhelpful";
        }
      }).call(this);
      return div({
        children: [
          "You found this " + helpful_label + ".", a({
            className: "undo_vote_link",
            onClick: (function(_this) {
              return function() {
                return _this.vote(0);
              };
            })(this)
          }, "Undo")
        ]
      });
    },
    vote_link: function() {
      if (this.props.current_user || this.state.vote !== 0) {
        return;
      }
      return div({
        className: "vote",
        children: [
          "Is this review helpful?", a({
            className: "vote_link",
            onClick: (function(_this) {
              return function() {
                return _this.vote(1);
              };
            })(this)
          }, "Yes"), a({
            className: "vote_link",
            onClick: (function(_this) {
              return function() {
                return _this.vote(-1);
              };
            })(this)
          }, "No")
        ]
      });
    },
    edit_review: function() {
      if (!this.props.current_user) {
        return;
      }
      return a({
        className: "edit_review",
        "data-edit_lightbox_url": this.props.edit_lightbox_url,
        onClick: (function(_this) {
          return function() {
            return _this.container().trigger("scribd:review_edit");
          };
        })(this)
      }, "Edit review");
    },
    delete_review: function() {
      if (!(this.props.current_user || this.props.admin)) {
        return;
      }
      return a({
        className: "delete_review",
        onClick: this.delete_lightbox
      }, "Delete review " + (this.props.admin && !this.props.current_user ? "(admin)" : ""));
    },
    separator: function() {
      if (!this.props.current_user) {
        return;
      }
      return span({
        className: "separator"
      }, " • ");
    },
    permalink: function() {
      if (this.props.permalink_page) {
        return;
      }
      return div({
        children: [
          a({
            className: "permalink",
            href: this.props.review_url
          }, "Permalink")
        ]
      });
    },
    delete_lightbox: function() {
      var content_line_one;
      if (this.state.upvote_count > 0) {
        label = this.state.upvote_count === 1 ? "person" : "people";
        content_line_one = this.state.upvote_count + " " + label + " found this review helpful. ";
      } else {
        content_line_one = "";
      }
      return Scribd.Lightbox.open("confirm_lightbox", Scribd.ConfirmLightbox).set_confirm_callback(this.delete_handler).set_template("delete_review", {
        title: "Delete this Review and Rating?",
        content_line_one: content_line_one,
        content_line_two: "Are you sure you want to delete this review and rating?"
      });
    },
    delete_handler: function() {
      return $.ajax({
        url: this.props.delete_url,
        method: "delete",
        success: (function(_this) {
          return function(response) {
            _this.container().track_rats("ratings:review:deleted", {
              word_document_id: _this.props.doc_id,
              review_id: _this.props.review_id
            });
            return _this.container().trigger("scribd:review_deleted", [response, _this]);
          };
        })(this),
        error: function() {
          return (new Scribd.Flasher).show("error", "Review was not deleted. Please try again.");
        }
      });
    },
    vote: function(vote) {
      return Scribd.with_login("review_vote", (function(_this) {
        return function() {
          var previous_upvote_count, previous_vote, upvote_count, url, xhr;
          previous_vote = _this.state.vote;
          previous_upvote_count = _this.state.upvote_count;
          url = (function() {
            switch (vote) {
              case 0:
                return this.props.neutral_url;
              case 1:
                return this.props.upvote_url;
              case -1:
                return this.props.downvote_url;
            }
          }).call(_this);
          upvote_count = vote === 0 ? previous_upvote_count + -previous_vote : previous_upvote_count + vote;
          _this.setState({
            vote: vote,
            upvote_count: upvote_count
          });
          return xhr = $.ajax(url, {
            method: "put",
            data: {
              user_vote: vote
            },
            error: function() {
              (new Scribd.Flasher).show("error", "Your vote was not saved. Please try again.");
              return _this.setState({
                vote: previous_vote,
                upvote_count: previous_upvote_count
              });
            }
          });
        };
      })(this));
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/review_list.coffee (last modified: 2016-02-05 22:21:55 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.ReviewList = (function() {
    function ReviewList(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      this.container.dispatch("click", {
        review_author: (function(_this) {
          return function(target) {
            var data_element;
            data_element = target.closest(".book_review_wrapper");
            _this.container.track_rats("ratings:reviewer_profile:click", {
              word_user_id: data_element.data("word_user_id"),
              word_document_id: data_element.data("word_document_id"),
              review_id: data_element.data("review_id")
            });
            return "continue";
          };
        })(this)
      });
      if (this.opts.truncate) {
        Scribd.ReviewList.truncate(this.container);
        this.container.dispatch("click", {
          read_more: function(link) {
            link.closest(".review_body").addClass("expanded");
            return "continue";
          }
        });
      }
      if (this.opts.edit_lightbox) {
        this.container.dispatch("click", {
          edit_review: (function(_this) {
            return function(link) {
              return Scribd.Lightbox.remote_open({
                id: "edit_review_lb",
                url: link.data("edit_lightbox_url"),
                method: "GET"
              });
            };
          })(this)
        });
        $(window).on("scribd:review_added:edit_review_lb", (function(_this) {
          return function(event, data) {
            _this.get_review(data.review_id).find(".review_body").html(data.review_text);
            return Scribd.Lightbox.close();
          };
        })(this));
        $(window).on("scribd:review_cancel:edit_review_lb", (function(_this) {
          return function() {
            return Scribd.Lightbox.close();
          };
        })(this));
      }
      $(window).on("scribd:review_deleted", function(event) {
        return $(event.target).closest(".book_review_wrapper").remove();
      });
    }

    ReviewList.prototype.get_review = function(id) {
      return this.container.find("[data-review_id=" + id + "]");
    };

    ReviewList.truncate = function(container) {
      var review_bodies;
      review_bodies = container.find(".review_body:not(.expanded):visible");
      return review_bodies.dotdotdot({
        after: "a.read_more",
        callback: function(truncated) {
          var review_body;
          review_body = $(this).closest(".review_body");
          if (!truncated) {
            return review_body.addClass("not_truncated");
          }
        }
      });
    };

    return ReviewList;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/app_download_promo/module.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, form, h1, input, p, ref, span, types;

  ref = React.DOM, input = ref.input, a = ref.a, span = ref.span, div = ref.div, h1 = ref.h1, p = ref.p, form = ref.form;

  component = Scribd.R.component_builder("Shared.AppDownloadPromo.Module", {
    "css_class": "autogen_class_views_shared_app_download_promo_module"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      android_app_link: types.string.isRequired,
      app_download_link: types.string.isRequired,
      close_promo_url: types.string.isRequired,
      doc_id: types.number,
      email_address: types.string,
      extra_classes: types.string,
      ios_app_link: types.string.isRequired,
      lightbox: types.bool.isRequired,
      lightbox_id: types.string,
      promo_id: types.number,
      track_page: types.string,
      twilio_enabled: types.bool.isRequired
    },
    errors: {
      generic: "An error occurred please try again",
      input: "Please enter a valid phone number or email",
      email: "Please enter a valid email",
      phone: "Please enter a valid phone number",
      twilio: "An error occurred please try an email"
    },
    error: function(type) {
      if (this.props.twilio_enabled) {
        return this.errors[type];
      } else {
        if (type === "input" || type === "email" || type === "phone") {
          return this.errors.email;
        } else if (type === "twilio") {
          return this.errors.generic;
        }
      }
    },
    re: {
      valid: {
        email: /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i,
        phone: /^\+?\d{10,15}$/
      },
      type: {
        email: /@/,
        phone: /^\+?[\d\-_\(\).]*\d[\d\-_\(\).]*$/
      },
      spaces: /\s/g,
      non_digits: /[^\d+]/g
    },
    widget_css_classes: function(classes) {
      return classes + " " + (this.props.extra_classes || "");
    },
    getInitialState: function() {
      return {
        dismissed: false,
        input_value: "",
        loading: false
      };
    },
    componentDidMount: function() {
      if (!this.props.lightbox) {
        return this.container().one("inview", this.track_view);
      }
    },
    componentDidUpdate: function(prev_props, prev_state) {
      return this.container().toggleClass("dismissed", this.state.dismissed);
    },
    track_view: function(event, in_view) {
      if (in_view) {
        this.track("view");
        return this.container().off("inview");
      }
    },
    track: function(action, extra_data, type) {
      var data, doc, page;
      if (extra_data == null) {
        extra_data = {};
      }
      if (type == null) {
        type = null;
      }
      doc = this.props.doc_id ? {
        doc_id: this.props.doc_id
      } : {};
      page = this.props.lightbox ? {
        page: this.props.track_page
      } : {};
      data = _.extend(extra_data, page, doc);
      if (!type) {
        type = this.props.lightbox ? "lightbox" : "banner";
      }
      return this.container().track_rats("download_app_promo:" + type + ":" + action, data);
    },
    client_error: function(message) {
      this.flash(message, "error");
      return this.track("click", {
        item: "send link",
        input_valid: false,
        input_text: this.state.input_value
      });
    },
    response: function(message, data) {
      var action, type;
      type = data.success ? "success" : "error";
      action = (function() {
        switch (data.type) {
          case "phone":
            return "text_sent";
          case "email":
            return "email_sent";
          default:
            return "server_error";
        }
      })();
      this.flash(message, type);
      return this.track(action, {
        success: data.success,
        input_text: this.state.input_value
      }, "response");
    },
    success: function(message) {
      return this.flash(message, "success");
    },
    flash: function(message, type) {
      var flasher;
      flasher = this.props.lightbox ? new Scribd.Flasher($("#" + this.props.lightbox_id), {
        duration: 5000
      }) : new Scribd.Flasher(null, {
        duration: 5000
      });
      return flasher.show(type, message);
    },
    submit: function() {
      var value;
      if (this.state.loading) {
        return;
      }
      value = this.state.input_value.replace(this.re.spaces, "");
      if (this.props.twilio_enabled && value.match(this.re.type.phone)) {
        value = value.replace(this.re.non_digits, "");
        if (value.match(this.re.valid.phone)) {
          return this.send(value);
        } else {
          return this.client_error(this.error("phone"));
        }
      } else if (value.match(this.re.type.email)) {
        if (value.match(this.re.valid.email)) {
          return this.send(value);
        } else {
          return this.client_error(this.error("email"));
        }
      } else {
        return this.client_error(this.error("input"));
      }
    },
    send: function(value) {
      var xhr;
      this.track("click", {
        item: "send link",
        input_valid: true,
        input_text: this.state.input_value
      });
      this.setState({
        loading: true
      });
      xhr = $.post(this.props.app_download_link, {
        phone_or_email: value
      });
      xhr.done((function(_this) {
        return function(data) {
          if (data.success) {
            _this.response("Link sent! Please check your mobile device", data);
          } else {
            _this.response(_this.errors[data.error] || _this.errors["generic"], data);
          }
          return _this.setState({
            loading: false
          });
        };
      })(this));
      return xhr.fail((function(_this) {
        return function() {
          _this.response(_this.errors["generic"], {
            success: false,
            type: "server"
          });
          return _this.setState({
            loading: false
          });
        };
      })(this));
    },
    typing_email_address: function() {
      if (!this.props.email_address) {
        return false;
      }
      return this.state.input_value.length && this.props.email_address.indexOf(this.state.input_value) === 0;
    },
    placeholder: function() {
      return "Enter your" + (this.props.twilio_enabled ? " phone number or" : "") + " email";
    },
    render: function() {
      if (this.state.dismissed) {
        return [];
      }
      return [
        span({
          className: "icon-close",
          onClick: (function(_this) {
            return function() {
              _this.setState({
                dismissed: true
              });
              if (_this.props.promo_id) {
                $.post(_this.props.close_promo_url, {
                  id: _this.props.promo_id
                });
              }
              return _this.track("click", {
                item: "close banner"
              });
            };
          })(this)
        }), div({
          className: "content",
          children: [
            div({
              className: "content_inner",
              children: [
                div({
                  className: "header",
                  children: [
                    h1({}, "Read anytime, everywhere you go"), p({
                      children: [
                        span({}, "Scribd is available on the "), a({
                          href: this.props.ios_app_link,
                          target: "_blank",
                          onClick: (function(_this) {
                            return function() {
                              return _this.track("click", {
                                item: "app store"
                              });
                            };
                          })(this)
                        }, "App Store"), span({}, " and "), a({
                          href: this.props.android_app_link,
                          target: "_blank",
                          onClick: (function(_this) {
                            return function() {
                              return _this.track("click", {
                                item: "google play store"
                              });
                            };
                          })(this)
                        }, "Google Play Store")
                      ]
                    })
                  ]
                }), div({
                  className: "form",
                  children: [
                    div({
                      className: classNames({
                        input_container: true,
                        suggesting: this.typing_email_address()
                      }),
                      children: [
                        this.typing_email_address() ? input({
                          className: "email_suggestion",
                          placeholder: this.props.email_address,
                          type: "text",
                          value: ""
                        }) : void 0, input({
                          type: "text",
                          placeholder: this.placeholder(),
                          className: "email_phone_input",
                          value: this.state.input_value,
                          onKeyDown: (function(_this) {
                            return function(event) {
                              var ref1;
                              if (_this.typing_email_address()) {
                                if (event.key === "Tab") {
                                  event.preventDefault();
                                }
                                if ((ref1 = event.key) === "Tab" || ref1 === "Enter" || ref1 === "ArrowRight") {
                                  return _this.setState({
                                    input_value: _this.props.email_address
                                  });
                                }
                              }
                            };
                          })(this),
                          onKeyUp: (function(_this) {
                            return function(event) {
                              if (event.key === "Enter") {
                                return _this.submit();
                              }
                            };
                          })(this),
                          onChange: (function(_this) {
                            return function(event) {
                              return _this.setState({
                                input_value: event.currentTarget.value
                              });
                            };
                          })(this)
                        })
                      ]
                    }), this.common_button({
                      children: "Send link",
                      className: classNames({
                        send_link_btn: true,
                        loading: this.state.loading
                      }),
                      disabled: this.state.loading,
                      onClick: (function(_this) {
                        return function(event) {
                          return _this.submit();
                        };
                      })(this)
                    })
                  ]
                })
              ]
            }), div({
              className: "devices"
            })
          ]
        })
      ];
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/book_preview/recommenders.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.BookPreviewRecommenders = (function() {
    function BookPreviewRecommenders(container, opts) {
      this.opts = opts;
      this.container = $(container);
      this.track_recommenders();
    }

    BookPreviewRecommenders.prototype.track_recommenders = function() {
      var id;
      id = this.opts.compilation_id;
      return Scribd.RecommendationTracking.page_view_deferred(id).done((function(_this) {
        return function(view_id) {
          var i, len, module, modules, results;
          _this.tracking = {
            compilation_id: _this.opts.compilation_id,
            view_id: view_id
          };
          modules = _this.container.find(".has_document_cells[data-track_uuid]");
          results = [];
          for (i = 0, len = modules.length; i < len; i++) {
            module = modules[i];
            results.push($(module).trigger("scribd:setup_tracking", [_this.tracking.view_id]));
          }
          return results;
        };
      })(this));
    };

    return BookPreviewRecommenders;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/book_preview/review.coffee (last modified: 2016-01-21 00:14:18 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Review = (function() {
    function Review(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      this.container.dispatch("click", {
        book_title: function(target) {
          return Scribd.BookPreview.open_lightbox(target.attr("href"));
        }
      });
      $(window).on("scribd:review_deleted", (function(_this) {
        return function() {
          return window.location = _this.opts.book_preview_url;
        };
      })(this));
      this.container.track_rats("ratings:review_permalink:view", {
        word_document_id: this.opts.word_document_id,
        word_user_id: this.opts.word_user_id,
        review_id: this.opts.review_id
      });
      Scribd.RecommendationTracking.page_view_deferred(this.opts.compilation_id).done((function(_this) {
        return function(view_id) {
          _this.tracking = {
            compilation_id: _this.opts.compilation_id,
            view_id: view_id
          };
          return _this.container.find(".document_carousel").trigger("scribd:setup_tracking", [_this.tracking.view_id]);
        };
      })(this));
    }

    return Review;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/book_preview/show.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Promise,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Promise = Scribd.Promise;

  Scribd.BookPreview = (function() {
    BookPreview.loading = false;

    BookPreview.opened = false;

    BookPreview.review_form_refs = [];

    BookPreview.should_show_book_preview = function(source_link) {
      return source_link.closest(".skip_book_preview").length === 0;
    };

    BookPreview.show_book_preview = function(source_link) {
      var url;
      if (!this.should_show_book_preview(source_link)) {
        return false;
      }
      _.defer((function(_this) {
        return function() {
          return $(document.body).trigger("scribd:hide_hovercards");
        };
      })(this));
      url = source_link.attr("href");
      url || (url = "/book/" + (source_link.closest("[data-object_id]").data("object_id")));
      this.open_lightbox(url);
      return true;
    };

    BookPreview.open_lightbox = function(url, push_state) {
      var container;
      if (push_state == null) {
        push_state = true;
      }
      if (!this.opened) {
        Scribd.BrowserHistory.begin();
        this.opened = true;
      }
      if (Scribd.BookPreview.loading) {
        return;
      }
      Scribd.BookPreview.loading = true;
      if (Scribd.Lightbox.current_open != null) {
        container = Scribd.Lightbox.current_open.container;
        container.trigger("scribd:set_loading");
      } else {
        container = $(".book_preview_container").first();
        $(document.body).addClass("slow_lightbox_overlay");
        Scribd.Lightbox.fade_in_overlay(0.95, "#ddd");
      }
      return $.ajax({
        url: url + "/content?lightbox",
        type: "GET",
        dataType: "html",
        headers: {
          'Cache-Control': "public,max-age=" + 604800. + ",stale-while-revalidate=" + 86400. + ",stale-if-error=" + 86400.,
          'Last-Modified': new Date().toUTCString()
        },
        error: function() {
          return window.location = url;
        },
        success: function(lightbox_html) {
          var state;
          container = $(lightbox_html);
          container.addClass("lightbox");
          Scribd.BookPreview.loading = false;
          Scribd.Lightbox.BookPreview.open_from_object(container.attr("id"), container);
          (new Scribd.Asyncable(container)).load_widgets();
          if (push_state) {
            state = container.data("push_state");
            state.container = container.attr("id");
            state.lightbox = container.is(".lightbox");
            return Scribd.BrowserHistory.push(url, state);
          }
        }
      });
    };

    BookPreview.bind_links = function(referrer) {
      var body;
      this.referrer = referrer;
      body = $(document.body);
      body.on("click", ".book_link", (function(_this) {
        return function(e) {
          if (_this.show_book_preview($(e.currentTarget))) {
            e.preventDefault();
            return $(document.body).track({
              category: "book_preview",
              action: "referrer",
              label: _this.referrer
            });
          }
        };
      })(this));
      return body.on("scribd:should_skip_link_delay", ".book_link", (function(_this) {
        return function(e, fn) {
          if (_this.should_show_book_preview($(e.currentTarget))) {
            return fn();
          }
        };
      })(this));
    };

    BookPreview.init = function() {
      return $(window).on("popstate.book", (function(_this) {
        return function(e) {
          var container, current, ref, state;
          state = (ref = e.originalEvent.state) != null ? ref : {};
          current = Scribd.Lightbox.current_open;
          if (state.lightbox) {
            container = state.container;
            if (document.getElementById(container) != null) {
              Scribd.Lightbox.BookPreview.open(container);
              return Scribd.BookPreview.loading = false;
            } else {
              return _this.open_lightbox(state.url, false);
            }
          } else if (current != null ? current.container.is("[class*=book_preview]") : void 0) {
            Scribd.Lightbox.close();
            return Scribd.BookPreview.loading = false;
          }
        };
      })(this));
    };

    function BookPreview(container, opts1) {
      this.opts = opts1;
      this.launch_audio_player = bind(this.launch_audio_player, this);
      this.container = $(container);
      this.main = this.container.find("> .main").first();
      this.sidebar = this.container.find("> .sidebar").first();
      this.overview = this.main.find(".overview").first();
      this.summary = this.main.find(".summary").first();
      this.summary_tab = this.main.find(".summary_tab").first();
      this.reviews_tab = this.main.find(".reviews_tab").first();
      this.current_review_selector = ".book_review_wrapper.current_user_review";
      this.load_more_reviews_page = 1;
      this.setup_events();
      this.setup_sharing();
      this.setup_lightbox();
      this.setup_links();
      this.setup_history();
      this.setup_default_page();
      this.setup_cover();
      if (this.opts.pingback_url) {
        Scribd.send_pingback(this.opts.pingback_url);
      }
      if (this.opts.params.credit_redeemed) {
        Scribd.CreditLightbox.load(this.opts.credit_lightbox_url, this.container, this.opts.params);
      }
    }

    BookPreview.prototype.setup_cover = function() {
      var start_btn;
      start_btn = this.container.find(".start_reading_btn");
      if (start_btn.attr("href")) {
        return this.container.find(".start_reading_cover").addClass("clickable");
      }
    };

    BookPreview.prototype.setup_events = function() {
      var mouseenter, mouseleave;
      new Scribd.BookPreview.Actions(this.container, this.opts.document);
      this.container.on("scribd:credit_redeemed", (function(_this) {
        return function() {
          var cta_text;
          cta_text = _this.container.is(".audiobook") ? "Start listening" : "Start reading";
          _this.container.find(".preview_btn").text(cta_text);
          _this.container.find(".header .flag").remove();
          if (_this.container.is(".audiobook")) {
            return _this.launch_audio_player(_this.opts.audiobook_player_url);
          }
        };
      })(this));
      mouseenter = function() {
        var $el, color;
        $el = $(this);
        color = $el.data("color") || $el.css("color");
        $el.data("color", color);
        $el.css("background-color", color);
        return $el.css("color", "#ffffff");
      };
      mouseleave = function() {
        var $el, color;
        $el = $(this);
        color = $el.data("color");
        $el.css("background-color", "#ffffff");
        return $el.css("color", color);
      };
      this.container.find(".categories .category_btn").hover(mouseenter, mouseleave);
      this.container.on("scribd:review_added", (function(_this) {
        return function(e, res) {
          var $all_reviews_list, $all_reviews_review, $review_list;
          $review_list = _this.reviews.find(".review_list");
          $all_reviews_list = _this.all_reviews.find(".review_list");
          $all_reviews_review = $all_reviews_list.find(_this.current_review_selector);
          _this.first_to_review.hide();
          _this.post_message.show();
          if ($all_reviews_list.length) {
            if ($all_reviews_review.length) {
              $all_reviews_review.remove();
            }
            $(res.preview_1).find(".book_review_wrapper, script").prependTo($all_reviews_list);
          }
          if ($review_list.length) {
            return $(res.preview_2).find(".book_review_wrapper, script").prependTo($review_list);
          } else {
            return $(res.preview_2).appendTo(_this.reviews);
          }
        };
      })(this));
      this.container.on("scribd:review_deleted", (function(_this) {
        return function(e, data) {
          var history;
          history = !!$(e.target).closest(".all_reviews").length;
          _this.container.find("[data-review_id=" + data.review_id + "]").remove();
          _this.reviews.find(".review_list:empty").remove();
          _this.show_first_to_review();
          _this.post_message.hide();
          return _this.goto_page("reviews", history);
        };
      })(this));
      this.container.on("scribd:review_cancel", (function(_this) {
        return function(e) {
          _this.container.find(_this.current_review_selector).show();
          _this.show_first_to_review();
          return _this.post_message.hide();
        };
      })(this));
      this.container.on("scribd:review_edit", (function(_this) {
        return function(e) {
          var history;
          history = !!$(e.target).closest(".all_reviews").length;
          _this.container.find(_this.current_review_selector).hide();
          _this.show_first_to_review();
          _this.post_message.hide();
          return _this.goto_page("reviews", history);
        };
      })(this));
      this.async_reviews_promise = new Promise;
      $(document).on("scribd:asyncable:response", (function(_this) {
        return function(e, val) {
          var btn, cta;
          if (val["bookpreview_reviews"] || val["bookpreview_all_reviews"]) {
            _this.all_reviews = _this.main.find(".all_reviews").first();
            _this.reviews = _this.main.find(".reviews").first();
            _this.first_to_review = _this.reviews.find(".first_to_review").first();
            _this.post_message = _this.reviews.find(".post_message").first();
            _this.show_first_to_review();
            _this.setup_default_page();
            _this.async_reviews_promise.resolve();
          }
          if (val["bookpreview_seriesrecommender"]) {
            cta = _this.container.find(".cta");
            if (btn = cta.data("see_titles_in_series_template")) {
              return cta.html(btn);
            }
          }
        };
      })(this));
      this.async_reviews_promise.done((function(_this) {
        return function() {
          return _this.show_first_to_review();
        };
      })(this));
      $(window).resize(_.debounce((function(_this) {
        return function() {
          return _this.container.find(".document_carousel").trigger("scribd:reshape_carousel");
        };
      })(this)));
      return this.container.dispatch("click", {
        tab: (function(_this) {
          return function(tab, e) {
            e.preventDefault();
            if (tab.is(".current")) {
              return;
            }
            return _this.goto_page(tab.attr("href"));
          };
        })(this),
        all_reviews_back_btn: (function(_this) {
          return function() {
            if (document.referrer.match(/scribd/i)) {
              return Scribd.BrowserHistory.pop();
            } else {
              return _this.goto_page("reviews");
            }
          };
        })(this),
        read_all_reviews_btn: (function(_this) {
          return function() {
            _this.goto_page("all-reviews");
            return _this.scroll_to(0);
          };
        })(this),
        load_more_reviews_btn: (function(_this) {
          return function(btn) {
            btn.addClass("loading").prop("disabled", true);
            return _this.load_more_reviews(function(count) {
              btn.removeClass("loading").prop("disabled", false);
              return btn.toggle(count >= _this.opts.reviews_per_page);
            });
          };
        })(this),
        start_trial_btn: (function(_this) {
          return function(btn) {
            if (btn.hasClass("free_with_trial_btn")) {
              btn.track_rats("subscribe:start_free_trial:click", {
                doc_id: _this.opts.document.id
              });
            } else if (btn.hasClass("renew_membership_btn")) {
              btn.track_rats("subscribe:renew_membership:click", {
                doc_id: _this.opts.document.id
              });
            } else if (btn.hasClass("resume_membership_btn")) {
              btn.track_rats("subscribe:resume_membership:click", {
                doc_id: _this.opts.document.id
              });
            }
            if (Scribd.logged_in) {
              return "continue";
            }
            return Scribd.SignIn.open("join_today", btn.attr("href"));
          };
        })(this),
        request_title_btn: (function(_this) {
          return function() {
            return Scribd.with_login("request_title_btn", function() {
              return $.post("/book-preview/" + _this.opts.document.id + "/create-request", function() {
                var btns;
                btns = _this.container.find(".request_title_btn");
                return btns.prop("disabled", true).text("Title requested");
              });
            });
          };
        })(this),
        see_similar_btn: (function(_this) {
          return function() {
            return _this.scroll_to(_this.element_offset(".recommenders.box"));
          };
        })(this),
        read_more: function(btn, e) {
          e.preventDefault();
          btn.parents(".book_review").removeClass("truncated_review");
          return btn.parents(".review_body").trigger("destroy.dot");
        },
        start_reading_cover: (function(_this) {
          return function(btn) {
            var start_btn;
            start_btn = _this.container.find(".start_reading_btn");
            if (!start_btn.length) {
              return;
            }
            if (_this.container.is(".audiobook")) {
              return _this.launch_audio_player(_this.opts.audiobook_player_url);
            } else {
              return window.location = start_btn.attr("href");
            }
          };
        })(this),
        start_reading_btn: (function(_this) {
          return function(btn) {
            if (btn.hasClass("start_for_free_btn")) {
              btn.track_rats("bookpage:start_for_free:click", {
                doc_id: _this.opts.document.id
              });
            } else if (btn.hasClass("continue_preview_btn")) {
              btn.track_rats("bookpage:continue_preview:click", {
                doc_id: _this.opts.document.id
              });
            } else if (btn.hasClass("start_listening_btn")) {
              btn.track_rats("bookpage:start_listening:click", {
                doc_id: _this.opts.document.id
              });
            } else if (btn.hasClass("continue_listening_btn")) {
              btn.track_rats("bookpage:continue_listening:click", {
                doc_id: _this.opts.document.id
              });
            } else if (btn.hasClass("start_reading_btn")) {
              btn.track_rats("bookpage:start_reading:click", {
                doc_id: _this.opts.document.id
              });
            } else if (btn.hasClass("continue_reading_btn")) {
              btn.track_rats("bookpage:continue_reading:click", {
                doc_id: _this.opts.document.id
              });
            }
            if (_this.container.is(".audiobook")) {
              return _this.launch_audio_player(_this.opts.audiobook_player_url);
            } else {
              return "continue";
            }
          };
        })(this),
        see_titles_in_series_btn: (function(_this) {
          return function(btn) {
            if (!_this.container.find(".series.block").length) {
              return;
            }
            _this.goto_page("");
            return _this.scroll_to(_this.element_offset(".series.block"));
          };
        })(this),
        expand_toc_btn: function(btn) {
          btn.parents(".table_of_contents").removeClass("truncated");
          return btn.remove();
        },
        book_link: function() {
          return "continue";
        },
        close: (function(_this) {
          return function() {
            if (_this.prevent_navigation()) {
              return;
            }
            return Scribd.BrowserHistory.restore();
          };
        })(this)
      });
    };

    BookPreview.prototype.show_first_to_review = function() {
      var ref;
      if (this.reviews.find(".review_list").length === 0 && ((ref = this.reviews.find(".review_body").val()) != null ? ref.length : void 0) === 0) {
        return this.first_to_review.show();
      }
    };

    BookPreview.prototype.setup_sharing = function() {
      var opts, sharing_buttons;
      sharing_buttons = this.container.find(".sharing_buttons");
      opts = sharing_buttons.data("sharing_opts");
      return new Scribd.SharingButtons(sharing_buttons, opts);
    };

    BookPreview.prototype.setup_lightbox = function() {
      this.container.on("scribd:set_loading", (function(_this) {
        return function(e) {
          _this.container.addClass("loading");
          return _.defer(function() {
            return _this.container.addClass("fade_in_loader");
          });
        };
      })(this));
      if (!this.container.is(".lightbox")) {
        return;
      }
      this.container.click((function(_this) {
        return function(e) {
          if ($(e.target).is(".lightbox")) {
            if (_this.prevent_navigation()) {
              return;
            }
            Scribd.Lightbox.close();
            return Scribd.BrowserHistory.restore();
          }
        };
      })(this));
      this.container.on("Scribd:lightbox:closed", (function(_this) {
        return function(e) {
          var ref;
          return (ref = Scribd.R.Shared.React.LibraryButton.preview_players[_this.opts.document.id]) != null ? ref.pause() : void 0;
        };
      })(this));
      $(window).off("scroll.book").on("scroll.book", _.throttle(function() {
        var ref, ref1;
        return (ref = Scribd.hovercards.current_cell) != null ? (ref1 = ref.data("hovercard")) != null ? ref1.position() : void 0 : void 0;
      }));
      return this.scroll_to(0);
    };

    BookPreview.prototype.setup_links = function() {
      var document;
      document = this.opts.document;
      return this.container.find(".sidebar h3 a, .carousel_title a").each(function() {
        var href;
        href = $(this).attr("href");
        if (href.indexOf("book/" + document.id) >= 0) {
          return $(this).contents().unwrap();
        } else if (href.indexOf("book/") >= 0) {
          return $(this).addClass("book_link");
        }
      });
    };

    BookPreview.prototype.setup_history = function() {
      return $(window).on("popstate.book", (function(_this) {
        return function(e) {
          var ref, state;
          state = e.originalEvent.state;
          if (!state && (Scribd.Lightbox.current_open == null) && !_this.container.is(".lightbox")) {
            return _this.goto_page(_this.opts.default_page, false);
          } else if ((state != null ? (ref = state.document) != null ? ref.id : void 0 : void 0) === _this.opts.document.id) {
            return _this.goto_page(state.page, false);
          }
        };
      })(this));
    };

    BookPreview.prototype.setup_default_page = function() {
      if ((this.opts.default_page == null) || this.opts.default_page === "show") {
        this.opts.default_page = "";
      }
      this.opts.default_page = this.opts.default_page.replace("_", "-");
      return this.goto_page(this.opts.default_page, false);
    };

    BookPreview.prototype.load_more_reviews = function(callback) {
      var url;
      if (this.load_more_reviews.loading) {
        return;
      }
      this.load_more_reviews.loading = true;
      this.load_more_reviews_page++;
      url = (this.opts.reviews_url.join("")) + "?" + ($.param({
        page: this.load_more_reviews_page
      }));
      return $.getJSON(url, (function(_this) {
        return function(data) {
          _this.all_reviews.children().last().before(data.reviews);
          _this.load_more_reviews.loading = false;
          return typeof callback === "function" ? callback(data.num_results) : void 0;
        };
      })(this));
    };

    BookPreview.prototype.launch_audio_player = function(href) {
      var ref;
      if ((ref = Scribd.R.Shared.React.LibraryButton.preview_players[this.opts.document.id]) != null) {
        ref.pause();
      }
      return Scribd.with_login("launch_audio_player", function() {
        return Scribd.Audiobooks.open_popup(href);
      });
    };

    BookPreview.prototype.scroll_to = function(offset) {
      if (this.container.is(".lightbox")) {
        return $("#lightboxes").animate({
          scrollTop: offset
        });
      } else {
        return $("html, body").animate({
          scrollTop: offset
        });
      }
    };

    BookPreview.prototype.element_offset = function(selector) {
      if (this.container.is(".lightbox")) {
        return this.container.find(selector).position().top;
      } else {
        return this.container.find(selector).offset().top - $("#global_header").outerHeight();
      }
    };

    BookPreview.prototype.prevent_navigation = function() {
      var review_form;
      review_form = Scribd.BookPreview.review_form_refs[Scribd.BookPreview.review_form_refs.length - 1];
      if (review_form != null ? review_form.dirty_state() : void 0) {
        if (confirm(review_form.before_unload_text())) {
          Scribd.BookPreview.review_form_refs.pop();
          if (!review_form.state.review_id) {
            review_form.track("abandoned");
          }
          return false;
        } else {
          return true;
        }
      }
    };

    BookPreview.prototype.goto_page = function(pagename, push_state) {
      var parts, prefix, state;
      if (push_state == null) {
        push_state = true;
      }
      if (this.prevent_navigation()) {
        return;
      }
      prefix = location.pathname.split('/').slice(0, 4).join('/');
      parts = [prefix];
      if (pagename) {
        parts.push(pagename);
      }
      if (push_state) {
        state = {
          document: this.opts.document,
          page: pagename,
          container: this.container.attr("id"),
          lightbox: this.container.is(".lightbox")
        };
        Scribd.BrowserHistory.push(parts.join('/'), state);
      }
      return this.async_reviews_promise.done((function(_this) {
        return function() {
          switch (pagename) {
            case "all-reviews":
              _this.all_reviews.show();
              _this.overview.hide();
              return new Scribd.ReviewList.truncate(_this.all_reviews);
            case "reviews":
              _this.overview.show();
              _this.reviews.show();
              _this.all_reviews.hide();
              _this.summary.hide();
              _this.summary_tab.removeClass("current");
              _this.reviews_tab.addClass("current");
              _this.active_tab = _this.reviews;
              _this.other_tab = _this.summary;
              return new Scribd.ReviewList.truncate(_this.reviews);
            default:
              _this.overview.show();
              _this.summary.show();
              _this.all_reviews.hide();
              _this.reviews.hide();
              _this.summary_tab.addClass("current");
              _this.reviews_tab.removeClass("current");
              _this.active_tab = _this.summary;
              return _this.other_tab = _this.reviews;
          }
        };
      })(this));
    };

    return BookPreview;

  })();

  Scribd.BookPreview.Actions = (function(superClass) {
    extend(Actions, superClass);

    function Actions(container, doc) {
      this.doc = doc;
      Actions.__super__.constructor.call(this, container);
    }

    Actions.prototype.find_object = function() {
      return this.doc;
    };

    Actions.prototype.save_bookmark_btn = function() {
      var args, btn;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      btn = args[0];
      if (!btn.hasClass("saved")) {
        $rat("add_to_library", {
          event_name: "click",
          category: "book_page",
          doc_id: this.doc.id
        });
        $rat.root().flushEvents();
      }
      return Scribd.with_login("save_for_later", (function(_this) {
        return function() {
          return Actions.__super__.save_bookmark_btn.apply(_this, args);
        };
      })(this));
    };

    return Actions;

  })(Scribd.DocumentActions);

  Scribd.Lightbox.BookPreview = (function(superClass) {
    extend(BookPreview, superClass);

    function BookPreview() {
      this.transition = bind(this.transition, this);
      BookPreview.__super__.constructor.apply(this, arguments);
      _.defer(function() {
        return $(".book_preview_container").first().removeClass("loading fade_in_loader");
      });
    }

    BookPreview.prototype.show = function() {
      this.container.removeClass("loading fade_in_loader");
      return BookPreview.__super__.show.apply(this, arguments);
    };

    BookPreview.prototype.show_responsive = function() {
      return true;
    };

    BookPreview.prototype.set_position = function() {};

    BookPreview.prototype.transition = function(old, done) {
      this.container.appendTo(this.container.parent());
      return this.container.hide().fadeIn(function() {
        if (old != null) {
          old.hide();
        }
        return typeof done === "function" ? done() : void 0;
      });
    };

    return BookPreview;

  })(Scribd.Lightbox);

  Scribd.BookPreview.init();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

