/************************************************************************
 * 'payments.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-18 17:23:52 +0000
 * Generated at: 2016-07-18 19:36:33 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - public/javascripts/jquery_global/jquery.payment.coffee (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlashAndSpace, hasTextSelected, luhnCheck, reFormatCVC, reFormatCardNumber, reFormatExpiry, reFormatNumeric, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, setCardType,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $.payment = {};

  $.payment.fn = {};

  $.fn.payment = function() {
    var args, method;
    method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return $.payment.fn[method].apply(this, args);
  };

  defaultFormat = /(\d{1,4})/g;

  $.payment.cards = cards = [
    {
      type: 'visaelectron',
      pattern: /^4(026|17500|405|508|844|91[37])/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'maestro',
      pattern: /^(5(018|0[23]|[68])|6(39|7))/,
      format: defaultFormat,
      length: [12, 13, 14, 15, 16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'forbrugsforeningen',
      pattern: /^600/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'dankort',
      pattern: /^5019/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'visa',
      pattern: /^4/,
      format: defaultFormat,
      length: [13, 16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'mastercard',
      pattern: /^5[0-5]/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'amex',
      pattern: /^3[47]/,
      format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
      length: [15],
      cvcLength: [3, 4],
      luhn: true
    }, {
      type: 'dinersclub',
      pattern: /^3[0689]/,
      format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
      length: [14],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'discover',
      pattern: /^6([045]|22)/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'unionpay',
      pattern: /^(62|88)/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: false
    }, {
      type: 'jcb',
      pattern: /^35/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }
  ];

  cardFromNumber = function(num) {
    var card, i, len;
    num = (num + '').replace(/\D/g, '');
    for (i = 0, len = cards.length; i < len; i++) {
      card = cards[i];
      if (card.pattern.test(num)) {
        return card;
      }
    }
  };

  cardFromType = function(type) {
    var card, i, len;
    for (i = 0, len = cards.length; i < len; i++) {
      card = cards[i];
      if (card.type === type) {
        return card;
      }
    }
  };

  luhnCheck = function(num) {
    var digit, digits, i, len, odd, sum;
    odd = true;
    sum = 0;
    digits = (num + '').split('').reverse();
    for (i = 0, len = digits.length; i < len; i++) {
      digit = digits[i];
      digit = parseInt(digit, 10);
      if ((odd = !odd)) {
        digit *= 2;
      }
      if (digit > 9) {
        digit -= 9;
      }
      sum += digit;
    }
    return sum % 10 === 0;
  };

  hasTextSelected = function($target) {
    var ref;
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== $target.prop('selectionEnd')) {
      return true;
    }
    if ((typeof document !== "undefined" && document !== null ? (ref = document.selection) != null ? ref.createRange : void 0 : void 0) != null) {
      if (document.selection.createRange().text) {
        return true;
      }
    }
    return false;
  };

  reFormatNumeric = function(e) {
    return setTimeout(function() {
      var $target, value;
      $target = $(e.currentTarget);
      value = $target.val();
      value = value.replace(/\D/g, '');
      return $target.val(value);
    });
  };

  reFormatCardNumber = function(e) {
    return setTimeout(function() {
      var $target, value;
      $target = $(e.currentTarget);
      value = $target.val();
      value = $.payment.formatCardNumber(value);
      return $target.val(value);
    });
  };

  formatCardNumber = function(e) {
    var $target, card, digit, length, re, upperLength, value;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    card = cardFromNumber(value + digit);
    length = (value.replace(/\D/g, '') + digit).length;
    upperLength = 16;
    if (card) {
      upperLength = card.length[card.length.length - 1];
    }
    if (length >= upperLength) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (card && card.type === 'amex') {
      re = /^(\d{4}|\d{4}\s\d{6})$/;
    } else {
      re = /(?:^|\s)(\d{4})$/;
    }
    if (re.test(value)) {
      e.preventDefault();
      return setTimeout(function() {
        return $target.val(value + ' ' + digit);
      });
    } else if (re.test(value + digit)) {
      e.preventDefault();
      return setTimeout(function() {
        return $target.val(value + digit + ' ');
      });
    }
  };

  formatBackCardNumber = function(e) {
    var $target, value;
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\d\s$/.test(value)) {
      e.preventDefault();
      return setTimeout(function() {
        return $target.val(value.replace(/\d\s$/, ''));
      });
    } else if (/\s\d?$/.test(value)) {
      e.preventDefault();
      return setTimeout(function() {
        return $target.val(value.replace(/\d$/, ''));
      });
    }
  };

  reFormatExpiry = function(e) {
    return setTimeout(function() {
      var $target, value;
      $target = $(e.currentTarget);
      value = $target.val();
      value = $.payment.formatExpiry(value);
      return $target.val(value);
    });
  };

  formatExpiry = function(e) {
    var $target, digit, val;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val() + digit;
    if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
      e.preventDefault();
      return setTimeout(function() {
        return $target.val("0" + val + " / ");
      });
    } else if (/^\d\d$/.test(val)) {
      e.preventDefault();
      return setTimeout(function() {
        return $target.val(val + " / ");
      });
    }
  };

  formatForwardExpiry = function(e) {
    var $target, digit, val;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val();
    if (/^\d\d$/.test(val)) {
      return $target.val(val + " / ");
    }
  };

  formatForwardSlashAndSpace = function(e) {
    var $target, val, which;
    which = String.fromCharCode(e.which);
    if (!(which === '/' || which === ' ')) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val();
    if (/^\d$/.test(val) && val !== '0') {
      return $target.val("0" + val + " / ");
    }
  };

  formatBackExpiry = function(e) {
    var $target, value;
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\d\s\/\s$/.test(value)) {
      e.preventDefault();
      return setTimeout(function() {
        return $target.val(value.replace(/\d\s\/\s$/, ''));
      });
    }
  };

  reFormatCVC = function(e) {
    return setTimeout(function() {
      var $target, value;
      $target = $(e.currentTarget);
      value = $target.val();
      value = value.replace(/\D/g, '').slice(0, 4);
      return $target.val(value);
    });
  };

  restrictNumeric = function(e) {
    var input;
    if (e.metaKey || e.ctrlKey) {
      return true;
    }
    if (e.which === 32) {
      return false;
    }
    if (e.which === 0) {
      return true;
    }
    if (e.which < 33) {
      return true;
    }
    input = String.fromCharCode(e.which);
    return !!/[\d\s]/.test(input);
  };

  restrictCardNumber = function(e) {
    var $target, card, digit, value;
    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = ($target.val() + digit).replace(/\D/g, '');
    card = cardFromNumber(value);
    if (card) {
      return value.length <= card.length[card.length.length - 1];
    } else {
      return value.length <= 16;
    }
  };

  restrictExpiry = function(e) {
    var $target, digit, value;
    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = $target.val() + digit;
    value = value.replace(/\D/g, '');
    if (value.length > 6) {
      return false;
    }
  };

  restrictCVC = function(e) {
    var $target, digit, val;
    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    val = $target.val() + digit;
    return val.length <= 4;
  };

  setCardType = function(e) {
    var $target, allTypes, card, cardType, val;
    $target = $(e.currentTarget);
    val = $target.val();
    cardType = $.payment.cardType(val) || 'unknown';
    if (!$target.hasClass(cardType)) {
      allTypes = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = cards.length; i < len; i++) {
          card = cards[i];
          results.push(card.type);
        }
        return results;
      })();
      $target.removeClass('unknown');
      $target.removeClass(allTypes.join(' '));
      $target.addClass(cardType);
      $target.toggleClass('identified', cardType !== 'unknown');
      return $target.trigger('payment.cardType', cardType);
    }
  };

  $.payment.fn.formatCardCVC = function() {
    this.on('keypress', restrictNumeric);
    this.on('keypress', restrictCVC);
    this.on('paste', reFormatCVC);
    this.on('change', reFormatCVC);
    this.on('input', reFormatCVC);
    return this;
  };

  $.payment.fn.formatCardExpiry = function() {
    this.on('keypress', restrictNumeric);
    this.on('keypress', restrictExpiry);
    this.on('keypress', formatExpiry);
    this.on('keypress', formatForwardSlashAndSpace);
    this.on('keypress', formatForwardExpiry);
    this.on('keydown', formatBackExpiry);
    this.on('change', reFormatExpiry);
    this.on('input', reFormatExpiry);
    return this;
  };

  $.payment.fn.formatCardNumber = function() {
    this.on('keypress', restrictNumeric);
    this.on('keypress', restrictCardNumber);
    this.on('keypress', formatCardNumber);
    this.on('keydown', formatBackCardNumber);
    this.on('keyup', setCardType);
    this.on('paste', reFormatCardNumber);
    this.on('change', reFormatCardNumber);
    this.on('input', reFormatCardNumber);
    this.on('input', setCardType);
    return this;
  };

  $.payment.fn.restrictNumeric = function() {
    this.on('keypress', restrictNumeric);
    this.on('paste', reFormatNumeric);
    this.on('change', reFormatNumeric);
    this.on('input', reFormatNumeric);
    return this;
  };

  $.payment.fn.cardExpiryVal = function() {
    return $.payment.cardExpiryVal($(this).val());
  };

  $.payment.cardExpiryVal = function(value) {
    var month, prefix, ref, year;
    value = value.replace(/\s/g, '');
    ref = value.split('/', 2), month = ref[0], year = ref[1];
    if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
      prefix = (new Date).getFullYear();
      prefix = prefix.toString().slice(0, 2);
      year = prefix + year;
    }
    month = parseInt(month, 10);
    year = parseInt(year, 10);
    return {
      month: month,
      year: year
    };
  };

  $.payment.validateCardNumber = function(num) {
    var card, ref;
    num = (num + '').replace(/\s+|-/g, '');
    if (!/^\d+$/.test(num)) {
      return false;
    }
    card = cardFromNumber(num);
    if (!card) {
      return false;
    }
    return (ref = num.length, indexOf.call(card.length, ref) >= 0) && (card.luhn === false || luhnCheck(num));
  };

  $.payment.validateCardExpiry = function(month, year) {
    var currentTime, expiry, ref;
    if (typeof month === 'object' && 'month' in month) {
      ref = month, month = ref.month, year = ref.year;
    }
    if (!(month && year)) {
      return false;
    }
    month = $.trim(month);
    year = $.trim(year);
    if (!/^\d+$/.test(month)) {
      return false;
    }
    if (!/^\d+$/.test(year)) {
      return false;
    }
    if (!((1 <= month && month <= 12))) {
      return false;
    }
    if (year.length === 2) {
      if (year < 70) {
        year = "20" + year;
      } else {
        year = "19" + year;
      }
    }
    if (year.length !== 4) {
      return false;
    }
    expiry = new Date(year, month);
    currentTime = new Date;
    expiry.setMonth(expiry.getMonth() - 1);
    expiry.setMonth(expiry.getMonth() + 1, 1);
    return expiry > currentTime;
  };

  $.payment.validateCardCVC = function(cvc, type) {
    var card, ref;
    cvc = $.trim(cvc);
    if (!/^\d+$/.test(cvc)) {
      return false;
    }
    card = cardFromType(type);
    if (card != null) {
      return ref = cvc.length, indexOf.call(card.cvcLength, ref) >= 0;
    } else {
      return cvc.length >= 3 && cvc.length <= 4;
    }
  };

  $.payment.cardType = function(num) {
    var ref;
    if (!num) {
      return null;
    }
    return ((ref = cardFromNumber(num)) != null ? ref.type : void 0) || null;
  };

  $.payment.formatCardNumber = function(num) {
    var card, groups, ref, upperLength;
    num = num.replace(/\D/g, '');
    card = cardFromNumber(num);
    if (!card) {
      return num;
    }
    upperLength = card.length[card.length.length - 1];
    num = num.slice(0, upperLength);
    if (card.format.global) {
      return (ref = num.match(card.format)) != null ? ref.join(' ') : void 0;
    } else {
      groups = card.format.exec(num);
      if (groups == null) {
        return;
      }
      groups.shift();
      groups = $.grep(groups, function(n) {
        return n;
      });
      return groups.join(' ');
    }
  };

  $.payment.formatExpiry = function(expiry) {
    var mon, parts, sep, year;
    parts = expiry.match(/^\D*(\d{1,2})(\D+)?(\d{1,4})?/);
    if (!parts) {
      return '';
    }
    mon = parts[1] || '';
    sep = parts[2] || '';
    year = parts[3] || '';
    if (year.length > 0) {
      sep = ' / ';
    } else if (sep === ' /') {
      mon = mon.substring(0, 1);
      sep = '';
    } else if (mon.length === 2 || sep.length > 0) {
      sep = ' / ';
    } else if (mon.length === 1 && (mon !== '0' && mon !== '1')) {
      mon = "0" + mon;
      sep = ' / ';
    }
    return mon + sep + year;
  };

}).call(this);




/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-15 19:39:42 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/mobile_download_forms.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var send_email, send_sms, track_click, track_event;

  track_event = Scribd.track_event;

  track_click = function(name, is_valid) {
    return $(document.body).track({
      category: "mobile_signup_" + name,
      action: 'click',
      label: "success:" + is_valid
    });
  };

  send_sms = function(arg) {
    var document_id, params, phone_number, tracking_type;
    document_id = arg.document_id, phone_number = arg.phone_number, tracking_type = arg.tracking_type;
    params = {
      document_id: document_id,
      phone_number: phone_number
    };
    return $.post('/read/text_signup', params, (function(_this) {
      return function(response) {
        return track_click("sms_" + tracking_type, response.valid);
      };
    })(this));
  };

  send_email = function(arg) {
    var tracking_type;
    tracking_type = arg.tracking_type;
    return $.post('/read/email_signup', (function(_this) {
      return function(response) {
        return track_click("email_" + tracking_type, response.valid);
      };
    })(this));
  };

  if (Scribd.Shared == null) {
    Scribd.Shared = {};
  }

  Scribd.Shared.MobileDownloadForms = {
    send_sms: send_sms,
    send_email: send_email
  };

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/_base.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var base;

  if (Scribd.Payments == null) {
    Scribd.Payments = {};
  }

  if ((base = Scribd.Payments).CheckoutFlow == null) {
    base.CheckoutFlow = {};
  }

  Scribd.Payments.CheckoutFlow.New = {};

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/_checkout_flow_tracking.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.CheckoutFlowTracking = (function() {
    function CheckoutFlowTracking(container, opts) {
      if (opts == null) {
        opts = {};
      }
      _.defer(function() {
        return $(container).track(opts);
      });
    }

    return CheckoutFlowTracking;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow2/_checkout_tracking.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Scribd.CheckoutTracking = (function() {
    function CheckoutTracking() {
      this.track = bind(this.track, this);
    }

    CheckoutTracking.prototype.events_tracked = [];

    CheckoutTracking.prototype.cart_type = "unknown";

    CheckoutTracking.prototype.track_category = "new_checkout_flow";

    CheckoutTracking.prototype.word_user_id = "unknown";

    CheckoutTracking.prototype.track = function(event, error, distinct) {
      var data;
      if (error == null) {
        error = false;
      }
      if (distinct == null) {
        distinct = true;
      }
      if (indexOf.call(this.events_tracked, event) >= 0 && distinct) {
        return;
      }
      this.container.track({
        category: this.track_category,
        action: event,
        label: this.cart_type
      });
      data = {
        category: this.track_category,
        cart: this.cart_type,
        word_user_id: this.word_user_id
      };
      if (error) {
        data.error = error;
      }
      if (typeof $rat === "function") {
        $rat(event, data);
      }
      if (typeof $rat !== "undefined" && $rat !== null) {
        $rat.root().flushEvents();
      }
      return this.events_tracked.push(event);
    };

    return CheckoutTracking;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-18 17:23:52 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow2/purchase.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.Purchase = (function(superClass) {
    extend(Purchase, superClass);

    Purchase.prototype.in_timeout = "in_timeout";

    Purchase.prototype.out_timeout = "out_timeout";

    Purchase.prototype.tooltip = ".tooltip";

    function Purchase(container, opts) {
      var clear_timeouts, fade_in, fade_out;
      if (opts == null) {
        opts = {};
      }
      this.submit_handler = bind(this.submit_handler, this);
      this.container = $(container);
      this.cart_type = opts.cart_type;
      this.word_user_id = opts.word_user_id;
      this.in_paypal = false;
      this.timeouts = {};
      this.form = this.container.find(".payment_form");
      this.paypal_form = this.container.find(".paypal_form");
      this.continue_button = this.container.find(".continue_button");
      this.credit_card_fields = this.container.find(".credit_card_fields");
      clear_timeouts = (function(_this) {
        return function(target) {
          var in_timeout, out_timeout;
          in_timeout = target.data(_this.in_timeout);
          out_timeout = target.data(_this.out_timeout);
          if (in_timeout) {
            clearTimeout(in_timeout);
          }
          if (out_timeout) {
            return clearTimeout(out_timeout);
          }
        };
      })(this);
      fade_in = (function(_this) {
        return function(target, event) {
          clear_timeouts(target);
          return target.data(_this.in_timeout, setTimeout(function() {
            $(target).find(_this.tooltip).fadeIn(250);
            return _this.track("view_" + (target.attr("class")) + "_tooltip");
          }, 500));
        };
      })(this);
      fade_out = (function(_this) {
        return function(target, event) {
          clear_timeouts(target);
          return target.data(_this.out_timeout, setTimeout(function() {
            return $(target).find(_this.tooltip).fadeOut(500);
          }, 1000));
        };
      })(this);
      this.form.on("submit", this.submit_handler);
      this.container.dispatch("mouseover", {
        tooltip_parent: fade_in
      });
      this.container.dispatch("mouseout", {
        tooltip_parent: fade_out
      });
      this.container.dispatch("click", {
        continue_button: (function(_this) {
          return function() {
            _this.track("submit_form");
            if (_this.in_paypal) {
              return _this.paypal_form.submit();
            } else {
              return _this.form.submit();
            }
          };
        })(this),
        paypal_radio: (function(_this) {
          return function($el, e) {
            e.preventDefault();
            _this.in_paypal = true;
            _this.credit_card_fields.hide();
            _this.container.find(".credit_card_button .radio").addClass("icon-radiobutton_empty").removeClass("icon-radiobutton_filled");
            return $el.find(".radio").removeClass("icon-radiobutton_empty").addClass("icon-radiobutton_filled");
          };
        })(this),
        credit_card_button: (function(_this) {
          return function($el, e) {
            _this.in_paypal = false;
            _this.credit_card_fields.show();
            _this.container.find(".paypal_radio .radio").addClass("icon-radiobutton_empty").removeClass("icon-radiobutton_filled");
            return $el.find(".radio").removeClass("icon-radiobutton_empty").addClass("icon-radiobutton_filled");
          };
        })(this),
        tooltip: function(target, event) {
          return fade_out(target.closest('.tooltip_parent'), event);
        }
      });
    }

    Purchase.prototype.submit_handler = function() {
      return Scribd.Lightbox.open("checkout_loading_lb");
    };

    return Purchase;

  })(Scribd.CheckoutTracking);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/login/checkout_flow_login.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.CheckoutFlowLogin = (function() {
    function CheckoutFlowLogin(container, next_url) {
      this.container = $(container);
      this.next_url = next_url;
      this.page_name = "checkout_flow_login";
      this.forgot_pw_lb = null;
      this.container.track({
        action: "view",
        label: this.page_name
      });
      this.container.dispatch("click", {
        default_input: (function(_this) {
          return function(btn, e) {
            var input;
            input = $(e.target);
            input.removeClass('greyed');
            if (input.attr('value') === input.attr('default')) {
              return input.attr('value', '');
            }
          };
        })(this),
        forgot_password: (function(_this) {
          return function(btn, e) {
            _this.forgot_pw_lb = Scribd.Lightbox.open("forgot_password_lb", Scribd.ForgotPasswordLightbox, _this);
            return false;
          };
        })(this)
      });
      this.initialize_input_labels();
      this.container.on("Scribd:Facebook:login_success", (function(_this) {
        return function(e, res) {
          return window.location.href = _this.next_url;
        };
      })(this));
    }

    CheckoutFlowLogin.prototype.initialize_input_labels = function() {
      var i, input, len, ref, results;
      ref = $(".default_input");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        input = ref[i];
        input = $(input);
        if (input.attr('value') === "") {
          input.attr('value', input.attr('default'));
          results.push(input.addClass('greyed'));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    CheckoutFlowLogin.prototype.show = function() {
      if (this.forgot_pw_lb) {
        return this.forgot_pw_lb.close();
      }
    };

    return CheckoutFlowLogin;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/archive_flow/plans.coffee (last modified: 2016-07-18 17:23:52 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.ArchivePlans = (function() {
    ArchivePlans.prototype.rat = function(key, data) {
      var append, rat_data, rat_key, ref;
      if (data == null) {
        data = {};
      }
      ref = (function() {
        switch (key) {
          case "page_view":
            return ["page:view", data];
          case "package_click":
            return ["package_container:click", data];
          case "continue":
            return ["continue:click", data];
          case "start_upload":
            return ["start_upload:click", data];
          case "lightbox_upload_click":
            return ["upload_lightbox_button:click", data];
          case "lightbox_dismiss":
            return ["upload_lightbox:dismiss", data];
          case "banner_view":
            return ["upload_banner:view", data];
          case "banner_click":
            return ["upload_banner_button:click", data];
        }
      })(), append = ref[0], rat_data = ref[1];
      rat_key = "archive_plans:" + append;
      rat_data.doc_type = this.archive_context;
      this.container.track({
        label: rat_key
      });
      return this.container.track_rats(rat_key, rat_data);
    };

    function ArchivePlans(container, opts) {
      var context, free_trial_label, lightbox_title, ref, signup_label, user_has_uploaded;
      this.opts = opts != null ? opts : {};
      ref = this.opts, context = ref.context, lightbox_title = ref.lightbox_title, signup_label = ref.signup_label, free_trial_label = ref.free_trial_label, user_has_uploaded = ref.user_has_uploaded;
      this.container = $(container);
      this.ga_prefix = "plans:" + context;
      this.archive_context = context;
      this.plans = this.container.find(".plans");
      this.rat("page_view");
      if (user_has_uploaded) {
        this.rat("banner_view");
      } else {
        Scribd.nway_test_choice_value("archive_plans_remove_incentivized_upload");
        $((function(_this) {
          return function() {
            var upload_button;
            upload_button = $(".archive_upload_button");
            if (upload_button.length > 0) {
              return _this.container.track_rats("archive_plans:start_upload:view");
            }
          };
        })(this));
      }
      this.highlight_selected();
      this.container.dispatch("click", {
        upload_button: (function(_this) {
          return function(btn) {
            if (!btn.closest(".incentivized_upload_box").length) {
              return;
            }
            _this.rat("banner_click");
            return "continue";
          };
        })(this),
        archive_upload_button: (function(_this) {
          return function(btn, e) {
            var lightbox;
            _this.rat("start_upload");
            lightbox = Scribd.Lightbox.open("upload_lb");
            lightbox.set_title(lightbox_title);
            if (_this.lightbox_bound) {
              return;
            }
            _this.lightbox_bound = true;
            lightbox.container.dispatch("click", {
              upload_button: function(btn) {
                _this.rat("lightbox_upload_click");
                return "continue";
              }
            });
            return lightbox.container.on("Scribd:lightbox:closed", function() {
              return _this.rat("lightbox_dismiss");
            });
          };
        })(this),
        plan_continue_button: (function(_this) {
          return function(btn, e) {
            var identifier;
            identifier = _this.plans.find(".radio:checked").closest(".package_container").data("rat_id");
            _this.rat("continue", {
              plan: identifier
            });
            return $("#payment_form").submit();
          };
        })(this),
        package_container: (function(_this) {
          return function(btn) {
            var identifier;
            identifier = btn.data("rat_id");
            _this.rat("package_click", {
              plan: identifier
            });
            return "continue";
          };
        })(this)
      });
      this.container.click((function(_this) {
        return function(e) {
          var clicker, identifier;
          clicker = $(e.target).closest(".package_container");
          if (clicker.length > 0) {
            _this.highlight(clicker);
            clicker.find(".radio").attr("checked", 'checked');
            identifier = clicker.attr('id');
            if (identifier.indexOf("free_trial") >= 0) {
              return $('.plan_continue_button .btn_inner').text(free_trial_label);
            } else {
              return $('.plan_continue_button .btn_inner').text(signup_label);
            }
          }
        };
      })(this));
    }

    ArchivePlans.prototype.highlight_selected = function() {
      var i, len, radio, ref, results;
      ref = $(".radio");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        radio = ref[i];
        radio = $(radio);
        if (radio.attr("checked") != null) {
          results.push(this.highlight(radio.closest(".package_container")));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ArchivePlans.prototype.highlight = function(element) {
      var div, i, len, ref;
      ref = $(".package_container");
      for (i = 0, len = ref.length; i < len; i++) {
        div = ref[i];
        $(div).removeClass("selected");
      }
      return element.addClass("selected");
    };

    return ArchivePlans;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/buttons/payments.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.PaymentsButton = (function() {
    function PaymentsButton(container, form_id, disable_on_click) {
      this.check_and_set_form_submitted = bind(this.check_and_set_form_submitted, this);
      this.disable_button = bind(this.disable_button, this);
      this.container = $(container);
      this.form = $("#" + form_id);
      this.button = this.form.find('.continue_button');
      this.spinner = this.form.find('.spinner');
      this.disable_on_click = disable_on_click;
      this.container.dispatch("click", {
        continue_button: (function(_this) {
          return function(btn, e) {
            if (!_this.button.attr("disabled")) {
              _this.disable_button();
              return _this.form.submit();
            }
          };
        })(this)
      });
      if (this.disable_on_click) {
        this.form.submit((function(_this) {
          return function(e) {
            _this.disable_button();
            return _this.check_and_set_form_submitted();
          };
        })(this));
      }
    }

    PaymentsButton.prototype.disable_button = function() {
      if (this.disable_on_click) {
        this.button.prop("disabled", true);
        this.button.addClass("disabled");
        return this.spinner.addClass('active');
      }
    };

    PaymentsButton.prototype.check_and_set_form_submitted = function() {
      if (this.form_submitted) {
        return false;
      }
      return this.form_submitted = true;
    };

    return PaymentsButton;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/_subscription_faq_lightbox.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.SubscriptionFaqLightbox = (function(superClass) {
    extend(SubscriptionFaqLightbox, superClass);

    function SubscriptionFaqLightbox(container) {
      this.open_login_window = bind(this.open_login_window, this);
      SubscriptionFaqLightbox.__super__.constructor.apply(this, arguments);
      this.logged_in = !!Scribd.logged_in;
      this.container.on("click", ".faq_start_free_trial", (function(_this) {
        return function() {
          if (!_this.logged_in) {
            Scribd.Lightbox.close('faq_lightbox');
            setTimeout(function() {
              return _this.open_login_window('subscription_faq_lightbox');
            }, 150);
            return false;
          } else {
            return true;
          }
        };
      })(this));
    }

    SubscriptionFaqLightbox.prototype.open_login_window = function() {
      var metadata, params;
      metadata = {
        context: 'pmp',
        page: 'subscription_faq_lightbox',
        action: 'start_trial',
        platform: 'web',
        logged_in: this.logged_in
      };
      metadata = encodeURIComponent(JSON.stringify(metadata));
      params = "metadata=" + metadata;
      return Scribd.SignIn.open("subscribe", "/archive/pmp_checkout?" + params);
    };

    return SubscriptionFaqLightbox;

  })(Scribd.Lightbox);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow2/billing.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.Billing = (function(superClass) {
    var cards;

    extend(Billing, superClass);

    Billing.prototype.cards = (function() {
      var i, len, ref, results;
      ref = $.payment.cards;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cards = ref[i];
        results.push(cards.type);
      }
      return results;
    })();

    Billing.prototype.field_error_class = "field_error";

    Billing.prototype.valid_class = "valid";

    Billing.prototype.space_re = /\s/g;

    Billing.prototype.state_re = /^[A-Z]{2}$/;

    function Billing(container, opts) {
      if (opts == null) {
        opts = {};
      }
      this.validate = bind(this.validate, this);
      this.card_full_length = bind(this.card_full_length, this);
      this.update_country_fields = bind(this.update_country_fields, this);
      this.update_card_icon = bind(this.update_card_icon, this);
      this.validate_card_on_final_digit = bind(this.validate_card_on_final_digit, this);
      this.validate_frontend = bind(this.validate_frontend, this);
      this.submit_handler = bind(this.submit_handler, this);
      this.restrict_cvv_length = bind(this.restrict_cvv_length, this);
      this.setup_events = bind(this.setup_events, this);
      Billing.__super__.constructor.apply(this, arguments);
      this.date = new Date(opts.date);
      this.opts = opts;
      this.continue_button = this.container.find(".continue_button");
      this.country_select = this.container.find(".country_select");
      this.credit_card_field = this.container.find(".credit_card_input");
      this.cvv_field = this.container.find(".cvv_input");
      this.fields_to_validate = this.container.find($("[data-validate]"));
      this.month = this.container.find("[data-validate*=expiry_month]");
      this.state_content = this.container.find(".state");
      this.us_state_content = this.state_content.find(".us");
      this.ca_state_content = this.state_content.find(".canada");
      this.year = this.container.find("[data-validate*=expiry_year]");
      this.zip_label = this.container.find(".zip_label");
      this.setup_events();
      if (opts.flash && opts.flash.response_reason_code) {
        this.track("authnet_error", opts.flash.response_reason_code);
      } else if (opts.flash && opts.flash.form_error_fields) {
        this.track("validation_error", opts.flash.form_error_fields);
      } else {
        this.track("view_cart");
      }
    }

    Billing.prototype.setup_events = function() {
      this.container.dispatch("click", {
        paypal_button: (function(_this) {
          return function() {
            _this.track("paypal_click");
            return "continue";
          };
        })(this),
        eula_link: (function(_this) {
          return function() {
            _this.track("view_eula");
            return "continue";
          };
        })(this)
      });
      this.container.dispatch("change keyup", {
        credit_card_input: (function(_this) {
          return function() {
            _this.track("enter_credit_card_data");
            _this.update_card_icon();
            _this.validate_card_on_final_digit();
            return "continue";
          };
        })(this)
      });
      this.container.dispatch("change", {
        country_select: (function(_this) {
          return function() {
            _this.update_country_fields();
            return "continue";
          };
        })(this)
      });
      this.update_country_fields();
      this.update_card_icon();
      this.validate_card_on_final_digit();
      this.credit_card_field.payment("formatCardNumber");
      this.cvv_field.payment("formatCardCVC");
      this.cvv_field.on("keypress", this.restrict_cvv_length);
      this.credit_card_field.trigger("paste");
      return this.fields_to_validate.on("focus blur change", (function(_this) {
        return function(event) {
          var parent, ref, target;
          target = $(event.target);
          parent = _this.get_parent(target);
          if (event.type === "focus" && _this.validate_frontend()) {
            parent.removeClass(_this.field_error_class);
          }
          if ((ref = event.type) === "blur" || ref === "paste" || ref === "change") {
            return _this.validate(event);
          }
        };
      })(this));
    };

    Billing.prototype.restrict_cvv_length = function(event) {
      var card, data, length;
      if (event.metaKey || event.ctrlKey) {
        return true;
      }
      if (event.which === 0) {
        return true;
      }
      if (event.which < 33) {
        return true;
      }
      card = $.payment.cardType(this.credit_card_field.val());
      if (card) {
        data = this.get_card_data_from_type(card);
      }
      if (data) {
        length = data.cvcLength[data.cvcLength.length - 1];
      }
      if (length && this.cvv_field.val().length >= length) {
        return false;
      }
    };

    Billing.prototype.submit_handler = function() {
      var data, empty_fields, errors, field, field_data, message;
      field_data = (function() {
        var i, len, ref, results;
        ref = this.fields_to_validate;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          field = ref[i];
          results.push(this.validate({
            target: field
          }));
        }
        return results;
      }).call(this);
      errors = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = field_data.length; i < len; i++) {
          data = field_data[i];
          if (data.valid === false) {
            results.push(data);
          }
        }
        return results;
      })();
      if (errors.length) {
        this.track("frontend_validation_error", errors, false);
        if (this.validate_frontend()) {
          message = this.opts.flash_error_message;
          if (this.opts.use_alt_flash_error) {
            empty_fields = (function() {
              var i, len, ref, results;
              ref = this.fields_to_validate;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                field = ref[i];
                if ($(field).val() === "") {
                  results.push(field);
                }
              }
              return results;
            }).call(this);
            if (empty_fields.length === this.fields_to_validate.length) {
              message = this.opts.alt_flash_error_message;
            }
          }
          (new Scribd.Flasher).show("error", message);
          event.stopPropagation();
          return false;
        } else {
          return Billing.__super__.submit_handler.apply(this, arguments);
        }
      } else {
        this.track("frontend_validation_passing");
        return Billing.__super__.submit_handler.apply(this, arguments);
      }
    };

    Billing.prototype.validate_frontend = function() {
      return false;
    };

    Billing.prototype.validate_card_on_final_digit = function() {
      var card, number;
      number = this.credit_card_field.val();
      card = $.payment.cardType(number);
      if (this.card_full_length(card, number)) {
        return this.validate({
          target: this.credit_card_field
        });
      }
    };

    Billing.prototype.update_card_icon = function() {
      var card, number;
      number = this.credit_card_field.val();
      card = $.payment.cardType(number);
      this.container.removeClass(this.cards.join(" "));
      return this.container.addClass(card);
    };

    Billing.prototype.update_country_fields = function() {
      if (this.country_select.length) {
        if (this.country_select.val() === "United States") {
          this.zip_label.html(this.zip_label.data("label").us);
          return this.state_content.show().empty().append(this.us_state_content);
        } else if (this.country_select.val() === "Canada") {
          this.zip_label.html(this.zip_label.data("label").non_us);
          return this.state_content.show().empty().append(this.ca_state_content);
        } else {
          this.zip_label.html(this.zip_label.data("label").non_us);
          return this.state_content.hide();
        }
      }
    };

    Billing.prototype.validate_expiry_with_server_date = function(month, year) {
      var expiry;
      if (!(month && year)) {
        return false;
      }
      month = $.trim(month);
      year = $.trim(year);
      expiry = new Date(year, month);
      expiry.setMonth(expiry.getMonth() - 1);
      expiry.setMonth(expiry.getMonth() + 1, 1);
      return expiry > this.date;
    };

    Billing.prototype.get_parent = function(field) {
      return field.closest(".validate");
    };

    Billing.prototype.get_card_data_from_type = function(type) {
      var card;
      return ((function() {
        var i, len, ref, results;
        ref = $.payment.cards;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          card = ref[i];
          if (card.type === type) {
            results.push(card);
          }
        }
        return results;
      })())[0];
    };

    Billing.prototype.card_full_length = function(type, value) {
      var card;
      card = this.get_card_data_from_type(type);
      if (!card) {
        return false;
      }
      return card.length[card.length.length - 1] === value.replace(this.space_re, "").length;
    };

    Billing.prototype.validate = function(event) {
      var data, parent, target, valid, value;
      valid = false;
      target = $(event.target);
      parent = this.get_parent(target);
      value = target.val();
      data = target.data("validate");
      if (!data) {
        return;
      }
      if (data.re) {
        valid = new RegExp(data.re).test(value);
      } else {
        switch (data.type) {
          case "credit_card":
            valid = $.payment.validateCardNumber(value);
            break;
          case "cvv":
            valid = $.payment.validateCardCVC(value, $.payment.cardType(this.credit_card_field.val()));
            break;
          case "expiry_month":
            if (this.month.is(":focus" || this.year.is(":focus"))) {
              return true;
            } else {
              valid = this.validate_expiry_with_server_date(value, this.year.val());
            }
            break;
          case "expiry_year":
            if (this.month.is(":focus" || this.year.is(":focus"))) {
              return true;
            } else {
              valid = this.validate_expiry_with_server_date(this.month.val(), value);
            }
            break;
          case "state":
            if (this.country_select.val() === "United States") {
              valid = this.state_re.test(value);
            } else {
              valid = true;
            }
        }
      }
      if (this.validate_frontend()) {
        parent.toggleClass(this.valid_class, valid);
        parent.toggleClass(this.field_error_class, !valid);
      }
      return {
        valid: valid,
        target: target.attr("id"),
        length: value.replace(this.space_re, "").length
      };
    };

    return Billing;

  })(Scribd.Purchase);

  Scribd.PaymentProfileUpdate = (function(superClass) {
    extend(PaymentProfileUpdate, superClass);

    function PaymentProfileUpdate(container, opts1) {
      this.opts = opts1 != null ? opts1 : {};
      this.expand_address = bind(this.expand_address, this);
      this.init = bind(this.init, this);
      PaymentProfileUpdate.__super__.constructor.apply(this, arguments);
      this.expandable_brief = this.container.find(".expandable .brief");
      this.expandable_full = this.container.find(".expandable .full");
      this.opts.container = this.container;
      this.opts.form = this.form;
      this.init();
    }

    PaymentProfileUpdate.prototype.init = function() {
      this.container.dispatch("click", {
        edit_address: (function(_this) {
          return function() {
            return _this.expand_address();
          };
        })(this)
      });
      if (this.container.find(".address_fields").find(".field_error").length) {
        return this.expand_address();
      }
    };

    PaymentProfileUpdate.prototype.expand_address = function() {
      this.expandable_brief.slideUp();
      return this.expandable_full.slideDown();
    };

    PaymentProfileUpdate.prototype.track = function() {};

    return PaymentProfileUpdate;

  })(Scribd.Billing);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow2/preview.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.CheckoutPreview = (function(superClass) {
    extend(CheckoutPreview, superClass);

    function CheckoutPreview(container, opts) {
      if (opts == null) {
        opts = {};
      }
      CheckoutPreview.__super__.constructor.apply(this, arguments);
    }

    return CheckoutPreview;

  })(Scribd.Purchase);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow2/receipt.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.Receipt = (function() {
    function Receipt(container, opts) {
      if (opts == null) {
        opts = {};
      }
      this.container = $(container);
      this.opts = opts;
      this.container.dispatch("click", {
        download_button: (function(_this) {
          return function() {
            return Scribd.Lightbox.remote_open("download_dialog", _this.opts.download_dialog_url, {
              id: _this.opts.document_id,
              secret_password: _this.opts.document_secret
            });
          };
        })(this),
        mobile_download: (function(_this) {
          return function() {
            return Scribd.Lightbox.open("mobile_download_lightbox", Scribd.MobileDownloadLightbox, _this.opts);
          };
        })(this)
      });
    }

    return Receipt;

  })();

  Scribd.MobileDownloadLightbox = (function(superClass) {
    extend(MobileDownloadLightbox, superClass);

    function MobileDownloadLightbox(container1, opts1) {
      this.container = container1;
      this.opts = opts1 != null ? opts1 : {};
      this.setup_events = bind(this.setup_events, this);
      this.send_xhr = bind(this.send_xhr, this);
      MobileDownloadLightbox.__super__.constructor.call(this, this.container);
      this.phone_number_field = this.container.find(".phone_number_field");
      this.description = this.container.find(".description");
      this.form = this.container.find(".mobile_download_form");
      this.setup_events();
    }

    MobileDownloadLightbox.prototype.send_xhr = function(arg) {
      var event_type, params, success_message, url;
      url = arg.url, params = arg.params, success_message = arg.success_message, event_type = arg.event_type;
      return this.description.fadeTo(500, 0.5, (function(_this) {
        return function() {
          var $xhr;
          $xhr = $.post(url, params);
          $xhr.success(function(response) {
            _this.container.track({
              action: "xhr_" + (response.valid ? "success" : "failure"),
              label: "mobile_signup_" + event_type + "_checkout_receipt"
            });
            if (!response.valid) {
              return _this.show_flash("An error occured, please check the number and try again", "error");
            }
            return _this.description.fadeTo(500, 0, function() {
              return _this.description.html(success_message);
            });
          });
          $xhr.error(function() {
            return _this.show_flash("An error occured, please try again", "error");
          });
          return $xhr.always(function() {
            return _this.description.fadeTo(500, 1);
          });
        };
      })(this));
    };

    MobileDownloadLightbox.prototype.setup_events = function() {
      this.phone_number_field.on("keypress", function(e) {
        if (e.metaKey || e.ctrlKey) {
          return true;
        }
        if (e.which === 0) {
          return true;
        }
        if (e.which < 33) {
          return true;
        }
        return !!/^[\d\s\+]*$/.test(String.fromCharCode(e.which));
      });
      this.container.dispatch("click", {
        sms_button: (function(_this) {
          return function() {
            return _this.form.submit();
          };
        })(this),
        email_link: (function(_this) {
          return function() {
            return _this.send_xhr({
              url: _this.opts.email_signup_url,
              params: {},
              success_message: "We've sent you an email with the link to the Scribd app. Didn't receive it? <a href='#' class='email_link'>Try again.</a>",
              event_type: "email"
            });
          };
        })(this)
      });
      return this.form.on("submit", (function(_this) {
        return function($event) {
          var phone_number, raw_phone_number;
          $event.stopPropagation();
          raw_phone_number = _this.phone_number_field.val();
          phone_number = raw_phone_number.replace(/\s/g, "");
          if (phone_number) {
            _this.send_xhr({
              url: _this.opts.mobile_signup_url,
              params: {
                document_id: _this.opts.document_id,
                phone_number: phone_number
              },
              success_message: "We've sent " + raw_phone_number + " a link to the Scribd app. If you didn't receive it, try again.",
              event_type: "sms"
            });
          } else {
            _this.show_flash("Please enter a phone number", "error");
          }
          return false;
        };
      })(this));
    };

    return MobileDownloadLightbox;

  })(Scribd.Lightbox);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/_description.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  $(function() {
    return $('.open_faq_lightbox').on('click', function() {
      return Scribd.Lightbox.open('faq_lightbox', Scribd.SubscriptionFaqLightbox);
    });
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/email.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Email = (function() {
    function Email(container, next_url) {
      this.container = $(container);
      this.container.track({
        action: "view",
        label: "email"
      });
      this.container.on("Scribd:Facebook:login_success", function(e, res) {
        return window.location.href = next_url;
      });
    }

    return Email;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/_new_credit_card.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Scribd.PaymentsCreditCard = (function() {
    function PaymentsCreditCard(container, opts) {
      this.track = bind(this.track, this);
      var track_enter_credit_card_data, track_paypal_click, track_submit_form;
      this.flash = opts.flash;
      this.word_user_id = opts.word_user_id;
      this.cart_type = opts.cart_type;
      this.container = $(container);
      this.country_select = $('#new_billing_address_country');
      this.card_number_input = $('.card_number');
      this.supported_cards = ['master', 'visa', 'amex', 'discover'];
      this.continue_button = this.container.find(".continue_button");
      track_enter_credit_card_data = _.once((function(_this) {
        return function() {
          return _this.track("enter_credit_card_data");
        };
      })(this));
      track_paypal_click = _.once((function(_this) {
        return function() {
          return _this.track("paypal_click");
        };
      })(this));
      track_submit_form = _.once((function(_this) {
        return function() {
          return _this.track("submit_form");
        };
      })(this));
      if (opts.flash.response_reason_code) {
        this.track("authnet_error", opts.flash.response_reason_code);
      } else if (opts.flash.form_error_fields) {
        this.track("validation_error", opts.flash.form_error_fields);
      } else {
        this.track("view_cart");
      }
      this.container.dispatch("click", {
        paypal_button: function() {
          track_paypal_click();
          return "continue";
        }
      });
      this.continue_button.on("click", function() {
        track_submit_form();
        return "continue";
      });
      this.card_number_input.change((function(_this) {
        return function() {
          track_enter_credit_card_data();
          return _this.update_card_icons();
        };
      })(this));
      this.card_number_input.keyup((function(_this) {
        return function() {
          track_enter_credit_card_data();
          return _this.update_card_icons();
        };
      })(this));
      this.country_select.change((function(_this) {
        return function() {
          return _this.update_country_fields();
        };
      })(this));
      this.card_number_input.payment('formatCardNumber');
      $('.cvv').payment('formatCardCVC');
      $('.month').payment('restrictNumeric');
      $('.year').payment('restrictNumeric');
      this.update_card_icons();
      this.update_country_fields();
      this.card_number_input.trigger('paste');
    }

    PaymentsCreditCard.prototype.update_card_icons = function() {
      var card, each, i, len, number, ref, results;
      number = this.card_number_input.val();
      card = null;
      if ($.payment.validateCardNumber(number)) {
        card = $.payment.cardType(number);
      }
      if (indexOf.call(this.supported_cards, card) >= 0) {
        $("#" + card).fadeTo(200, 1);
      }
      ref = this.supported_cards;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        each = ref[i];
        if (each !== card) {
          results.push($("#" + each).fadeTo(200, 0.3));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    PaymentsCreditCard.prototype.update_country_fields = function() {
      var country;
      country = this.country_select.val();
      if (country === 'United States') {
        $('#state_group label').html('State');
        $('#credit_card_zip_label').html("Zip Code");
        return $('#state_group').show();
      } else if (country === 'Canada') {
        $('#state_group label').html('Province');
        $('#credit_card_zip_label').html("Postal Code");
        return $('#state_group').show();
      } else {
        $('#credit_card_zip_label').html("Postal Code");
        $('#state_group').hide();
        return $('#new_billing_address_state').val('');
      }
    };

    PaymentsCreditCard.prototype.track = function(event, error) {
      var data;
      if (error == null) {
        error = false;
      }
      if (!this.cart_type) {
        return;
      }
      data = {
        cart: this.cart_type,
        word_user_id: this.word_user_id,
        category: "old_checkout_flow",
        test: "control"
      };
      if (error) {
        data.error = error;
      }
      if (typeof $rat === "function") {
        $rat(event, data);
      }
      return typeof $rat !== "undefined" && $rat !== null ? $rat.root().flushEvents() : void 0;
    };

    return PaymentsCreditCard;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/reauthenticate_facebook.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.PaymentsReauthenticateFacebook = (function() {
    function PaymentsReauthenticateFacebook(container) {
      this.container = $(container);
      this.container.track({
        action: "view",
        label: "reauthenticate_facebook"
      });
      $('#fb_login').click((function(_this) {
        return function() {
          if (FB.getAuthResponse()) {
            return FB.logout(_this.login);
          } else {
            return _this.login();
          }
        };
      })(this));
    }

    PaymentsReauthenticateFacebook.prototype.login = function() {
      return FB.login(function(response) {
        if (response.authResponse) {
          return document.location = '/payments/reauthenticate_facebook?reauth_login=1';
        }
      });
    };

    return PaymentsReauthenticateFacebook;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/_receipt.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Receipt, Shared, no_default,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  no_default = Scribd.no_default, Shared = Scribd.Shared;

  Receipt = (function(superClass) {
    extend(Receipt, superClass);

    function Receipt() {
      return Receipt.__super__.constructor.apply(this, arguments);
    }

    Receipt.prototype.events = {
      'click .mobile_download_form .text_me_button': 'send_mobile_download_sms',
      'click .mobile_download_form .send_email a': 'send_mobile_download_email'
    };

    Receipt.prototype.initialize = function() {
      this.summary_item_id = this.options.summary_item_id;
      this.mobile_download_form = this.$('.mobile_download_form');
      this.submitting = false;
      return this.tracking_type = 'checkout_receipt';
    };

    Receipt.prototype.send_mobile_download_sms = no_default(function(event) {
      var options, phone_number;
      if (this.submitting) {
        return;
      }
      phone_number = this.mobile_download_form.find('.phone_number_field').val();
      options = {
        document_id: this.summary_item_id,
        phone_number: phone_number,
        tracking_type: this.tracking_type
      };
      this.submitting = true;
      return Shared.MobileDownloadForms.send_sms(options).then((function(_this) {
        return function(res) {
          return _this.set_sms_sent_state(phone_number);
        };
      })(this));
    });

    Receipt.prototype.set_sms_sent_state = function(phone_number) {
      this.submitting = false;
      return this.mobile_download_form.find('.description').addClass('sent').text("We've sent " + phone_number + " a link to the Scribd app. If you didn't receive it, try again.");
    };

    Receipt.prototype.send_mobile_download_email = no_default(function(event) {
      var options;
      options = {
        tracking_type: this.tracking_type
      };
      return Shared.MobileDownloadForms.send_email(options).then((function(_this) {
        return function(res) {
          return _this.set_email_sent_state();
        };
      })(this));
    });

    Receipt.prototype.set_email_sent_state = function() {
      return this.mobile_download_form.find('.send_email').html("We've sent you an email with the link to the Scribd app. Didn't receive it? <a href='#' class='send_email'>Try again.</a>");
    };

    return Receipt;

  })(Backbone.View);

  Scribd.Payments.CheckoutFlow.New.Receipt = Receipt;

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/receipt/_document.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Document,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Document = (function(superClass) {
    extend(Document, superClass);

    function Document() {
      return Document.__super__.constructor.apply(this, arguments);
    }

    Document.prototype.events = {
      'click .download_button': 'download'
    };

    Document.prototype.initialize = function() {
      var ref;
      ref = this.options, this.document_id = ref.document_id, this.document_secret = ref.document_secret;
      return this.$('.title, .description').dotdotdot({
        wrap: 'letter'
      });
    };

    Document.prototype.download = function(event) {
      return Scribd.Lightbox.remote_open('download_dialog', '/read/download_dialog', {
        id: this.document_id,
        secret_password: this.document_secret
      });
    };

    return Document;

  })(Backbone.View);

  Scribd.Payments.CheckoutFlow.New.Receipt.Document = Document;

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/redirect_to_paypal.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.NewPaymentsRedirectToPaypal = (function() {
    function NewPaymentsRedirectToPaypal(container, options) {
      if (options == null) {
        options = {};
      }
      options['redirect_timeout'] || (options['redirect_timeout'] = 200);
      this.container = $(container);
      this.container.track({
        action: "view",
        label: "redirect_to_paypal"
      });
      setTimeout((function() {
        return $('#paypal_form').submit();
      }), options['redirect_timeout']);
    }

    return NewPaymentsRedirectToPaypal;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/payments/checkout_flow/wait_for_paypal.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.PaymentsWaitForPaypal = (function() {
    function PaymentsWaitForPaypal(container, url, order_id) {
      this.container = $(container);
      this.url = url;
      this.order_id = order_id;
      this.message = $('#message');
      this.poll_interval = 5000;
      this.poller = setInterval(((function(_this) {
        return function() {
          return _this.run();
        };
      })(this)), this.poll_interval);
    }

    PaymentsWaitForPaypal.prototype.run = function() {
      return $.ajax({
        url: this.url,
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            return _this.update(data);
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR) {
            var status;
            status = jqXHR.status;
            if (status === 404) {
              _this.stop();
              return _this.message.html("Thank you for your purchase! We're sending you an email to help you access it. If you don't receive this email within 30 minutes, please contact support@scribd.com with Order ID " + _this.order_id + ". As a courtesy, please check your spam, junk, or similar folders before reporting non-receipt.").addClass('error');
            } else {
              return _this.message.html("Scribd is temporarily unavailable (" + status + "). Trying again...").addClass('error');
            }
          };
        })(this)
      });
    };

    PaymentsWaitForPaypal.prototype.update = function(data) {
      var next_url, state;
      state = data.state;
      next_url = data.next_url;
      if (state !== 'pending') {
        this.container.track({
          action: "xhr_success",
          label: "" + state
        });
      }
      switch (state) {
        case 'success':
          this.stop();
          this.message.html("Payment complete! Redirecting you now...");
          return window.location = next_url;
        case 'fail':
          this.stop();
          return this.message.html("Your PayPal transaction failed!").addClass('error');
        case 'not_found':
          this.stop();
          return this.message.html("Thank you for your purchase! We're sending you an email to help you access it. If you don't receive this email within 30 minutes, please contact support@scribd.com with Order ID " + this.order_id + ". As a courtesy, please check your spam, junk, or similar folders before reporting non-receipt.").addClass('error');
        case 'error':
          this.stop();
          return this.message.html("Unable to complete the payment! Your purchase did not complete -- you should visit PayPal.com and verify that your credit card has not been charged. If you need to contact Scribd Customer Support, please provide them the order ID " + this.order_id + ".");
      }
    };

    PaymentsWaitForPaypal.prototype.stop = function() {
      $('#spinner').hide();
      return clearInterval(this.poller);
    };

    return PaymentsWaitForPaypal;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

