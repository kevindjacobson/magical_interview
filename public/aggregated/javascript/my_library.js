/************************************************************************
 * 'my_library.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:13 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-15 19:39:42 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-08 22:43:32 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/filter.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Filter = (function() {
    function Filter(container, opts) {
      this.container = container;
      if (opts == null) {
        opts = {};
      }
      this.container = $(this.container);
      this.container.on("click", ".row:not(.selected)", (function(_this) {
        return function(e) {
          var val;
          $(document.body).trigger("scribd:close_hover_menus");
          val = $(e.target).attr('value');
          _this.render_value(val, $(e.currentTarget));
          _this.container.trigger("scribd:filter:" + opts.filter_name, {
            value: val,
            extra: $(e.target).data()
          });
          _this.container.find(".row").removeClass("selected");
          $(e.currentTarget).addClass("selected");
          return typeof callback === "function" ? callback(val) : void 0;
        };
      })(this));
    }

    Filter.prototype.render_value = function(val, row) {
      return this.container.find(".filter_label .current_value_text").text(row.text());
    };

    return Filter;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filtered_document_page.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.FilteredDocumentPage = (function() {
    function FilteredDocumentPage(container) {
      var filter_picker;
      this.container = $(container);
      filter_picker = this.container.find(".filter_picker");
      if (filter_picker.is(".open")) {
        this.container.find(".toggle_filters_btn").addClass("open");
      }
      this.container.on("click", ".toggle_filters_btn", (function(_this) {
        return function(e) {
          $(e.currentTarget).toggleClass("open");
          return filter_picker.slideToggle("fast");
        };
      })(this));
      this.container.find(".language_filter_picker").fancy_select();
      this.container.on("change", ".language_filter_picker", (function(_this) {
        return function(e) {
          return window.location = $(e.currentTarget).val();
        };
      })(this));
    }

    return FilteredDocumentPage;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/load_more.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.LoadMore = (function() {
    LoadMore.prototype.load_on_scroll = -1;

    LoadMore.prototype.clicked_once = true;

    function LoadMore(container, load_callback, _load_on_scroll) {
      var win;
      this.load_callback = load_callback;
      this.container = $(container);
      this.container.data("object", this);
      this.top = this.container.offset().top;
      if (_load_on_scroll != null) {
        this.load_on_scroll = _load_on_scroll;
      }
      if (this.load_on_scroll !== 0) {
        win = $(window);
        win.on("scroll.load_more_btn", (function(_this) {
          return function() {
            if (_this.loading || !_this.clicked_once || _this.container.is(".disabled")) {
              return;
            }
            if (win.scrollTop() + win.height() >= _this.top) {
              return _this.load_more(function(has_more) {
                _this.load_on_scroll -= 1;
                if (_this.load_on_scroll === 0 || !has_more) {
                  return win.off("scroll.load_more_btn");
                }
              });
            }
          };
        })(this));
      }
      this.container.on("click", (function(_this) {
        return function(e) {
          if ($(e.target).closest("a").length) {
            e.preventDefault();
          }
          _this.clicked_once = true;
          return _this.load_more();
        };
      })(this));
    }

    LoadMore.prototype.set_loading = function(loading) {
      this.loading = loading;
      this.container.toggleClass("loading", loading);
      return setTimeout((function(_this) {
        return function() {
          return _this.container.toggleClass("show_loader", _this.loading);
        };
      })(this), 10);
    };

    LoadMore.prototype.reset = function() {
      return this.enable();
    };

    LoadMore.prototype.enable = function() {
      return this.container.removeClass("no_more disabled");
    };

    LoadMore.prototype.disable = function() {
      return this.container.addClass("disabled");
    };

    LoadMore.prototype.load_more = function(callback) {
      if (this.container.is(".disabled,.loading")) {
        return false;
      }
      this.set_loading(true);
      return typeof this.load_callback === "function" ? this.load_callback((function(_this) {
        return function(has_more) {
          _this.top = _this.container.offset().top;
          _this.set_loading(false);
          if (typeof callback === "function") {
            callback.apply(null, arguments);
          }
          if (!has_more) {
            return _this.container.addClass("no_more disabled");
          }
        };
      })(this)) : void 0;
    };

    return LoadMore;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/grids/grouped_documents_grid.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.UI.GroupedDocumentsGrid = (function() {
    function GroupedDocumentsGrid(container, opts) {
      var load_more;
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.merge_grouped_grid = bind(this.merge_grouped_grid, this);
      this.clean_up_after_removal = bind(this.clean_up_after_removal, this);
      this.load_documents = bind(this.load_documents, this);
      this.container = $(this.container);
      this.params = {
        page: 1,
        grouping: this.opts.grouping || 'recency',
        reading_state: this.opts.state,
        full_access: this.opts.full_access
      };
      load_more = this.container.find(".load_more_btn");
      this.load_more = new Scribd.UI.LoadMore(load_more, (function(_this) {
        return function(done) {
          _this.params.page++;
          return _this.load_documents(done);
        };
      })(this));
      Scribd.UI.GroupedDocumentsGrid.instance = this;
      $(document).on("scribd:update_grouped_grid", (function(_this) {
        return function(v, e) {
          return _this.clean_up_after_removal();
        };
      })(this));
    }

    GroupedDocumentsGrid.prototype.load_documents = function(done, pre_callback) {
      return $.ajax({
        url: this.opts.more_url,
        data: this.params,
        type: "get",
        dataType: "json",
        success: (function(_this) {
          return function(res) {
            var $grouped_grid;
            if (res.grouped_grid) {
              $grouped_grid = $(res.grouped_grid);
              _this.container.removeClass(".loading_content");
              if (_this.params.page > 1) {
                if (typeof callback === "function") {
                  callback();
                }
                _this.merge_grouped_grid($grouped_grid);
              }
              if (res.has_more) {
                _this.load_more.enable();
              }
            }
            return typeof done === "function" ? done(res.has_more) : void 0;
          };
        })(this)
      }, true);
    };

    GroupedDocumentsGrid.prototype.clean_up_after_removal = function() {
      var $grid, grid, i, len, results, selectable_grids;
      selectable_grids = this.container.find(".autogen_class_views_shared_grids_selectable_document_grid");
      results = [];
      for (i = 0, len = selectable_grids.length; i < len; i++) {
        grid = selectable_grids[i];
        $grid = $(grid);
        if (!$grid.children().length) {
          $grid.prev().remove();
          results.push($grid.remove());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    GroupedDocumentsGrid.prototype.merge_grouped_grid = function($grid) {
      var $el, el, extracted_container, first_new_grid, first_new_script, first_new_title, i, last_group_grid, last_group_title, len, ref, results;
      extracted_container = $grid.children();
      first_new_title = $grid.find("h2").first();
      first_new_grid = $grid.find(".document_grid").first();
      first_new_script = $grid.find("script").first();
      last_group_title = this.container.find("h2").last();
      last_group_grid = this.container.find(".document_grid").last();
      if (first_new_title.text() === last_group_title.text()) {
        first_new_title.remove();
        first_new_grid.children().appendTo(last_group_grid);
        first_new_grid.remove();
        first_new_script.remove();
        if ((ref = last_group_grid.data("object")) != null) {
          ref.after_new_items_added();
        }
      }
      results = [];
      for (i = 0, len = extracted_container.length; i < len; i++) {
        el = extracted_container[i];
        $el = $(el);
        if ($el.is("h2.group_header")) {
          $el.insertBefore(this.container.find(".load_more"));
        }
        if ($el.is(".document_grid")) {
          if (this.container.find(".document_grid.edit_mode").length) {
            $el.addClass("edit_mode");
          }
          $el.insertBefore(this.container.find(".load_more"));
          results.push(new Scribd.SelectableDocumentGrid($el));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return GroupedDocumentsGrid;

  })();

  Scribd.UI.LowerMarginGrid = (function(superClass) {
    extend(LowerMarginGrid, superClass);

    function LowerMarginGrid() {
      return LowerMarginGrid.__super__.constructor.apply(this, arguments);
    }

    LowerMarginGrid.prototype.margin = 40;

    return LowerMarginGrid;

  })(Scribd.UI.ObjectGrid);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/grids/selectable_document_grid.coffee (last modified: 2016-06-07 22:23:07 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SelectableDocumentGrid = (function() {
    function SelectableDocumentGrid(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      new Scribd.UI.LowerMarginGrid(this.container, this.opts);
      this.container.on("click", ".select_layer", (function(_this) {
        return function(e) {
          var $el, bookmark_ids, i, ids, len, ref, ref1, selected_doc;
          $el = $(e.target);
          $el.closest(".select_layer").toggleClass("selected");
          ids = [];
          bookmark_ids = [];
          ref = _this.container.find(".select_layer.selected");
          for (i = 0, len = ref.length; i < len; i++) {
            selected_doc = ref[i];
            ids.push($(selected_doc).closest("[data-object_id]").data("object_id"));
            bookmark_ids.push((ref1 = $(selected_doc).closest("[data-my_library_data]").data("my_library_data")) != null ? ref1.bookmark_id : void 0);
          }
          $(document).trigger("scribd:selectable_document_grid:selection", {
            ids: ids,
            bookmark_ids: bookmark_ids,
            grid_id: _this.container.attr("id")
          });
          e.preventDefault();
          return e.stopPropagation();
        };
      })(this));
    }

    return SelectableDocumentGrid;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/search_input.coffee (last modified: 2016-01-21 00:24:17 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SearchInput = (function() {
    function SearchInput(container) {
      this.container = container;
      this.container = $(this.container);
      this.container.dispatch("click", {
        close_search: (function(_this) {
          return function() {
            _this.container.removeClass("open");
            _this.trigger("close");
            return "continue";
          };
        })(this),
        open_search: (function(_this) {
          return function() {
            _this.container.addClass("open");
            _this.container.find(".search_controls input").focus();
            _this.trigger("open");
            return "continue";
          };
        })(this)
      });
      this.container.find(".search_controls").on("ajax:success", (function(_this) {
        return function(e, v) {
          return _this.trigger("results", v);
        };
      })(this));
    }

    SearchInput.prototype.trigger = function(event_name, value) {
      return $(document).trigger("scribd:search_input:" + event_name, value);
    };

    return SearchInput;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_library/show.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.MyLibrary = (function() {
    MyLibrary.prototype.states_text = {
      0: "saved",
      1: "reading",
      2: "finished",
      "0": "saved",
      "1": "reading",
      "2": "finished"
    };

    function MyLibrary(container, opts) {
      this.container = container;
      this.opts = opts;
      this.load_group_document_grid = bind(this.load_group_document_grid, this);
      this.scroll_to_tab = bind(this.scroll_to_tab, this);
      this.setup_edit_events = bind(this.setup_edit_events, this);
      this.toggle_edit_mode = bind(this.toggle_edit_mode, this);
      this.toggle_edit_availability = bind(this.toggle_edit_availability, this);
      this.setup_events = bind(this.setup_events, this);
      this.container = $(this.container);
      this.params = {
        page: 1,
        grouping: this.opts.default_sort || 'recency',
        reading_state: this.opts.state,
        is_pmp: null,
        full_access: false
      };
      this.edit_menu = this.container.find(".floating_library_header .edit_menu");
      this.container.find(".floating_library_header").stick_in_parent({
        parent: this.container,
        offset_top: Scribd.Header.prototype.height,
        bottoming: false
      });
      this.setup_events();
      this.container.find(".search_input").focus();
      this.content_holder = this.container.find(".content_holder");
    }

    MyLibrary.prototype.setup_events = function() {
      $(document).on("scribd:collections_update", (function(_this) {
        return function(e, v) {
          return $.get("/library/collections", function(resp) {
            if (resp.widget) {
              return _this.container.find(".collection_holder").html($(resp.widget));
            }
          });
        };
      })(this));
      $(document).on("scribd:removed_bookmark", (function(_this) {
        return function(event, data) {
          var i, id, ids, len, ref, ref1, selectors;
          if ((ref = Scribd.hovercards.current_cell) != null) {
            if ((ref1 = ref.data("hovercard")) != null) {
              ref1.hide();
            }
          }
          ids = _.isArray(data.document_id) ? data.document_id : [data.document_id];
          selectors = [];
          for (i = 0, len = ids.length; i < len; i++) {
            id = ids[i];
            selectors.push(".document_cell[data-object_id=" + id + "]");
          }
          _this.container.find(selectors.join(",")).remove();
          return _this.container.trigger("scribd:collections_update");
        };
      })(this));
      $(document).on("scribd:filter:sort", (function(_this) {
        return function(e, v) {
          if (_this.params.grouping !== v.value) {
            _this.params.grouping = v.value;
            _this.params.page = 1;
            _this.container.find(".content_and_edit").addClass("loading");
            _this.container.track({
              action: "click",
              params: "sort:" + v.value
            });
            return _this.load_group_document_grid();
          }
        };
      })(this));
      $(document).on("scribd:filter:content_type", (function(_this) {
        return function(e, v) {
          if (_this.params.is_pmp !== v.value) {
            _this.params.page = 1;
            _this.params.is_pmp = v.value;
            _this.container.find(".content_and_edit").addClass("loading");
            return _this.load_group_document_grid();
          }
        };
      })(this));
      $(document).on("scribd:update_grouped_grid", (function(_this) {
        return function() {
          if (!_this.container.find(".autogen_class_views_shared_grids_selectable_document_grid").length) {
            return _this.load_group_document_grid();
          }
        };
      })(this));
      $(document).on("scribd:search_input:open", (function(_this) {
        return function() {
          return _this.toggle_edit_availability();
        };
      })(this));
      $(document).on("scribd:search_input:close", (function(_this) {
        return function() {
          _this.content_holder.children().show();
          _this.container.find(".search_results_partial").remove();
          if (!_this.container.find(".no_results_partial").length) {
            return _this.toggle_edit_availability(true);
          }
        };
      })(this));
      $(document).on("scribd:search_input:results", (function(_this) {
        return function(e, values) {
          var cols, header_h;
          _this.content_holder.children().hide();
          _this.content_holder.append($(values.widget));
          _this.container.find(".content_and_edit").removeClass("loading");
          cols = _this.container.find(".collections");
          header_h = $(".sticky_header").height();
          return $(window).scrollTop(cols.offset().top - cols.height() - header_h);
        };
      })(this));
      this.container.on("scribd:update_my_library_state", (function(_this) {
        return function(e, action) {
          if (action === "remove") {
            return $(e.target).fadeOut(function() {
              $(e.target).remove();
              return _this.container.trigger("scribd:update_grouped_grid");
            });
          }
        };
      })(this));
      this.container.dispatch("click", {
        tab: (function(_this) {
          return function($el) {
            var full_access, ref;
            if (!$el.is("current")) {
              full_access = ((ref = _this.container.find("input[name=full_access_only]")[0]) != null ? ref.checked : void 0) ? 1 : 0;
              $el.track_rats("library:" + ($el.data("track").split(":").pop()) + ":click", {
                full_access: full_access
              });
            }
            if ($el.is(".disabled")) {
              return;
            }
            if (_this.params.reading_state !== $el.data("state")) {
              _this.params.reading_state = $el.data("state");
              _this.params.page = 1;
              _this.container.find(".content_and_edit").addClass("loading");
              _this.container.find(".tab").removeClass("current");
              $el.addClass("current");
              _this.load_group_document_grid();
              return "continue";
            }
          };
        })(this)
      });
      this.container.find(".search_controls").on("ajax:beforeSend", (function(_this) {
        return function(e, v) {
          return _this.container.find(".content_and_edit").addClass("loading");
        };
      })(this));
      return this.setup_edit_events();
    };

    MyLibrary.prototype.toggle_edit_availability = function(activate) {
      var full_access;
      full_access = this.container.find(".full_access_only");
      if (activate) {
        this.container.find(".filter").removeClass("disabled");
        this.container.find(".edit_button").prop("disabled", false);
        return full_access.removeClass("disabled");
      } else {
        this.container.find(".filter").addClass("disabled");
        this.container.find(".edit_button").prop("disabled", true);
        if (!full_access.find("input")[0].checked) {
          return full_access.addClass("disabled");
        }
      }
    };

    MyLibrary.prototype.toggle_edit_mode = function(activate) {
      if (activate == null) {
        activate = true;
      }
      if (activate) {
        this.container.addClass("edit_mode");
        this.container.find(".tab_nav, .filter").addClass("disabled");
        this.container.find(".document_grid").addClass("edit_mode");
        $(document).trigger("scribd:selectable_document_grid:selection", {
          ids: [],
          clear_selection: true
        });
        this.edit_menu.find(".library_status").attr("data-active_state", this.params.reading_state != null ? this.params.reading_state : "");
        return this.edit_menu.fadeIn();
      } else {
        this.container.removeClass("edit_mode");
        this.container.find(".tab_nav, .filter").removeClass("disabled");
        this.container.find(".document_grid").removeClass("edit_mode");
        this.edit_menu.fadeOut();
        return $(document).trigger("scribd:selectable_document_grid:selection", {
          ids: [],
          clear_selection: true
        });
      }
    };

    MyLibrary.prototype.setup_edit_events = function() {
      $(document).on("scribd:collection_lightbox:add_documents", (function(_this) {
        return function() {
          return _this.toggle_edit_mode(false);
        };
      })(this));
      $(document).on("scribd:selectable_document_grid:selection", (function(_this) {
        return function(e, val) {
          var data, n_items;
          n_items = _this.edit_menu.find(".n_items");
          data = n_items.data("object_ids");
          data || (data = {});
          data.ids_by_grid || (data.ids_by_grid = {});
          if (val.clear_selection) {
            _this.container.find(".select_layer.selected").toggleClass("selected");
            data.ids_by_grid = {};
          }
          data.ids_by_grid[val.grid_id] = val.ids;
          data.ids = _.uniq(_.flatten(_.values(data.ids_by_grid)));
          n_items.data("object_ids", data);
          n_items.text(data.ids.length);
          if (val.ids.length === 0) {
            return _this.container.find(".disable_without_selection").addClass("disabled").prop("disabled", true);
          } else {
            return _this.container.find(".disable_without_selection").removeClass("disabled").prop("disabled", false);
          }
        };
      })(this));
      this.container.dispatch("click", {
        doc_link: (function(_this) {
          return function() {
            if (!_this.container.hasClass("edit_mode")) {
              return "continue";
            }
          };
        })(this),
        full_access_only: (function(_this) {
          return function(target, event) {
            if (target.is(".disabled")) {
              return false;
            }
            _this.params.full_access = target.find("input")[0].checked;
            Scribd.UI.GroupedDocumentsGrid.instance.params.full_access = _this.params.full_access;
            _this.container.find(".content_and_edit").addClass("loading");
            return _this.load_group_document_grid();
          };
        })(this),
        edit_button: (function(_this) {
          return function($el) {
            if ($el.is(":disabled")) {
              return;
            }
            _this.toggle_edit_mode(true);
            return "continue";
          };
        })(this),
        done_editing_button: (function(_this) {
          return function() {
            return _this.toggle_edit_mode(false);
          };
        })(this),
        select_all_action: (function(_this) {
          return function() {
            var n_items, unselected;
            n_items = _this.edit_menu.find(".n_items");
            unselected = _this.container.find(".select_layer:not(.selected)");
            return unselected.click();
          };
        })(this),
        clear_action: (function(_this) {
          return function() {
            var n_items;
            n_items = _this.edit_menu.find(".n_items");
            return _this.container.find(".select_layer.selected").click();
          };
        })(this),
        bulk_remove_from_library: (function(_this) {
          return function($el) {
            var ids, lb;
            if ($el.is(":disabled")) {
              return;
            }
            ids = _this.edit_menu.find(".n_items").data("object_ids").ids;
            lb = Scribd.Lightbox.open('confirm_lightbox', Scribd.ConfirmLightbox);
            if (ids.length > 1) {
              lb.set_template("multiple_remove_from_library", {
                title: "Remove " + ids.length + " books from your Library?"
              });
            } else {
              lb.set_template("remove_from_library", {
                title: "Remove 1 book from your Library?"
              });
            }
            return lb.set_confirm_callback(function() {
              var complete_cbk;
              ids = _this.edit_menu.find(".n_items").data("object_ids").ids;
              complete_cbk = function() {
                var i, id, len, selector;
                selector = [];
                for (i = 0, len = ids.length; i < len; i++) {
                  id = ids[i];
                  selector.push("[data-object_id=" + id + "]");
                }
                selector = selector.join(",");
                return _this.container.find(selector).fadeOut(function() {
                  _this.container.find(selector).remove();
                  $(document).trigger("scribd:update_grouped_grid");
                  return _this.toggle_edit_mode(false);
                });
              };
              return Scribd.Bookmarks.remove_bookmark(ids, {
                complete: complete_cbk
              });
            });
          };
        })(this),
        add_to_collection_btn: (function(_this) {
          return function($el) {
            var ids;
            if ($el.is(":disabled")) {
              return;
            }
            ids = _this.edit_menu.find(".n_items").data("object_ids").ids;
            return Scribd.AddToCollectionLightbox.remote_open(ids);
          };
        })(this),
        create_collection: (function(_this) {
          return function($el) {
            if ($el.is(":disabled")) {
              return;
            }
            return Scribd.CreateCollectionLightbox.remote_open();
          };
        })(this),
        library_actions: (function(_this) {
          return function($ele, ev) {
            var $el, future_state, ids, lb, pluralized_books;
            $el = $(ev.target).closest("button");
            if ($el.is(".disabled")) {
              return;
            }
            future_state = $el.data("state");
            ids = _this.edit_menu.find(".n_items").data("object_ids").ids;
            lb = Scribd.Lightbox.open('confirm_lightbox', Scribd.ConfirmLightbox);
            pluralized_books = ids.length > 1 ? "books" : "book";
            lb.set_template("change_library_state", {
              title: "Mark " + ids.length + " " + pluralized_books + " as " + _this.states_text[future_state] + "?",
              confirm_text: "Doing so will remove these books from " + _this.states_text[_this.params.reading_state] + " books."
            });
            return lb.set_confirm_callback(function() {
              var data;
              data = {
                document_ids: ids,
                state: $el.data("state")
              };
              return Scribd.Bookmarks.update_bookmarks_states(data, {
                complete: function() {
                  var i, id, len, selector;
                  selector = [];
                  for (i = 0, len = ids.length; i < len; i++) {
                    id = ids[i];
                    selector.push("[data-object_id=" + id + "]");
                  }
                  selector = selector.join(",");
                  return _this.container.find(selector).fadeOut(function() {
                    _this.container.find(selector).remove();
                    $(document).trigger("scribd:update_grouped_grid");
                    return _this.toggle_edit_mode(false);
                  });
                }
              });
            });
          };
        })(this)
      });
      return $(document).on("scribd:updated_bookmarks", (function(_this) {
        return function(e, data) {
          var doc_data, i, len, reading_state_data, reading_states, results;
          if (data.response) {
            reading_states = data.response.responseJSON.reading_states;
            results = [];
            for (i = 0, len = reading_states.length; i < len; i++) {
              reading_state_data = reading_states[i];
              doc_data = _this.container.find("[data-object_id=" + reading_state_data.id + "]");
              results.push(doc_data.data("my_library_data", reading_state_data));
            }
            return results;
          }
        };
      })(this));
    };

    MyLibrary.prototype.scroll_to_tab = function() {
      var top_position;
      top_position = this.container.find(".floating_library_header").offset().top - Scribd.Header.prototype.height;
      if (top_position < $(window).scrollTop()) {
        return $(window).scrollTop(top_position);
      }
    };

    MyLibrary.prototype.load_group_document_grid = function(done, pre_callback) {
      return $.ajax({
        url: this.opts.more_url,
        data: this.params,
        type: "get",
        dataType: "json",
        success: (function(_this) {
          return function(res) {
            var $grouped_grid;
            if (res.no_results_widget) {
              _this.container.find(".content_and_edit").removeClass("loading");
              _this.container.find(".content_holder").html($(res.no_results_widget));
              _this.toggle_edit_availability();
              _this.scroll_to_tab();
            }
            if (res.grouped_grid) {
              $grouped_grid = $(res.grouped_grid);
              _this.container.find(".content_and_edit").removeClass("loading");
              _this.container.find(".content_holder").html($grouped_grid);
              _this.toggle_edit_availability(true);
              _this.scroll_to_tab();
            }
            return typeof done === "function" ? done(res.has_more) : void 0;
          };
        })(this)
      }, true);
    };

    return MyLibrary;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

