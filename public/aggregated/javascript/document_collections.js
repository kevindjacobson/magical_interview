/************************************************************************
 * 'document_collections.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:12 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-15 19:39:42 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-08 22:43:32 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/_numbered_paginator.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var NumberedPaginator, base, no_default,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  no_default = Scribd.no_default;

  NumberedPaginator = (function(superClass) {
    var base_page;

    extend(NumberedPaginator, superClass);

    function NumberedPaginator() {
      return NumberedPaginator.__super__.constructor.apply(this, arguments);
    }

    NumberedPaginator.prototype.events = {
      'click .page': 'click_page_link',
      'click .ellipsis': 'click_page_link',
      'click .previous': 'previous_page',
      'click .next': 'next_page',
      'click .selected a': function() {
        return false;
      }
    };

    base_page = null;

    NumberedPaginator.prototype.initialize = function() {
      this.current_page = 1;
      this.max_pages = 11;
      this.page_count = null;
      this.pages = this.$('.pages');
      this.previous = this.$('.previous');
      this.next = this.$('.next');
      return base_page != null ? base_page : base_page = $('.page').remove().removeClass('hidden');
    };

    NumberedPaginator.prototype.update_page_count = function(page_count) {
      this.page_count = page_count;
      if (this.page_count > 1) {
        this.$el.show();
      } else {
        this.$el.hide();
      }
      this.stop_loading();
      return this.render();
    };

    NumberedPaginator.prototype.render = function() {
      this.render_page_links();
      this.render_buttons();
      return this.render_selected_page();
    };

    NumberedPaginator.prototype.render_page_links = function() {
      var links;
      this.pages.empty();
      links = this.page_count > this.max_pages ? this.partial_page_links() : this.all_page_links();
      return this.pages.append(links);
    };

    NumberedPaginator.prototype.visible_pages = function() {
      return _.map(this.pages.find('.page a'), (function(_this) {
        return function(link) {
          return $(link).data('page');
        };
      })(this));
    };

    NumberedPaginator.prototype.partial_page_links = function() {
      var end, i, mid, pages, range, start;
      range = this.partial_page_range();
      pages = _.map(range, (function(_this) {
        return function(n) {
          return _this.page_link(n);
        };
      })(this));
      start = range[0], mid = 3 <= range.length ? slice.call(range, 1, i = range.length - 1) : (i = 1, []), end = range[i++];
      return _.compact([start !== 1 ? this.ellipsis(Math.max(1, start - this.side_pages() - 1)) : void 0].concat(slice.call(pages), [end !== this.page_count ? this.ellipsis(Math.min(this.page_count, end + this.side_pages() + 1)) : void 0]));
    };

    NumberedPaginator.prototype.side_pages = function() {
      return Math.floor(this.max_pages / 2);
    };

    NumberedPaginator.prototype.partial_page_range = function() {
      var end, i, j, k, last, range, ref, ref1, results, results1, results2, start;
      start = Math.max(1, this.current_page - this.side_pages() + 1);
      end = Math.min(this.page_count, this.current_page + this.side_pages());
      range = (function() {
        results = [];
        for (var i = start; start <= end ? i <= end : i >= end; start <= end ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this);
      if (range.length === this.max_pages) {
        return range;
      } else {
        if (_.first(range) === 1) {
          return (function() {
            results1 = [];
            for (var j = 1, ref = this.max_pages - 1; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--){ results1.push(j); }
            return results1;
          }).apply(this);
        } else {
          last = _.last(range);
          return (function() {
            results2 = [];
            for (var k = ref1 = last - this.max_pages + 1; ref1 <= last ? k <= last : k >= last; ref1 <= last ? k++ : k--){ results2.push(k); }
            return results2;
          }).apply(this);
        }
      }
    };

    NumberedPaginator.prototype.all_page_links = function() {
      var i, ref, results;
      return _.map((function() {
        results = [];
        for (var i = 1, ref = this.page_count; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this), (function(_this) {
        return function(n) {
          return _this.page_link(n);
        };
      })(this));
    };

    NumberedPaginator.prototype.ellipsis = function(data) {
      return this.page_link('...', data).addClass('ellipsis').removeClass('page');
    };

    NumberedPaginator.prototype.page_link = function(text, data) {
      var $page;
      if (data == null) {
        data = null;
      }
      if (data == null) {
        data = +text;
      }
      $page = base_page.clone();
      $page.find('a').html(text).data('page', data);
      return $page;
    };

    NumberedPaginator.prototype.click_page_link = no_default(function(event) {
      var $link;
      $link = $(event.currentTarget).find('a');
      return this.update_current_page($link.data('page'));
    });

    NumberedPaginator.prototype.update_current_page = function(new_page, trigger) {
      var old_page;
      if (trigger == null) {
        trigger = true;
      }
      old_page = this.current_page;
      this.current_page = new_page;
      if (trigger) {
        this.trigger('change_page', this.current_page);
        this.stop_loading();
        if (new_page < old_page) {
          this.previous.addClass('loading');
        } else {
          this.next.addClass('loading');
        }
      }
      return this.render();
    };

    NumberedPaginator.prototype.render_buttons = function() {
      var is_first_page, is_last_page;
      is_first_page = this.current_page <= 1;
      is_last_page = this.current_page >= this.page_count;
      this.previous.css('visibility', (is_first_page ? 'hidden' : 'visible'));
      return this.next.css('visibility', (is_last_page ? 'hidden' : 'visible'));
    };

    NumberedPaginator.prototype.render_selected_page = function() {
      var current_page, selected;
      this.pages.find('li.selected').removeClass('selected');
      current_page = this.current_page;
      return selected = this.pages.find('a').filter(function() {
        return +$(this).data('page') === current_page;
      }).parent().addClass('selected');
    };

    NumberedPaginator.prototype.stop_loading = function() {
      return this.previous.add(this.next).removeClass('loading');
    };

    NumberedPaginator.prototype.previous_page = no_default(function(event) {
      return this.update_current_page(this.current_page - 1);
    });

    NumberedPaginator.prototype.next_page = no_default(function(event) {
      return this.update_current_page(this.current_page + 1);
    });

    NumberedPaginator.prototype.hide = function() {
      return this.$el.hide();
    };

    NumberedPaginator.prototype.show = function() {
      return this.$el.show();
    };

    return NumberedPaginator;

  })(Backbone.View);

  Scribd.Shared || (Scribd.Shared = {});

  Scribd.Shared.NumberedPaginator = NumberedPaginator;

  (base = Scribd.Shared).ContentList || (base.ContentList = {});

  Scribd.Shared.ContentList.NumberedPaginator = NumberedPaginator;

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filter.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Filter = (function() {
    function Filter(container, opts) {
      this.container = container;
      if (opts == null) {
        opts = {};
      }
      this.container = $(this.container);
      this.container.on("click", ".row:not(.selected)", (function(_this) {
        return function(e) {
          var val;
          $(document.body).trigger("scribd:close_hover_menus");
          val = $(e.target).attr('value');
          _this.render_value(val, $(e.currentTarget));
          _this.container.trigger("scribd:filter:" + opts.filter_name, {
            value: val,
            extra: $(e.target).data()
          });
          _this.container.find(".row").removeClass("selected");
          $(e.currentTarget).addClass("selected");
          return typeof callback === "function" ? callback(val) : void 0;
        };
      })(this));
    }

    Filter.prototype.render_value = function(val, row) {
      return this.container.find(".filter_label .current_value_text").text(row.text());
    };

    return Filter;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filtered_document_page.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.FilteredDocumentPage = (function() {
    function FilteredDocumentPage(container) {
      var filter_picker;
      this.container = $(container);
      filter_picker = this.container.find(".filter_picker");
      if (filter_picker.is(".open")) {
        this.container.find(".toggle_filters_btn").addClass("open");
      }
      this.container.on("click", ".toggle_filters_btn", (function(_this) {
        return function(e) {
          $(e.currentTarget).toggleClass("open");
          return filter_picker.slideToggle("fast");
        };
      })(this));
      this.container.find(".language_filter_picker").fancy_select();
      this.container.on("change", ".language_filter_picker", (function(_this) {
        return function(e) {
          return window.location = $(e.currentTarget).val();
        };
      })(this));
    }

    return FilteredDocumentPage;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/load_more.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.LoadMore = (function() {
    LoadMore.prototype.load_on_scroll = -1;

    LoadMore.prototype.clicked_once = true;

    function LoadMore(container, load_callback, _load_on_scroll) {
      var win;
      this.load_callback = load_callback;
      this.container = $(container);
      this.container.data("object", this);
      this.top = this.container.offset().top;
      if (_load_on_scroll != null) {
        this.load_on_scroll = _load_on_scroll;
      }
      if (this.load_on_scroll !== 0) {
        win = $(window);
        win.on("scroll.load_more_btn", (function(_this) {
          return function() {
            if (_this.loading || !_this.clicked_once || _this.container.is(".disabled")) {
              return;
            }
            if (win.scrollTop() + win.height() >= _this.top) {
              return _this.load_more(function(has_more) {
                _this.load_on_scroll -= 1;
                if (_this.load_on_scroll === 0 || !has_more) {
                  return win.off("scroll.load_more_btn");
                }
              });
            }
          };
        })(this));
      }
      this.container.on("click", (function(_this) {
        return function(e) {
          if ($(e.target).closest("a").length) {
            e.preventDefault();
          }
          _this.clicked_once = true;
          return _this.load_more();
        };
      })(this));
    }

    LoadMore.prototype.set_loading = function(loading) {
      this.loading = loading;
      this.container.toggleClass("loading", loading);
      return setTimeout((function(_this) {
        return function() {
          return _this.container.toggleClass("show_loader", _this.loading);
        };
      })(this), 10);
    };

    LoadMore.prototype.reset = function() {
      return this.enable();
    };

    LoadMore.prototype.enable = function() {
      return this.container.removeClass("no_more disabled");
    };

    LoadMore.prototype.disable = function() {
      return this.container.addClass("disabled");
    };

    LoadMore.prototype.load_more = function(callback) {
      if (this.container.is(".disabled,.loading")) {
        return false;
      }
      this.set_loading(true);
      return typeof this.load_callback === "function" ? this.load_callback((function(_this) {
        return function(has_more) {
          _this.top = _this.container.offset().top;
          _this.set_loading(false);
          if (typeof callback === "function") {
            callback.apply(null, arguments);
          }
          if (!has_more) {
            return _this.container.addClass("no_more disabled");
          }
        };
      })(this)) : void 0;
    };

    return LoadMore;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/pmp_promo_banner.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.PmpPromoBanner = (function() {
    function PmpPromoBanner(container, page_name) {
      this.page_name = page_name;
      this.container = $(container);
      this.container.dispatch("click", {
        start_trial_button: (function(_this) {
          return function($el, ev) {
            if (Scribd.logged_in) {
              _this.track_click();
              return "continue";
            }
            ev.preventDefault();
            return Scribd.SignIn.open("subscribe", $el.attr("href"));
          };
        })(this)
      });
    }

    PmpPromoBanner.prototype.track_click = function() {
      return this.container.track({
        category: "pmp_promo_banner:" + this.page_name + "_page",
        action: 'click',
        label: 'start_trial_button'
      });
    };

    return PmpPromoBanner;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/grids/grouped_documents_grid.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.UI.GroupedDocumentsGrid = (function() {
    function GroupedDocumentsGrid(container, opts) {
      var load_more;
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.merge_grouped_grid = bind(this.merge_grouped_grid, this);
      this.clean_up_after_removal = bind(this.clean_up_after_removal, this);
      this.load_documents = bind(this.load_documents, this);
      this.container = $(this.container);
      this.params = {
        page: 1,
        grouping: this.opts.grouping || 'recency',
        reading_state: this.opts.state,
        full_access: this.opts.full_access
      };
      load_more = this.container.find(".load_more_btn");
      this.load_more = new Scribd.UI.LoadMore(load_more, (function(_this) {
        return function(done) {
          _this.params.page++;
          return _this.load_documents(done);
        };
      })(this));
      Scribd.UI.GroupedDocumentsGrid.instance = this;
      $(document).on("scribd:update_grouped_grid", (function(_this) {
        return function(v, e) {
          return _this.clean_up_after_removal();
        };
      })(this));
    }

    GroupedDocumentsGrid.prototype.load_documents = function(done, pre_callback) {
      return $.ajax({
        url: this.opts.more_url,
        data: this.params,
        type: "get",
        dataType: "json",
        success: (function(_this) {
          return function(res) {
            var $grouped_grid;
            if (res.grouped_grid) {
              $grouped_grid = $(res.grouped_grid);
              _this.container.removeClass(".loading_content");
              if (_this.params.page > 1) {
                if (typeof callback === "function") {
                  callback();
                }
                _this.merge_grouped_grid($grouped_grid);
              }
              if (res.has_more) {
                _this.load_more.enable();
              }
            }
            return typeof done === "function" ? done(res.has_more) : void 0;
          };
        })(this)
      }, true);
    };

    GroupedDocumentsGrid.prototype.clean_up_after_removal = function() {
      var $grid, grid, i, len, results, selectable_grids;
      selectable_grids = this.container.find(".autogen_class_views_shared_grids_selectable_document_grid");
      results = [];
      for (i = 0, len = selectable_grids.length; i < len; i++) {
        grid = selectable_grids[i];
        $grid = $(grid);
        if (!$grid.children().length) {
          $grid.prev().remove();
          results.push($grid.remove());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    GroupedDocumentsGrid.prototype.merge_grouped_grid = function($grid) {
      var $el, el, extracted_container, first_new_grid, first_new_script, first_new_title, i, last_group_grid, last_group_title, len, ref, results;
      extracted_container = $grid.children();
      first_new_title = $grid.find("h2").first();
      first_new_grid = $grid.find(".document_grid").first();
      first_new_script = $grid.find("script").first();
      last_group_title = this.container.find("h2").last();
      last_group_grid = this.container.find(".document_grid").last();
      if (first_new_title.text() === last_group_title.text()) {
        first_new_title.remove();
        first_new_grid.children().appendTo(last_group_grid);
        first_new_grid.remove();
        first_new_script.remove();
        if ((ref = last_group_grid.data("object")) != null) {
          ref.after_new_items_added();
        }
      }
      results = [];
      for (i = 0, len = extracted_container.length; i < len; i++) {
        el = extracted_container[i];
        $el = $(el);
        if ($el.is("h2.group_header")) {
          $el.insertBefore(this.container.find(".load_more"));
        }
        if ($el.is(".document_grid")) {
          if (this.container.find(".document_grid.edit_mode").length) {
            $el.addClass("edit_mode");
          }
          $el.insertBefore(this.container.find(".load_more"));
          results.push(new Scribd.SelectableDocumentGrid($el));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return GroupedDocumentsGrid;

  })();

  Scribd.UI.LowerMarginGrid = (function(superClass) {
    extend(LowerMarginGrid, superClass);

    function LowerMarginGrid() {
      return LowerMarginGrid.__super__.constructor.apply(this, arguments);
    }

    LowerMarginGrid.prototype.margin = 40;

    return LowerMarginGrid;

  })(Scribd.UI.ObjectGrid);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/grids/selectable_document_grid.coffee (last modified: 2016-06-07 22:23:07 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SelectableDocumentGrid = (function() {
    function SelectableDocumentGrid(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      new Scribd.UI.LowerMarginGrid(this.container, this.opts);
      this.container.on("click", ".select_layer", (function(_this) {
        return function(e) {
          var $el, bookmark_ids, i, ids, len, ref, ref1, selected_doc;
          $el = $(e.target);
          $el.closest(".select_layer").toggleClass("selected");
          ids = [];
          bookmark_ids = [];
          ref = _this.container.find(".select_layer.selected");
          for (i = 0, len = ref.length; i < len; i++) {
            selected_doc = ref[i];
            ids.push($(selected_doc).closest("[data-object_id]").data("object_id"));
            bookmark_ids.push((ref1 = $(selected_doc).closest("[data-my_library_data]").data("my_library_data")) != null ? ref1.bookmark_id : void 0);
          }
          $(document).trigger("scribd:selectable_document_grid:selection", {
            ids: ids,
            bookmark_ids: bookmark_ids,
            grid_id: _this.container.attr("id")
          });
          e.preventDefault();
          return e.stopPropagation();
        };
      })(this));
    }

    return SelectableDocumentGrid;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/document_collections/_form.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.UI.CollectionForm = (function() {
    function CollectionForm(container) {
      this.container = container;
      this.setup_character_limits = bind(this.setup_character_limits, this);
      this.container = $(this.container);
      this.setup_character_limits();
      this.container.on("click", ".delete_collection_btn", (function(_this) {
        return function(e) {
          var $el, lb;
          $el = $(e.target).closest("button");
          lb = Scribd.Lightbox.open('confirm_lightbox', Scribd.ConfirmLightbox).set_confirm_callback(function() {
            var remove_from_library;
            remove_from_library = lb.container.find("input").is(":checked");
            return Scribd.Shared.CollectionAPI.delete_collection($el.data("id"), {
              data: {
                remove_from_library: remove_from_library
              },
              complete: function(resp) {
                return window.location.href = "https://sbx.scribd.com/library";
              }
            });
          });
          if ($el.data("empty_collection")) {
            return lb.set_template("delete_empty_collection", {
              title: "Delete '" + ($el.data('title')) + "'?"
            });
          } else {
            return lb.set_template("delete_collection", {
              title: "Delete '" + ($el.data('title')) + "'?"
            });
          }
        };
      })(this));
      this.container.on("ajax:success", (function(_this) {
        return function(e, res) {
          return $(document).trigger("scribd:collections_update", {
            event: e,
            response: res
          });
        };
      })(this));
      this.container.on("click", ".input_trigger", (function(_this) {
        return function() {
          return _this.container.find(".privacy_input").toggleClass("private").toggleClass("public");
        };
      })(this));
    }

    CollectionForm.prototype.setup_character_limits = function() {
      this.container.on("input", "input", (function(_this) {
        return function(e) {
          return _this.update_max_characters();
        };
      })(this));
      return this.container.find("textarea").on("input propertychange", (function(_this) {
        return function(e) {
          return _this.update_max_characters();
        };
      })(this));
    };

    CollectionForm.prototype.update_max_characters = function() {
      var des_remaining, el, remaining, txt;
      el = this.container.find("[data-max_characters_name]");
      remaining = el.data("max_characters_name") - this.container.find(".collection_name input").val().length;
      el.text(remaining + " remaining");
      el = this.container.find("[data-max_characters_description]");
      txt = this.container.find("textarea").val();
      des_remaining = el.data("max_characters_description") - txt.length - txt.replace(/[^\n]/g, '').length;
      el.text(des_remaining + " remaining");
      return this.container.find("div.collection_description").html(txt);
    };

    return CollectionForm;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/document_collections/lightbox/_add_document.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  window.Scribd || (window.Scribd = {});

  Scribd.CollectionEdit || (Scribd.CollectionEdit = {});

  Scribd.CollectionEdit.AddDocument = (function() {
    function AddDocument(container) {
      this.container = $(container);
      this.collection_id = this.container.data("collection_id");
      this.update_container();
    }

    AddDocument.prototype.update_container = function() {
      this.template = this.container.find('#tpl_document_preview').text();
      this.container.find('.document_selector').change(_.bind(this.selector_changed, this));
      this.container.find('.document_search_url').change(_.bind(this.search_document, this));
      this.container.find(".document_search_url").on('paste', (function(_this) {
        return function() {
          return _.debounce(function() {
            return _this.container.find('.document_search_url').trigger("change");
          });
        };
      })(this));
      this.container.find('.document_search_url').on('keypress', (function(_this) {
        return function() {
          clearTimeout(_this.timeout);
          return _this.timeout = setTimeout(function() {
            return _this.container.find('.document_search_url').trigger("change");
          }, 1500);
        };
      })(this));
      return this.container.dispatch("click", {
        cancel: (function(_this) {
          return function() {
            return _this.close();
          };
        })(this),
        commit_document: (function(_this) {
          return function() {
            _this.commit_document();
            return false;
          };
        })(this)
      });
    };

    AddDocument.prototype.commit_document = function() {
      return this.add_to_collection();
    };

    AddDocument.prototype.close = function() {
      this.container.find('.document_search_url').val('');
      this.reset();
      return Scribd.Lightbox.close();
    };

    AddDocument.prototype.reset = function() {
      this.document = null;
      this.container.find('.document_preview').hide().empty();
      this.container.find('.by_select, .by_link, .or').show();
      this.container.find('.commit_document').prop("disabled", true);
      this.container.find('.by_select select').prop('selectedIndex', 0);
      return this.show_error(null);
    };

    AddDocument.prototype.add_to_collection = function() {
      if (this.document) {
        return $.post("/document_collections/" + this.collection_id + "/add_document", {
          document_id: this.document.id
        }).success((function(_this) {
          return function() {
            _this.container.trigger('scribd:document_add', _this.document);
            return _this.close();
          };
        })(this));
      }
    };

    AddDocument.prototype.selector_changed = function(e) {
      var document_id;
      document_id = $(e.currentTarget).val();
      if (document_id) {
        return this.load_document(document_id);
      }
    };

    AddDocument.prototype.show_error = function(text) {
      this.container.toggleClass("has_error", !!text);
      return (this._error_text || (this._error_text = this.container.find(".error_message"))).text(text);
    };

    AddDocument.prototype.search_document = function(e) {
      var match, query;
      query = $(e.currentTarget).val();
      if (query.match(/^\s*$/)) {
        this.show_error(null);
        return;
      }
      match = new RegExp('(?::\\d+)?\\/(read|book|doc)\\/(\\d+)').exec(query);
      if (match && match[2]) {
        return this.load_document(match[2]);
      } else {
        match = /^(\d+)$/.exec(query);
        if (match && match[1]) {
          return this.load_document(match[1]);
        } else {
          this.reset();
          return this.show_error('Incorrect document URL or ID.');
        }
      }
    };

    AddDocument.prototype.load_document = function(document_id) {
      var params;
      params = Scribd.CSRF.with_token({
        cell: 'collection',
        document_collection_id: this.collection_id,
        thumbnail_size: 'stats_header'
      });
      return $.get("/documents/" + document_id, params, _.bind(this.show_document, this), 'json').fail((function(_this) {
        return function() {
          return _this.show_error('Incorrect document URL or ID.');
        };
      })(this));
    };

    AddDocument.prototype.show_document = function(document) {
      var doc_preview, err;
      if (err = document.not_addable) {
        this.show_error(err);
        return;
      }
      this.show_error(null);
      this.document = document;
      this.document.description = Scribd.truncate(this.document.description, 190);
      doc_preview = _.template(this.template, this.document);
      this.container.find('.document_preview').show().html(doc_preview);
      this.container.find('.by_select, .by_link, .or').hide();
      return this.container.find('.commit_document').prop("disabled", false);
    };

    return AddDocument;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/document_collections/show.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.CollectionPage = (function() {
    CollectionPage.prototype.track_category = "profile:collection_documents";

    CollectionPage.prototype.objects_url = "/collections/get_collection_documents";

    function CollectionPage(container, opts1) {
      this.container = container;
      this.opts = opts1 != null ? opts1 : {};
      this.toggle_edit_mode = bind(this.toggle_edit_mode, this);
      this.empty_state_toggle = bind(this.empty_state_toggle, this);
      this.setup_sortable_grid = bind(this.setup_sortable_grid, this);
      this.setup_my_library = bind(this.setup_my_library, this);
      this.container = $(this.container);
      this.edit_menu = this.container.find(".edit_menu");
      this.params = {
        page: 1
      };
      this.setup_search();
      this.setup_events();
      this.setup_paginator();
      this.setup_my_library();
      if (this.opts.editable) {
        this.setup_sortable_grid();
      }
      this.empty_state_toggle();
      this.container.find(".floating_collection_header").stick_in_parent({
        parent: ".content_holder",
        offset_top: Scribd.Header.prototype.height,
        bottoming: false
      });
    }

    CollectionPage.prototype.setup_my_library = function() {
      return this.container.on("scribd:update_my_library_state", (function(_this) {
        return function(e, action) {
          var cell;
          cell = $(e.target);
          if (action === "remove" && Scribd.named_current_user_sync().id === _this.opts.owner_id) {
            return $(e.target).fadeOut();
          }
        };
      })(this));
    };

    CollectionPage.prototype.setup_sortable_grid = function() {
      this.container.find(".document_grid").sortable({
        revert: 300,
        helper: 'clone',
        placeholder: "object_cell document_cell document_cell_placeholder",
        start: (function(_this) {
          return function(ev, ui) {
            var $el, index;
            $el = ui.item;
            index = _this.container.find(".document_grid .document_cell").index($el);
            return $el.data("drag_index", index);
          };
        })(this),
        stop: (function(_this) {
          return function(ev, ui) {
            var $el, data, index;
            $el = ui.item;
            index = _this.container.find(".document_grid .document_cell").index($el);
            if (index === $el.data("drag_index")) {
              return;
            }
            $el.data("drag_index", "");
            data = {
              position: index,
              document_id: $el.data("object_id")
            };
            return Scribd.Shared.CollectionAPI.move_document(_this.opts.id, {
              data: data
            });
          };
        })(this)
      });
      return this.container.find(".document_grid").sortable("disable");
    };

    CollectionPage.prototype.empty_state_toggle = function() {
      if (this.container.find(".document_grid .document_cell:visible").length > 0) {
        this.container.find(".edit_button").prop("disabled", false);
        this.container.find(".empty_collections_text").addClass("hidden");
        return this.container.find(".delete_collection_btn").data("empty_collection", false);
      } else {
        this.container.find(".edit_button").prop("disabled"["true"]);
        this.container.find(".empty_collections_text").removeClass('hidden');
        return this.container.find(".delete_collection_btn").data("empty_collection", true);
      }
    };

    CollectionPage.prototype.toggle_edit_mode = function(activate) {
      if (activate) {
        this.container.find(".document_grid").addClass("edit_mode");
        this.container.addClass("edit_mode");
        this.edit_menu.fadeIn();
        return this.container.find(".document_grid").sortable("enable");
      } else {
        this.container.find(".document_grid").removeClass("edit_mode");
        this.container.removeClass("edit_mode");
        this.edit_menu.fadeOut();
        return this.container.find(".document_grid").sortable("disable");
      }
    };

    CollectionPage.prototype.is_private = function() {
      return this.container.find(".mark_as_private").data("privacy") === "private";
    };

    CollectionPage.prototype.setup_events = function() {
      var add_document_lb, clear_timeout_id;
      $(document).on("scribd:collection_update", (function(_this) {
        return function() {
          return location.reload();
        };
      })(this));
      clear_timeout_id = null;
      add_document_lb = new Scribd.CollectionEdit.AddDocument($('#add_document_lightbox'));
      this.container.dispatch("click", {
        open_add_document_lightbox: (function(_this) {
          return function() {
            return Scribd.Lightbox.open('add_document_lightbox');
          };
        })(this),
        popup_edit_button: (function(_this) {
          return function() {
            Scribd.Lightbox.open('edit_collection_lightbox', Scribd.EditCollectionLightbox).set_privacy(_this.is_private());
            return "continue";
          };
        })(this),
        edit_button: (function(_this) {
          return function() {
            _this.toggle_edit_mode(true);
            return "continue";
          };
        })(this),
        done_editing_button: (function(_this) {
          return function() {
            _this.toggle_edit_mode(false);
            $(document).trigger("scribd:selectable_document_grid:selection", {
              ids: [],
              clear_selection: true
            });
            return "continue";
          };
        })(this),
        save_button: (function(_this) {
          return function() {
            _this.toggle_edit_mode(false);
            return "continue";
          };
        })(this),
        mark_as_private: (function(_this) {
          return function($el) {
            clearTimeout(clear_timeout_id);
            if ($el.data("privacy") === "private") {
              $el.removeClass("private").data("privacy", "public");
              clear_timeout_id = setTimeout(function() {
                return $el.find(".privacy_pop").fadeOut(700);
              }, 1000);
            } else {
              $el.addClass("private").data("privacy", "private");
              clear_timeout_id = setTimeout(function() {
                return $el.find(".privacy_pop").fadeOut(700);
              }, 1000);
            }
            Scribd.Shared.CollectionAPI.mark_privacy($el.data());
            return "continue";
          };
        })(this),
        select_all_action: (function(_this) {
          return function() {
            var n_items;
            n_items = _this.edit_menu.find(".n_items");
            return _this.container.find(".select_layer:not(.selected)").click();
          };
        })(this),
        clear_action: (function(_this) {
          return function() {
            var n_items;
            n_items = _this.edit_menu.find(".n_items");
            return _this.container.find(".select_layer.selected").click();
          };
        })(this),
        remove_from_collection: (function(_this) {
          return function($el) {
            var ids, lb;
            lb = Scribd.Lightbox.open('confirm_lightbox', Scribd.ConfirmLightbox).set_confirm_callback(function() {
              var i, id, ids, len, opts, remove_from_library, results;
              remove_from_library = lb.container.find("input").is(":checked");
              ids = _this.edit_menu.find(".n_items").data("object_ids").ids;
              results = [];
              for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                opts = {
                  data: {
                    remove_from_library: remove_from_library,
                    document_id: id
                  },
                  complete: function() {
                    var dom_doc, j, len1;
                    for (j = 0, len1 = ids.length; j < len1; j++) {
                      id = ids[j];
                      dom_doc = _this.container.find("[data-object_id=" + id + "]");
                      dom_doc.fadeOut(function() {
                        dom_doc.remove();
                        return _this.empty_state_toggle();
                      });
                    }
                    _this.toggle_edit_mode(false);
                    return $(document).trigger("scribd:selectable_document_grid:selection", {
                      ids: [],
                      clear_selection: true
                    });
                  }
                };
                results.push(Scribd.Shared.CollectionAPI.remove_document(_this.opts.id, opts));
              }
              return results;
            });
            ids = _this.edit_menu.find(".n_items").data("object_ids").ids;
            if (ids.length > 1) {
              return lb.set_template("remove_from_collection", {
                title: "Remove " + ids.length + " books from Collection?"
              });
            } else {
              return lb.set_template("remove_from_collection", {
                title: "Remove 1 book from Collection?"
              });
            }
          };
        })(this),
        add_to_collection_btn: (function(_this) {
          return function() {
            var ids;
            ids = _this.edit_menu.find(".n_items").data("object_ids").ids;
            return Scribd.AddToCollectionLightbox.remote_open(ids);
          };
        })(this)
      });
      return $(document).on("scribd:selectable_document_grid:selection", (function(_this) {
        return function(e, val) {
          var n_items;
          console.log(val);
          if (val.clear_selection) {
            _this.container.find(".select_layer.selected").toggleClass("selected");
          }
          n_items = _this.edit_menu.find(".n_items");
          n_items.text(val.ids.length);
          n_items.data("object_ids", val);
          if (val.ids.length === 0) {
            return _this.container.find(".disable_without_selection").prop("disabled"["true"]);
          } else {
            return _this.container.find(".disable_without_selection").prop("disabled", false);
          }
        };
      })(this));
    };

    CollectionPage.prototype.setup_paginator = function() {
      var load_more;
      load_more = this.container.find(".load_more_btn");
      if (!load_more.length) {
        return;
      }
      return this.load_more = new Scribd.UI.LoadMore(load_more, (function(_this) {
        return function(done) {
          var opts;
          opts = {
            page: _this.params.page,
            complete: function(resp) {
              if (resp.has_more) {
                _this.load_more.enable();
              } else {
                _this.load_more.enable();
              }
              if (resp.objects) {
                $(resp.objects).children().appendTo(_this.container.find(".document_grid"));
              }
              return typeof done === "function" ? done(resp.has_more) : void 0;
            }
          };
          _this.params.page++;
          return Scribd.Shared.CollectionAPI.fetch_documents(_this.opts.id, opts);
        };
      })(this), true);
    };

    CollectionPage.prototype.setup_search = function() {
      return this.container.find(".search_area form").on("submit", (function(_this) {
        return function(e) {
          var opts;
          e.preventDefault();
          opts = {
            id: _this.opts.id,
            query: $(e.target).find("input").val(),
            complete: function(response) {
              var jresp;
              jresp = JSON.parse(response.responseText);
              if (jresp.search_results_count) {
                return _this.replace_grid(jresp.search_results);
              }
            }
          };
          return Scribd.Shared.CollectionAPI.search_documents(opts);
        };
      })(this));
    };

    CollectionPage.prototype.replace_grid = function(raw_widget) {
      var cholder;
      cholder = this.container.find(".content_holder");
      cholder.children().remove();
      cholder.append(raw_widget);
      return this.paginator.stop_loading();
    };

    return CollectionPage;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

