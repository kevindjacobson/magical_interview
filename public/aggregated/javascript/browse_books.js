/************************************************************************
 * 'browse_books.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:11 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-07-08 22:43:32 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/browse_books/shared.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.BrowseBooks = {};

  Scribd.BrowseBooks.ContainerButtonHover = (function() {
    function ContainerButtonHover(container) {
      this.container = $(container);
      this.button = this.container.find(".flat_btn");
      this.container.on("mouseenter", (function(_this) {
        return function() {
          return _this.button.addClass("hover");
        };
      })(this));
      this.container.on("mouseleave", (function(_this) {
        return function() {
          return _this.button.removeClass("hover activated");
        };
      })(this));
      this.container.on("mousedown", (function(_this) {
        return function() {
          return _this.button.addClass("activated");
        };
      })(this));
      this.container.on("mouseup", (function(_this) {
        return function() {
          return _this.button.removeClass("activated");
        };
      })(this));
    }

    return ContainerButtonHover;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-05-24 20:14:50 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/browse_books/_base.coffee (last modified: 2016-05-24 20:14:50 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.BrowseBooks.Base = (function() {
    Base.prototype.parent_trigger_time = 100;

    function Base(container) {
      this.center_contents = bind(this.center_contents, this);
      this.setup_ancestor_selector = bind(this.setup_ancestor_selector, this);
      this.container = $(container);
      this.center_contents();
      this.setup_ancestor_selector();
      $(".module_row").velocity("transition.slideUpIn", {
        stagger: 150
      });
    }

    Base.prototype.setup_ancestor_selector = function() {
      var clear_release, hover_target, hover_timeout, inside, parent_pickers, release_timeout;
      release_timeout = null;
      inside = false;
      parent_pickers = this.container.find(".parent_pickers");
      hover_target = parent_pickers.find(".hover_expand");
      clear_release = function() {
        if (release_timeout) {
          window.clearTimeout(release_timeout);
          return release_timeout = null;
        }
      };
      hover_target.on("mouseenter", (function(_this) {
        return function(e) {
          inside = true;
          return clear_release();
        };
      })(this));
      parent_pickers.on("mouseleave", (function(_this) {
        return function(e) {
          inside = false;
          clear_release();
          parent_pickers.removeClass("ancestors_open");
          return release_timeout = window.setTimeout(function() {
            return release_timeout = null;
          }, 500);
        };
      })(this));
      hover_timeout = null;
      return parent_pickers.on("mousemove", (function(_this) {
        return function(e) {
          if (!inside) {
            return;
          }
          if (parent_pickers.is(".open")) {
            return;
          }
          if (hover_timeout) {
            window.clearTimeout(hover_timeout);
          }
          return hover_timeout = window.setTimeout(function() {
            if (!inside) {
              return;
            }
            hover_timeout = null;
            parent_pickers.height(parent_pickers.height());
            parent_pickers.addClass("ancestors_open");
            return _this.container.track("show_ancenstors");
          }, _this.parent_trigger_time);
        };
      })(this));
    };

    Base.prototype.center_contents = function() {
      var el, el_h, i, len, parent, parent_h, ref, results, top;
      ref = this.container.find(".content_layer .centered");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        el = ref[i];
        el = $(el);
        parent = el.closest(".content_layer");
        parent_h = parent.height();
        el_h = el.outerHeight();
        top = Math.floor((parent_h - el_h) / 2);
        results.push(el.css("marginTop", top + "px"));
      }
      return results;
    };

    return Base;

  })();

  Scribd.BrowseBooks.PushState = (function() {
    function PushState(container) {
      this.container = $(container);
      this.container.on("click", "a[data-push_state_link]", (function(_this) {
        return function(e) {
          var href;
          if (!window.location.search.match(/\bpush_state\b/)) {
            return;
          }
          e.preventDefault();
          href = $(e.currentTarget).attr("href");
          return $.ajax({
            url: href,
            headers: {
              "X-Push-State": true
            },
            success: function(res) {
              return _this.replace_page(res);
            }
          });
        };
      })(this));
    }

    PushState.prototype.replace_page = function(page) {
      var existing;
      page = $(page);
      existing = this.container.find("[data-push_state]");
      return existing.fadeOut((function(_this) {
        return function() {
          page.insertBefore(existing).hide().fadeIn();
          return existing.remove();
        };
      })(this));
    };

    return PushState;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filter.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Filter = (function() {
    function Filter(container, opts) {
      this.container = container;
      if (opts == null) {
        opts = {};
      }
      this.container = $(this.container);
      this.container.on("click", ".row:not(.selected)", (function(_this) {
        return function(e) {
          var val;
          $(document.body).trigger("scribd:close_hover_menus");
          val = $(e.target).attr('value');
          _this.render_value(val, $(e.currentTarget));
          _this.container.trigger("scribd:filter:" + opts.filter_name, {
            value: val,
            extra: $(e.target).data()
          });
          _this.container.find(".row").removeClass("selected");
          $(e.currentTarget).addClass("selected");
          return typeof callback === "function" ? callback(val) : void 0;
        };
      })(this));
    }

    Filter.prototype.render_value = function(val, row) {
      return this.container.find(".filter_label .current_value_text").text(row.text());
    };

    return Filter;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filtered_document_page.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.FilteredDocumentPage = (function() {
    function FilteredDocumentPage(container) {
      var filter_picker;
      this.container = $(container);
      filter_picker = this.container.find(".filter_picker");
      if (filter_picker.is(".open")) {
        this.container.find(".toggle_filters_btn").addClass("open");
      }
      this.container.on("click", ".toggle_filters_btn", (function(_this) {
        return function(e) {
          $(e.currentTarget).toggleClass("open");
          return filter_picker.slideToggle("fast");
        };
      })(this));
      this.container.find(".language_filter_picker").fancy_select();
      this.container.on("change", ".language_filter_picker", (function(_this) {
        return function(e) {
          return window.location = $(e.currentTarget).val();
        };
      })(this));
    }

    return FilteredDocumentPage;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/load_more.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.LoadMore = (function() {
    LoadMore.prototype.load_on_scroll = -1;

    LoadMore.prototype.clicked_once = true;

    function LoadMore(container, load_callback, _load_on_scroll) {
      var win;
      this.load_callback = load_callback;
      this.container = $(container);
      this.container.data("object", this);
      this.top = this.container.offset().top;
      if (_load_on_scroll != null) {
        this.load_on_scroll = _load_on_scroll;
      }
      if (this.load_on_scroll !== 0) {
        win = $(window);
        win.on("scroll.load_more_btn", (function(_this) {
          return function() {
            if (_this.loading || !_this.clicked_once || _this.container.is(".disabled")) {
              return;
            }
            if (win.scrollTop() + win.height() >= _this.top) {
              return _this.load_more(function(has_more) {
                _this.load_on_scroll -= 1;
                if (_this.load_on_scroll === 0 || !has_more) {
                  return win.off("scroll.load_more_btn");
                }
              });
            }
          };
        })(this));
      }
      this.container.on("click", (function(_this) {
        return function(e) {
          if ($(e.target).closest("a").length) {
            e.preventDefault();
          }
          _this.clicked_once = true;
          return _this.load_more();
        };
      })(this));
    }

    LoadMore.prototype.set_loading = function(loading) {
      this.loading = loading;
      this.container.toggleClass("loading", loading);
      return setTimeout((function(_this) {
        return function() {
          return _this.container.toggleClass("show_loader", _this.loading);
        };
      })(this), 10);
    };

    LoadMore.prototype.reset = function() {
      return this.enable();
    };

    LoadMore.prototype.enable = function() {
      return this.container.removeClass("no_more disabled");
    };

    LoadMore.prototype.disable = function() {
      return this.container.addClass("disabled");
    };

    LoadMore.prototype.load_more = function(callback) {
      if (this.container.is(".disabled,.loading")) {
        return false;
      }
      this.set_loading(true);
      return typeof this.load_callback === "function" ? this.load_callback((function(_this) {
        return function(has_more) {
          _this.top = _this.container.offset().top;
          _this.set_loading(false);
          if (typeof callback === "function") {
            callback.apply(null, arguments);
          }
          if (!has_more) {
            return _this.container.addClass("no_more disabled");
          }
        };
      })(this)) : void 0;
    };

    return LoadMore;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/browse_books/category_all.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var AllBooksGrid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AllBooksGrid = (function(superClass) {
    extend(AllBooksGrid, superClass);

    function AllBooksGrid() {
      return AllBooksGrid.__super__.constructor.apply(this, arguments);
    }

    return AllBooksGrid;

  })(Scribd.UI.ObjectGrid);

  Scribd.BrowseBooks.CategoryAll = (function(superClass) {
    extend(CategoryAll, superClass);

    function CategoryAll(container, opts) {
      this.opts = opts != null ? opts : {};
      CategoryAll.__super__.constructor.apply(this, arguments);
      this.container.find(".unlimited_only_filter").on("scribd:input:changed", (function(_this) {
        return function(e, selected) {
          if (selected) {
            return window.location = window.location.href + "?unlimited_only=true";
          } else {
            return window.location = "" + (window.location.href.substr(0, window.location.href.indexOf('?')));
          }
        };
      })(this));
      this.setup_load_more();
    }

    CategoryAll.prototype.setup_load_more = function() {
      var grid, load_more;
      grid = new AllBooksGrid(this.container.find(".object_grid"));
      load_more = this.container.find(".browse_load_more");
      if (!load_more.length) {
        return;
      }
      return new Scribd.UI.LoadMore(load_more, (function(_this) {
        return function(done) {
          var link;
          link = load_more.find("a");
          return $.ajax({
            url: link.attr("href"),
            type: "GET",
            dataType: "json",
            success: function(res) {
              var new_height, new_items, old_height;
              link.attr("href", res.next_page);
              if (res.num_documents) {
                old_height = grid.container.height();
                new_items = $(res.objects).children().appendTo(grid.container);
                grid.fit_to_width();
                new_height = grid.container.height();
                grid.container.height(old_height).animate({
                  height: new_height
                }, {
                  complete: function() {
                    return grid.container.height("");
                  }
                });
              }
              if (!res.has_more) {
                load_more.remove();
              }
              return done(res.has_more);
            }
          });
        };
      })(this));
    };

    return CategoryAll;

  })(Scribd.BrowseBooks.Base);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/browse_books/category_authors.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {


}).call(this);


/* ----------------------------------------------------------------------
   - app/views/browse_books/index.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.BrowseBooks.Index = (function() {
    function Index(container) {
      this.container = $(container);
      this.container.find(".category_box").velocity("transition.slideUpIn", {
        stagger: 40
      });
      this.container.find(".browse_leaders").velocity("transition.fadeIn");
    }

    return Index;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/browse_books/modules/_tracked_module.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.BrowseBooks.TrackedModule = (function(superClass) {
    extend(TrackedModule, superClass);

    function TrackedModule(container, opts) {
      TrackedModule.__super__.constructor.call(this, container, opts);
    }

    TrackedModule.prototype.setup_click_tracking = function() {
      return TrackedModule.__super__.setup_click_tracking.call(this, this.container.closest(".module_enclosing_link"));
    };

    return TrackedModule;

  })(Scribd.RecommendationTracking.Module);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/browse_books/modules/_wide_documents.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.BrowseBooks.WideCarousel = (function(superClass) {
    extend(WideCarousel, superClass);

    function WideCarousel() {
      return WideCarousel.__super__.constructor.apply(this, arguments);
    }

    WideCarousel.prototype.anim_speed = 400;

    WideCarousel.prototype.cell_width = function() {
      var meta_cell;
      meta_cell = this.carousel.find(".metadata_cell:first").outerWidth(true);
      return WideCarousel.__super__.cell_width.apply(this, arguments) + meta_cell;
    };

    WideCarousel.prototype.cells_to_scroll = function() {
      return 2;
    };

    return WideCarousel;

  })(Scribd.UI.Carousel);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/browse_books/pages/_category_modules.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.BrowseBooks.CategoryModules = (function() {
    function CategoryModules(container) {
      this.container = $(container);
      this.send_tracking();
    }

    CategoryModules.prototype.send_tracking = function() {
      var compilation_id;
      compilation_id = this.container.data("compilation_id");
      return Scribd.RecommendationTracking.page_view_deferred(compilation_id).done((function(_this) {
        return function(view_id) {
          var i, len, ref, results, row;
          ref = _this.container.find(".document_carousel, .browse_books_tracked_module");
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            row = ref[i];
            results.push($(row).trigger("scribd:setup_tracking", [view_id]));
          }
          return results;
        };
      })(this));
    };

    return CategoryModules;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/browse_books/pages/_top_authors.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.BrowseBooks.TopAuthors = (function() {
    function TopAuthors(container, opts) {
      this.opts = opts;
      this.container = $(container);
      this.send_tracking();
    }

    TopAuthors.prototype.send_tracking = function() {
      if (!this.opts.compilation_id) {
        return;
      }
      return new Scribd.RecommendationTracking.Module(this.container, {
        compilation_id: this.opts.compilation_id,
        module_id: this.opts.module_id,
        page_name: "top_authors"
      });
    };

    return TopAuthors;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

