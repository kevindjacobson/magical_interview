/************************************************************************
 * 'js_spec.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:13 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-06-20 18:48:42 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/js_spec/js_spec.coffee (last modified: 2016-06-20 18:48:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var JsonReporter,
    slice = [].slice,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.$rat = function() {};

  $rat.root = function() {
    return {
      flushEvents: function() {}
    };
  };

  if (!window.Scribd) {
    window.Scribd = {};
  }

  Scribd.JsSpec = (function() {
    function JsSpec() {}

    JsSpec.start = function(name, opts) {
      var specs;
      specs = Scribd.JS_SPEC_DEFINITIONS[name];
      JsSpec.reporter = new JsonReporter;
      jasmine.getEnv().addReporter(JsSpec.reporter);
      JsSpec.rpc_url = opts.rpc_url;
      JsSpec.rpc_cache = {};
      return specs();
    };

    JsSpec.with_widget = function(params, opts) {
      var k, key, keys, v;
      if (params == null) {
        params = {};
      }
      if (opts == null) {
        opts = {};
      }
      keys = (function() {
        var results;
        results = [];
        for (k in params) {
          v = params[k];
          results.push(k + "-" + v);
        }
        return results;
      })();
      keys.sort();
      key = "[" + (keys.join("::")) + "]";
      return beforeEach(function(done) {
        var base, req;
        if (!JsSpec.rpc_url) {
          throw new Error("missing rpc url");
        }
        (base = JsSpec.rpc_cache)[key] || (base[key] = $.ajax({
          type: "post",
          url: JsSpec.rpc_url,
          data: Scribd.CSRF.with_token({
            method: opts.method || "load_widget",
            options: JSON.stringify(params)
          })
        }));
        req = JsSpec.rpc_cache[key];
        req.done(function(res) {
          if (res.body) {
            $(".sandbox").html(res.body);
          }
          return done();
        });
        return req.fail(function(res) {
          return done.fail(new Error("failed to execute rpc"));
        });
      });
    };

    return JsSpec;

  })();

  Scribd.JsSpec.React = (function() {
    function React() {}

    React.custom_matchers = {
      toHaveVisibleElement: function() {
        return {
          compare: function(component, selector) {
            var el, result;
            result = {};
            el = $(ReactDOM.findDOMNode(component)).find(selector);
            result.pass = el.is(":visible");
            result.message = function() {
              return "Expected " + selector + " to be in component";
            };
            return result;
          }
        };
      }
    };

    React.render_to_sandbox = function(component) {
      var sandbox;
      sandbox = $(".sandbox")[0];
      if (!sandbox) {
        throw new Error("missing sandbox");
      }
      ReactDOM.unmountComponentAtNode(sandbox);
      return ReactDOM.render(component, sandbox);
    };

    React.has_visible_element = function(component, selector) {
      var el;
      el = $(ReactDOM.findDOMNode(component)).find(selector);
      expect(el.is(":visible")).toBe(true);
      return el;
    };

    return React;

  })();

  Scribd.JsSpec.Support = (function() {
    var check_visibility;

    function Support() {}

    check_visibility = function(selectors, is_visible) {
      if (is_visible == null) {
        is_visible = true;
      }
      return _.each(_.flatten(selectors), (function(_this) {
        return function(selector) {
          var prefix;
          prefix = is_visible ? "shows" : "does not show";
          return it(prefix + " " + selector, function() {
            return expect($(selector).is(':visible')).toBe(is_visible);
          });
        };
      })(this));
    };

    Support.it_shows = function() {
      var selectors;
      selectors = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return check_visibility(selectors, true);
    };

    Support.it_does_not_show = function() {
      var selectors;
      selectors = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return check_visibility(selectors, false);
    };

    return Support;

  })();

  JsonReporter = (function() {
    function JsonReporter() {
      this.specDone = bind(this.specDone, this);
      this.jasmineDone = bind(this.jasmineDone, this);
      this.jasmineStarted = bind(this.jasmineStarted, this);
      this.state = {
        status: "starting",
        results: []
      };
    }

    JsonReporter.prototype.jasmineStarted = function() {
      return this.state.status = "running";
    };

    JsonReporter.prototype.jasmineDone = function() {
      return this.state.status = "done";
    };

    JsonReporter.prototype.specDone = function(result) {
      var arr, i, item, len, ref;
      result = $.extend({}, result);
      ref = ["failedExpectations", "passedExpectations"];
      for (i = 0, len = ref.length; i < len; i++) {
        arr = ref[i];
        result[arr] = (function() {
          var j, len1, ref1, results;
          ref1 = result[arr];
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            item = ref1[j];
            item = $.extend({}, item);
            results.push(delete item.actual);
          }
          return results;
        })();
      }
      return this.state.results.push(result);
    };

    return JsonReporter;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: 2016-07-08 22:43:33 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/audiobooks/credit_restricted_player_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Audiobooks::CreditRestrictedPlayerSpec"] = function() { (function() {
  var it_does_not_show, it_shows, player_elm, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  player_elm = function(cls) {
    var player_node, ref1;
    player_node = $(".autogen_class_views_audiobooks_show")[0];
    return (ref1 = player_node.getElementsByClassName(cls)) != null ? ref1[0] : void 0;
  };

  describe('Credit Restricted Audioplayer UI', function() {
    it_shows([".is_preview_restricted", ".preview_timer", ".time_remaining"]);
    return it("shows something", function() {
      return expect($(".library_button:contains(Get full title)").length).toEqual(1);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/audiobooks/player_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Audiobooks::PlayerSpec"] = function() { (function() {
  var it_does_not_show, it_shows, player_elm, player_node, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  player_node = $(".autogen_class_views_audiobooks_show")[0];

  player_elm = function(cls) {
    var ref1;
    return (ref1 = player_node.getElementsByClassName(cls)) != null ? ref1[0] : void 0;
  };

  describe("audiobooks player", function() {
    it("should have 3 control rows", function() {
      return expect($(".control_row").length).toBe(3);
    });
    it_shows([".header", ".library_button", ".options_handle", ".cover", ".player_container", ".meta"]);
    return it_does_not_show([".preview_timer"]);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/credit_lightbox/credit_lightbox_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::CreditLightbox::CreditLightboxSpec"] = function() { (function() {
  describe("CreditLightbox", function() {
    return it('should open', function() {
      var data;
      Scribd.Lightbox.initialize();
      data = {
        content: $("#credit_lightbox_rendered").data("html"),
        opts: {
          credit_balance: 0,
          credit_lightbox_url: "",
          pmp_document_purchases_url: "",
          credit_purchases_url: "",
          doc_id: "is this OK",
          payments_checkout_url: "",
          params: {}
        }
      };
      Scribd.CreditLightbox.load = function() {
        var lb;
        lb = Scribd.CreditLightbox.open_from_object("credit_lightbox", data.content, null, data.opts);
        return lb.open_with_event_container_and_params($(document.body), {});
      };
      Scribd.with_login = function(fn) {
        return fn();
      };
      $(".main_button span").click();
      return expect($("#credit_lightbox").is(":visible")).toBe(true);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/misc_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::MiscSpec"] = function() { (function() {
  describe("Scribd object", function() {
    it("should be able to parse valid URI parameters", function() {
      var parsed_params;
      parsed_params = Scribd.parse_parameters("#param=i&param2=like&param3=Baduk");
      return expect(parsed_params).toEqual({
        param: "i",
        param2: "like",
        param3: "Baduk"
      });
    });
    it("should be able to add parameters to an URL", function() {
      var new_url, old_url;
      old_url = "https://www.scribd.com";
      new_url = Scribd.add_url_parameters(old_url, {
        "foo": "bar"
      });
      expect(new_url).toEqual(old_url + "?foo=bar");
      old_url = "https://www.scribd.com?";
      new_url = Scribd.add_url_parameters(old_url, {
        "foo": "bar"
      });
      expect(new_url).toEqual(old_url + "foo=bar");
      old_url = "https://www.scribd.com?a=b";
      new_url = Scribd.add_url_parameters(old_url, {
        "foo": "bar"
      });
      expect(new_url).toEqual(old_url + "&foo=bar");
      old_url = "https://www.scribd.com#fragment";
      new_url = Scribd.add_url_parameters(old_url, {
        "foo": "bar"
      });
      expect(new_url).toEqual("https://www.scribd.com?foo=bar#fragment");
      old_url = "https://www.scribd.com?a=b#fragment";
      new_url = Scribd.add_url_parameters(old_url, {
        "foo": "bar"
      });
      return expect(new_url).toEqual("https://www.scribd.com?a=b&foo=bar#fragment");
    });
    return it("should truncate strings of a given length", function() {
      var truncated_str;
      truncated_str = Scribd.truncate("Dot points should start now not later", 30);
      return expect(truncated_str).toEqual("Dot points should start now...");
    });
  });

  describe('document_url', function() {
    return describe('urlByDocId', function() {
      it('should make url from just doc id', function() {
        return expect(Scribd.DocumentUrl.urlByDocId(3)).toEqual('http://' + window.location.hostname + '/doc/3');
      });
      it('should make url from just doc id, secret password if set', function() {
        return expect(Scribd.DocumentUrl.urlByDocId(3, {
          secret_password: 'hey'
        })).toEqual('http://' + window.location.hostname + '/doc/3?secret_password=hey');
      });
      it('should not include secret password if length == 0', function() {
        return expect(Scribd.DocumentUrl.urlByDocId(3, {
          secret_password: ''
        })).toEqual('http://' + window.location.hostname + '/doc/3');
      });
      it('should make url from just doc id, prod', function() {
        return expect(Scribd.DocumentUrl.urlByDocId(3, {
          env: 'production'
        })).toEqual('http://scribd.com/doc/3');
      });
      it('should make url from doc id and slug, prod', function() {
        return expect(Scribd.DocumentUrl.urlByDocId(3, {
          slug: 'hey',
          env: 'production'
        })).toEqual('http://scribd.com/doc/3/hey');
      });
      return it('should make url relative', function() {
        return expect(Scribd.DocumentUrl.urlByDocId(3, {
          slug: 'hey',
          relative_path: true
        })).toEqual('/doc/3/hey');
      });
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/page/doc_page_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Page::DocPageSpec"] = function() { (function() {
  it("loads doc page", function() {
    return expect(true).toBe(true);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/page/embed_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Page::EmbedSpec"] = function() { (function() {
  it("loads embed page", function() {
    return expect(true).toBe(true);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/page/home_page_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Page::HomePageSpec"] = function() { (function() {
  it("loads home page", function() {
    return expect(true).toBe(true);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/page/upload_page_spec.coffee (last modified: 2016-06-20 18:48:42 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Page::UploadPageSpec"] = function() { (function() {
  it("loads doc page", function() {
    return expect(true).toBe(true);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow2/billing_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow2::BillingSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  with_widget = Scribd.JsSpec.with_widget;

  describe('Billing', function() {
    var defaults, it_has_default_state, widget_with_defaults;
    defaults = {
      show_paypal: true,
      show_creditcard_form: true,
      user_has_active_orders: false,
      simple_checkout: true,
      paypal_checkout_action: 'redirect_to_paypal'
    };
    widget_with_defaults = function(opts) {
      return with_widget($.extend({}, defaults, opts));
    };
    it_has_default_state = function(options) {
      var does_not_show, except, shows;
      if (options == null) {
        options = {};
      }
      except = options.except;
      shows = ['.paypal_form'];
      if (except) {
        shows = _.difference(shows, except);
        does_not_show = _.difference(does_not_show, except);
      }
      return it_shows(shows);
    };
    describe(':show_paypal =>', function() {
      describe('true', function() {
        widget_with_defaults({
          show_paypal: true
        });
        it_has_default_state({
          except: ['.paypal_form']
        });
        return it_shows('.paypal_form');
      });
      return describe('false', function() {
        widget_with_defaults({
          show_paypal: false
        });
        it_has_default_state({
          except: ['.paypal_form']
        });
        return it_does_not_show('.paypal_form');
      });
    });
    describe(':show_creditcard_form =>', function() {
      describe('true', function() {
        widget_with_defaults({
          show_creditcard_form: true
        });
        it_has_default_state({
          except: ['.paypal_form']
        });
        return it_shows('.paypal_form');
      });
      return describe('false', function() {
        widget_with_defaults({
          show_creditcard_form: false
        });
        it_has_default_state({
          except: ['.paypal_form']
        });
        return it_shows('.paypal_form');
      });
    });
    describe(':simple_checkout =>', function() {
      describe('true', function() {
        widget_with_defaults({
          simple_checkout: true
        });
        it_has_default_state();
        return it_does_not_show('.address_fields');
      });
      return describe('false', function() {
        widget_with_defaults({
          simple_checkout: false
        });
        it_has_default_state();
        return it_shows('.address_fields');
      });
    });
    return describe('with errors', function() {
      var it_adds_error_classes;
      it_adds_error_classes = function(attribute, fields) {
        return _.each(fields, function(field) {
          var selector;
          selector = "[name='" + attribute + "[" + field + "]']";
          return it("adds error class to " + selector, function() {
            return expect($(selector).closest('.field_error').is(':visible')).toBe(true);
          });
        });
      };
      describe('with credit card', function() {
        var fields;
        fields = ['year', 'month', 'number', 'verification_value'];
        return describe('invalid', function() {
          widget_with_defaults({
            errors: fields
          });
          return it_adds_error_classes('new_credit_card', fields);
        });
      });
      return describe('with address', function() {
        var fields;
        fields = ['full_name', 'city', 'state', 'address', 'zip'];
        return describe('invalid', function() {
          widget_with_defaults({
            errors: fields,
            simple_checkout: false
          });
          return it_adds_error_classes('new_billing_address', fields);
        });
      });
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow2/preview_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow2::PreviewSpec"] = function() { (function() {
  var with_widget;

  with_widget = Scribd.JsSpec.with_widget;

  describe('Preview', function() {
    with_widget();
    return it('shows link', function() {
      return expect($('.change_billing_info a').is(':visible')).toBe(true);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/billing_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::BillingSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  with_widget = Scribd.JsSpec.with_widget;

  describe('Billing', function() {
    var defaults, it_has_default_state, widget_with_defaults;
    defaults = {
      show_paypal: true,
      show_creditcard_form: true,
      user_has_active_orders: false,
      simple_checkout: true,
      paypal_checkout_action: 'redirect_to_paypal'
    };
    widget_with_defaults = function(opts) {
      return with_widget($.extend({}, defaults, opts));
    };
    it_has_default_state = function(options) {
      var does_not_show, except, shows;
      if (options == null) {
        options = {};
      }
      except = options.except;
      shows = ['.paypal'];
      does_not_show = ['.has_active_orders'];
      if (except) {
        shows = _.difference(shows, except);
        does_not_show = _.difference(does_not_show, except);
      }
      it_shows(shows);
      return it_does_not_show(does_not_show);
    };
    describe(':show_paypal =>', function() {
      describe('true', function() {
        widget_with_defaults({
          show_paypal: true
        });
        it_has_default_state({
          except: ['.paypal']
        });
        return it_shows('.paypal');
      });
      return describe('false', function() {
        widget_with_defaults({
          show_paypal: false
        });
        it_has_default_state({
          except: ['.paypal']
        });
        return it_does_not_show('.paypal');
      });
    });
    describe(':show_creditcard_form =>', function() {
      describe('true', function() {
        widget_with_defaults({
          show_creditcard_form: true
        });
        it_has_default_state({
          except: ['.paypal']
        });
        return it_shows('.paypal');
      });
      return describe('false', function() {
        widget_with_defaults({
          show_creditcard_form: false
        });
        it_has_default_state({
          except: ['.paypal']
        });
        return it_shows('.paypal');
      });
    });
    describe(':simple_checkout =>', function() {
      describe('true', function() {
        widget_with_defaults({
          simple_checkout: true
        });
        it_has_default_state();
        return it_does_not_show('.address_fields');
      });
      return describe('false', function() {
        widget_with_defaults({
          simple_checkout: false
        });
        it_has_default_state();
        return it_shows('.address_fields');
      });
    });
    describe('with errors', function() {
      var it_adds_error_classes;
      it_adds_error_classes = function(attribute, fields) {
        return _.each(fields, function(field) {
          var selector;
          selector = "[name='" + attribute + "[" + field + "]']";
          return it("adds error class to " + selector, function() {
            return expect($(selector).hasClass('field_error')).toBe(true);
          });
        });
      };
      describe('with credit card', function() {
        var fields;
        fields = ['year', 'month', 'number', 'verification_value'];
        return describe('invalid', function() {
          widget_with_defaults({
            errors: fields
          });
          return it_adds_error_classes('new_credit_card', fields);
        });
      });
      return describe('with address', function() {
        var fields;
        fields = ['full_name', 'city', 'state', 'address', 'zip'];
        return describe('invalid', function() {
          widget_with_defaults({
            errors: fields,
            simple_checkout: false
          });
          return it_adds_error_classes('new_billing_address', fields);
        });
      });
    });
    return describe('with free trial', function() {
      describe('enabled', function() {
        widget_with_defaults({
          free_trial: true
        });
        return it_shows('.free_trial_notice');
      });
      return describe('disabled', function() {
        widget_with_defaults({
          free_trial: false
        });
        return it_does_not_show('.free_trial_notice');
      });
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/checkout_receipt_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::CheckoutReceiptSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  with_widget = Scribd.JsSpec.with_widget;

  describe('CheckoutReceipt', function() {
    with_widget();
    return it_shows(['.document .thumbnail', '.document .title', '.document .description', '.document .read_button']);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/email_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::EmailSpec"] = function() { (function() {
  var it_shows, with_widget;

  it_shows = Scribd.JsSpec.Support.it_shows;

  with_widget = Scribd.JsSpec.with_widget;

  describe('Email', function() {
    with_widget();
    return it_shows(['.username', '.email_address_field', '.continue_button']);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/items_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::ItemsSpec"] = function() { (function() {
  var should_have_item;

  should_have_item = function($items, index, attrs) {
    var $item, selector;
    selector = '.item:nth(' + index + ')';
    $item = $items.find('#item_list ' + selector);
    return _.each(attrs, function(val, key) {
      return expect($item.find('.item_' + key).text()).toBe(val);
    });
  };

  describe('Items', function() {
    var $items;
    $items = null;
    beforeEach(function() {
      return $items = $('.items');
    });
    return describe('displays', function() {
      it('has the first item', function() {
        return should_have_item($items, 0, {
          title: 'first title',
          description: 'first description',
          price: '$1.00 USD'
        });
      });
      it('has the second item', function() {
        return should_have_item($items, 1, {
          title: 'second title',
          description: 'second description',
          price: '$2.00 USD'
        });
      });
      return it('the total', function() {
        var $total;
        $total = $items.find('#total');
        return expect($total.text()).toBe('$3.00 USD');
      });
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/new_credit_card_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::NewCreditCardSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  with_widget = Scribd.JsSpec.with_widget;

  describe('NewCreditCard', function() {
    var labeled_input;
    labeled_input = function(selector) {
      var underscored;
      underscored = selector.replace('[', '_').replace(']', '');
      return ["label[for='" + underscored + "']", "[name='" + selector + "']"];
    };
    describe(':cancel_button =>', function() {
      describe('true', function() {
        with_widget({
          cancel_button: true
        });
        return it_shows(".cancel_button");
      });
      return describe('false', function() {
        with_widget({
          cancel_button: false
        });
        return it_does_not_show(".cancel_button");
      });
    });
    return describe(':simple_checkout =>', function() {
      describe('false', function() {
        with_widget({
          simple_checkout: false
        });
        return it_shows([labeled_input('new_billing_address[full_name]'), labeled_input('new_billing_address[city]'), labeled_input('new_billing_address[address]'), labeled_input('new_billing_address[country]'), '[name="new_credit_card[number]"]', '[name="new_credit_card[month]"]', '[name="new_credit_card[year]"]', '[name="new_credit_card[verification_value]"]', '.continue_button']);
      });
      return describe('true', function() {
        with_widget({
          simple_checkout: true
        });
        it_shows(['[name="new_credit_card[number]"]', '[name="new_credit_card[month]"]', '[name="new_credit_card[year]"]', '[name="new_credit_card[verification_value]"]', '.continue_button']);
        return it_does_not_show([labeled_input('new_billing_address[full_name]'), labeled_input('new_billing_address[city]'), labeled_input('new_billing_address[address]'), labeled_input('new_billing_address[country]')]);
      });
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/preview_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::PreviewSpec"] = function() { (function() {
  var with_widget;

  with_widget = Scribd.JsSpec.with_widget;

  describe('Preview', function() {
    with_widget({
      cart_items: true,
      free_trial: false
    });
    return it('shows an item', function() {
      var $items;
      $items = $('#item_summary');
      return expect($items.is(':visible')).toBe(true);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/reauthenticate_facebook_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::ReauthenticateFacebookSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  with_widget = Scribd.JsSpec.with_widget;

  describe('ReauthenticateFacebook', function() {
    with_widget();
    return it_shows(['.fb_button', '.items']);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/reauthenticate_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::ReauthenticateSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  with_widget = Scribd.JsSpec.with_widget;

  describe("Reauthenticate", function() {
    with_widget();
    return it_shows(["#login_password", ".username", ".items", ".continue_button"]);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/checkout_flow/redirect_to_paypal_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::CheckoutFlow::RedirectToPaypalSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, widget_loader, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show, widget_loader = ref.widget_loader;

  with_widget = Scribd.JsSpec.with_widget;

  describe('Redirect to Paypal', function() {
    with_widget();
    return it_shows(["#paypal_form"]);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/login_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::LoginSpec"] = function() { (function() {
  var it_shows;

  it_shows = Scribd.JsSpec.Support.it_shows;

  it_shows(['#login_or_email', '#login_password', '#email', '#email_form', '#account_form']);

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/plans/already_purchased_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::Plans::AlreadyPurchasedSpec"] = function() { (function() {
  var it_shows;

  it_shows = Scribd.JsSpec.Support.it_shows;

  describe('Show back to document buton', function() {
    it_shows(".flat_btn");
    return it("has the doc url", function() {
      return expect($(".flat_btn").closest("a").attr("href")).toBeTruthy();
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/plans/plans_incentivized_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::Plans::PlansIncentivizedSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Shows basic PMP plan', function() {
    return it("should show 3 plans", function() {
      return expect($(".plan").length).toBe(3);
    });
  });

  describe('Should show document info', function() {
    it_shows(".autogen_class_views_archive_flow_doc_signup_info");
    return it_shows(".incentivized_upload_box");
  });

  it('singup button should be properly named(english)', function() {
    return expect($('.plan_continue_button').text()).toBe("Join and download now");
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/plans/plans_with_doc_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::Plans::PlansWithDocSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Shows basic PMP plan', function() {
    return it("should show 3 plans", function() {
      return expect($(".plan").length).toBe(3);
    });
  });

  describe('Should show document info', function() {
    it_shows(".autogen_class_views_archive_flow_doc_signup_info");
    return it_shows(".incentivized_upload_box");
  });

  it('singup button should be properly named(english)', function() {
    return expect($('.plan_continue_button').text()).toBe("Join and download now");
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/payments/plans/pmp_plans_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Payments::Plans::PmpPlansSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Shows basic PMP plan', function() {
    return it("should show 3 plans", function() {
      return expect($(".plan").length).toBe(3);
    });
  });

  describe('Should show document info', function() {
    it_does_not_show(".autogen_class_views_archive_flow_doc_signup_info");
    return it_does_not_show(".want_premium");
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/search/search_app_component_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Search::SearchAppComponentSpec"] = function() { (function() {
  var Simulate, it_shows;

  it_shows = Scribd.JsSpec.Support.it_shows;

  Simulate = React.addons.TestUtils.Simulate;

  describe("Component Spec", function() {
    describe("Breadcrumbs", function() {
      ReactDOM.render(Scribd.R.Search.App.Breadcrumbs({
        facet_options_hash: {},
        content_type: "books",
        search_loading: false,
        snapshot: new Scribd.SearchSnapshot({}),
        category_branch: [
          {
            name: "First",
            value: "First"
          }, {
            name: "Second",
            value: "Second"
          }, {
            name: "Third",
            value: "Third"
          }
        ],
        result_count: 666
      }), breadcrumbs_container);
      it_shows([".breadcrumbs"]);
      it("Should show categories", function() {
        var bd_text, crumb, j, len, ref, results;
        bd_text = $(".breadcrumbs").text();
        ref = ["First", "Second", "Third"];
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          crumb = ref[j];
          results.push(expect(bd_text.indexOf(crumb) === -1).toBe(false));
        }
        return results;
      });
      it("Should show result count", function() {
        return expect($(".breadcrumbs .results").text()).toBe("666 results in");
      });
      return it("Should always have the last unclickable crumb", function() {
        return expect($(".breadcrumbs .unclickable.crumb").length).toBe(1);
      });
    });
    return describe("CategoryTree", function() {
      var content_type, j, len, ref, results;
      describe("Empty state", function() {
        beforeEach(function() {
          return ReactDOM.render(Scribd.R.Search.App.CategoryTree({
            content_type: "tops",
            category_tree: Scribd.CategoryTree,
            selected_value: "",
            category_branch: []
          }), category_filter_container);
        });
        it_shows([".category_filter"]);
        it("Should render all content types", function() {
          var c_key, c_type, cat_text, j, len, ref, results;
          cat_text = $(".category_filter").text();
          ref = Scribd.R.Search.CONTENT_TYPES;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            c_type = ref[j];
            c_key = Scribd.R.Search.App.content_key_to_text(c_type);
            results.push(expect(cat_text.indexOf(c_key) === -1).toBe(false));
          }
          return results;
        });
        return it("Should have tops selected", function() {
          return expect($(".category_filter .item.selected").data("id")).toBe("tops");
        });
      });
      ref = Scribd.R.Search.CONTENT_TYPES;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        content_type = ref[j];
        if (content_type === "tops") {
          continue;
        }
        results.push((function(content_type) {
          return describe(" " + content_type + " Content Type", function() {
            describe("without category", function() {
              beforeEach(function() {
                return ReactDOM.render(Scribd.R.Search.App.CategoryTree({
                  content_type: content_type,
                  category_tree: Scribd.CategoryTree,
                  selected_value: content_type,
                  category_branch: Scribd.R.Search.App.category_branch(content_type, content_type, Scribd.CategoryTree)
                }), category_filter_container);
              });
              it("'All' item should have a caret", function() {
                var $all;
                $all = $(".category_filter .item").first();
                return expect($all.attr("class")).toBe("item selected with_caret");
              });
              return it(content_type + " should not have a caret", function() {
                var $selected_content_type;
                $selected_content_type = $(".item[data-id='" + content_type + "']");
                return expect($selected_content_type.attr("class")).toBe("item selected ");
              });
            });
            describe("with category", function() {
              var selected_value;
              selected_value = null;
              beforeEach(function() {
                var ref1;
                selected_value = ((ref1 = Scribd.CategoryTree[content_type]) != null ? ref1.children : void 0) ? Scribd.CategoryTree[content_type].children[0].id : void 0;
                return ReactDOM.render(Scribd.R.Search.App.CategoryTree({
                  content_type: content_type,
                  category_tree: Scribd.CategoryTree,
                  category_branch: Scribd.R.Search.App.category_branch(content_type, {
                    id: selected_value
                  }, Scribd.CategoryTree),
                  selected_value: selected_value || content_type
                }), category_filter_container);
              });
              it("should have caret", function() {
                var $selected_content_type;
                $selected_content_type = $(".item[data-id='" + content_type + "']");
                if (selected_value) {
                  return expect($selected_content_type.attr("class")).toBe("item selected with_caret");
                } else {
                  return expect($selected_content_type.attr("class")).toBe("item selected ");
                }
              });
              if (selected_value) {
                return it("should have the category selected", function() {
                  var $selected_category;
                  $selected_category = $(".item[data-id='" + selected_value + "']");
                  return expect($selected_category.attr("class")).toBe("item selected ");
                });
              }
            });
            if (content_type === "books") {
              return describe("with deep category", function() {
                var selected_value;
                selected_value = null;
                beforeEach(function() {
                  var el;
                  selected_value = (function() {
                    if (el = Scribd.CategoryTree[content_type]) {
                      while (el.subcategories) {
                        el = el.subcategories[0];
                      }
                      return el.id;
                    }
                  })();
                  return ReactDOM.render(Scribd.R.Search.App.CategoryTree({
                    content_type: content_type,
                    category_tree: Scribd.CategoryTree,
                    category_branch: Scribd.R.Search.App.category_branch(content_type, {
                      id: selected_value || content_type
                    }, Scribd.CategoryTree),
                    selected_value: selected_value || content_type
                  }), category_filter_container);
                });
                it("'" + content_type + "' should have caret", function() {
                  var $selected_content_type;
                  $selected_content_type = $(".item[data-id='" + content_type + "']");
                  if (selected_value) {
                    return expect($selected_content_type.attr("class")).toBe("item selected with_caret");
                  } else {
                    return expect($selected_content_type.attr("class")).toBe("item selected ");
                  }
                });
                return xit("parent categories should have caret", function() {
                  var cat, cat_branch, i, k, len1, results1;
                  cat_branch = Scribd.R.Search.App.category_branch(content_type, selected_value, Scribd.CategoryTree);
                  results1 = [];
                  for (i = k = 0, len1 = cat_branch.length; k < len1; i = ++k) {
                    cat = cat_branch[i];
                    results1.push((function(cat, i) {
                      var $selected_category;
                      $selected_category = $(".item[data-id='" + cat.id + "']");
                      if (i !== cat_branch.length - 1) {
                        return expect($selected_category.attr("class")).toBe("item selected with_caret");
                      } else {
                        return expect($selected_category.attr("class")).toBe("item selected ");
                      }
                    })(cat, i));
                  }
                  return results1;
                });
              });
            }
          });
        })(content_type));
      }
      return results;
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/search/search_app_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Search::SearchAppSpec"] = function() { (function() {
  var CONTENT_TYPES, TOP_RESULT_TYPES, it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  with_widget = Scribd.JsSpec.with_widget;

  CONTENT_TYPES = ["books", "audiobooks", "sheet_music", "comics", "collections", "authors", "documents"];

  TOP_RESULT_TYPES = ["book", "audiobook", "author", "collection", "category", "unavailable_book", "unavailable_audiobook", "unavailable_author"];

  TOP_RESULT_TYPES = ["book"];


  /*
  describe 'Search App', ->
    with_widget()
  
    it "does something", ->
      expect(true).toBe(true)
   */


  /*
   * what the spec used to be, 
  
    beforeEach (done) ->
      waitsFor (->
        $.isReady
      ), "jQuery never got ready", 1000
  
    describe "Tops Content", ->
      it "Should show all top content types", ->
        expect($(".row_header").length).toBe(CONTENT_TYPES.length)
  
      describe "Top Results", ->
        for top_result_type in TOP_RESULT_TYPES
          describe "Top #{top_result_type} Result", for_widget {
            top_result_type: top_result_type
          }, ->
            it_shows [
              ".top_#{top_result_type}_result"
            ]
   */

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/components/common_button_spec.coffee (last modified: 2016-07-08 22:43:33 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::Components::CommonButtonSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, setup_react_anchors, setup_react_buttons;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  setup_react_buttons = function() {
    var buttons;
    buttons = Scribd.R.component("JsSpecReactButton", {
      render: function() {
        return React.DOM.div({
          children: [
            this.common_button({
              children: "No extra classes"
            }), this.common_button({
              className: "slim",
              children: ".slim"
            }), this.common_button({
              className: "outline_btn",
              children: ".outline_btn"
            }), React.DOM.span({
              className: "background_for_negate",
              children: [
                this.common_button({
                  className: "outline_btn negate",
                  children: ".outline_btn.negate"
                })
              ]
            }), this.common_button({
              className: "text_btn",
              children: ".text_btn"
            }), React.DOM.span({
              className: "background_for_negate",
              children: [
                this.common_button({
                  className: "text_btn",
                  children: "text_btn:disabled",
                  disabled: true
                })
              ]
            }), React.DOM.span({
              className: "background_for_negate",
              children: [
                this.common_button({
                  className: "text_btn negate",
                  children: ".text_btn.negate"
                })
              ]
            }), this.common_button({
              children: [
                React.DOM.span({
                  className: "icon icon-play_button"
                }), "Icon (in block)"
              ]
            }), this.common_button({
              className: "facebook",
              children: ".facebook"
            }), this.common_button({
              className: "loading",
              disabled: true,
              children: ".loading:disabled"
            }), this.common_button({
              disabled: true,
              children: ":disabled"
            })
          ]
        });
      }
    });
    return Scribd.R.render(React.createElement(buttons), $("#react_buttons")[0]);
  };

  setup_react_anchors = function() {
    var anchors;
    anchors = Scribd.R.component("JsSpecReactAnchors", {
      render: function() {
        return React.DOM.div({
          children: [
            this.common_button({
              href: "#testing",
              children: "No extra classes"
            }), this.common_button({
              href: "#testing",
              className: "slim",
              children: ".slim"
            }), this.common_button({
              href: "#testing",
              className: "outline_btn",
              children: ".outline_btn"
            }), React.DOM.span({
              className: "background_for_negate",
              children: [
                this.common_button({
                  href: "#testing",
                  className: "outline_btn negate",
                  children: ".outline_btn.negate"
                })
              ]
            }), this.common_button({
              href: "#testing",
              className: "text_btn",
              children: ".text_btn"
            }), React.DOM.span({
              className: "background_for_negate",
              children: [
                this.common_button({
                  href: "#testing",
                  className: "text_btn negate",
                  children: ".text_btn.negate"
                })
              ]
            }), this.common_button({
              href: "#testing",
              children: [
                React.DOM.span({
                  className: "icon icon-play_button"
                }), "Icon (in block)"
              ]
            }), this.common_button({
              href: "#testing",
              className: "facebook",
              children: ".facebook"
            })
          ]
        });
      }
    });
    return Scribd.R.render(React.createElement(anchors), $("#react_anchors")[0]);
  };

  describe('common button', function() {
    setup_react_buttons();
    setup_react_anchors();
    it("shows all buttons", function() {
      expect($("button.flat_btn").length).toEqual(23);
      return expect($("a.flat_btn").length).toEqual(15);
    });
    it("shows all slim buttons", function() {
      return expect($(".slim").length).toEqual(4);
    });
    it("shows all text buttons", function() {
      return expect($(".text_btn").length).toEqual(10);
    });
    it("shows all negated buttons", function() {
      return expect($(".negate").length).toEqual(8);
    });
    it("shows all types with icons", function() {
      return expect($("button .icon, a .icon").length).toEqual(8);
    });
    it("shows all facebook buttons", function() {
      return expect($(".facebook").length).toEqual(4);
    });
    it("shows all loading buttons", function() {
      return expect($(".loading").length).toEqual(2);
    });
    return it("shows all disabled buttons (loading and disabled)", function() {
      return expect($(":disabled").length).toEqual(6);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/content_list/filters_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::ContentList::FiltersSpec"] = function() { (function() {
  var Filters;

  Filters = Scribd.Shared.ContentList.Filters;

  describe('Filters', function() {
    it('loads the initial state', function() {
      var filters, state;
      filters = new Filters({
        el: $('.filters')
      });
      state = filters.state();
      expect(state.showing).toBe('all');
      expect($('.showing .selected').data('option')).toBe('all');
      expect(state.sort_by).toBe('date');
      return expect($('.sort_by .selected').data('option')).toBe('date');
    });
    return it('selects options', function() {
      var filters, new_state, state;
      filters = new Filters({
        el: $('.filters')
      });
      filters.select_option($('[data-option="public"]'));
      state = filters.state();
      expect(state.showing).toBe('public');
      expect($('.showing .selected').data('option')).toBe('public');
      expect(state.sort_by).toBe('date');
      expect($('.sort_by .selected').data('option')).toBe('date');
      filters.select_option($('[data-option="title"]'));
      new_state = filters.state();
      expect(new_state.showing).toBe('public');
      expect($('.showing .selected').data('option')).toBe('public');
      expect(new_state.sort_by).toBe('title');
      return expect($('.sort_by .selected').data('option')).toBe('title');
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/content_list/header_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::ContentList::HeaderSpec"] = function() { (function() {
  var Header;

  Header = Scribd.Shared.ContentList.Header;

  describe('Header', function() {
    return it('fires "submit_search" event', function(done) {
      var $search_form, header;
      header = new Header({
        el: $('.content_list_header')
      });
      $search_form = header.$('.search_box form');
      $search_form.find('.query').val('my cool query');
      header.on('submit_search', function(query) {
        expect(query).toBe('my cool query');
        return done();
      });
      return $search_form.submit();
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/content_list/infinite_paginator_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::ContentList::InfinitePaginatorSpec"] = function() { (function() {
  var InfinitePaginator;

  InfinitePaginator = Scribd.Shared.ContentList.InfinitePaginator;

  describe('infinite paginator', function() {
    return it('fires "next_page" events', function() {
      var new_page_number, paginator;
      new_page_number = void 0;
      paginator = new InfinitePaginator({
        el: $('.infinite_paginator')
      });
      spyOn(paginator, 'trigger');
      paginator.next_page();
      return expect(paginator.trigger).toHaveBeenCalledWith('next_page');
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/content_list/item_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::ContentList::ItemSpec"] = function() { (function() {
  var Item;

  Item = Scribd.Shared.ContentList.Item;

  it('long descriptions', function(done) {
    var $description, item;
    item = new Item({
      el: $('.item')
    });
    $description = item.$('.description');
    return _.defer(function() {
      expect($description.triggerHandler('isTruncated')).toBe(true);
      return done();
    });
  });

  it('long titles', function(done) {
    var $title_link, item;
    item = new Item({
      el: $('.item')
    });
    $title_link = item.$('.title a');
    return _.defer(function() {
      expect($title_link.triggerHandler('isTruncated')).toBe(true);
      return done();
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/content_list/numbered_paginator_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::ContentList::NumberedPaginatorSpec"] = function() { (function() {
  var NumberedPaginator;

  NumberedPaginator = Scribd.Shared.NumberedPaginator;

  describe('NumberedPaginator', function() {
    var paginator;
    paginator = void 0;
    beforeEach(function() {
      return paginator = new NumberedPaginator({
        el: $('.numbered_paginator')
      });
    });
    afterEach(function() {
      return paginator.undelegateEvents();
    });
    it('displays all pages when <= 20', function() {
      paginator.update_page_count(10);
      return expect(paginator.$('.page').length).toBe(10);
    });
    return describe('displays partial pages when > 20', function() {
      beforeEach(function() {
        return paginator.update_page_count(30);
      });
      it('with ellipses on both sides', function() {
        var first_ellipsis, second_ellipsis;
        paginator.update_current_page(15);
        expect(paginator.visible_pages()).toEqual(_.range(10, 21));
        first_ellipsis = paginator.$('.pages > :first-child');
        expect(first_ellipsis.hasClass('ellipsis')).toBe(true);
        second_ellipsis = paginator.$('.pages > :last-child');
        return expect(second_ellipsis.hasClass('ellipsis')).toBe(true);
      });
      it('with an ellipsis on the right', function() {
        var ellipsis;
        paginator.update_current_page(1);
        expect(paginator.visible_pages()).toEqual(_.range(1, 11));
        ellipsis = paginator.$('.pages > :last-child');
        return expect(ellipsis.hasClass('ellipsis')).toBe(true);
      });
      return it('with an ellipsis on the left', function() {
        var ellipsis;
        paginator.update_current_page(30);
        expect(paginator.visible_pages()).toEqual(_.range(20, 31));
        ellipsis = paginator.$('.pages > :first-child');
        return expect(ellipsis.hasClass('ellipsis')).toBe(true);
      });
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/document_list/carousels_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::DocumentList::CarouselsSpec"] = function() { (function() {
  describe('Document Carousel', function() {
    return it("pages carousel", function(done) {
      $(".carousel_next").click();
      return setTimeout((function(_this) {
        return function() {
          expect($(".carousel_scrolling").scrollLeft()).toBeGreaterThan(0);
          return done();
        };
      })(this), 200);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/document_list/document_grid_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::DocumentList::DocumentGridSpec"] = function() { (function() {
  describe('Document Grid', function() {
    Scribd.Bookmarks.add_bookmark = function(data, opts) {
      var resp;
      resp = {
        data: {
          bookmark_id: 5,
          status: "currently_reading"
        }
      };
      if (opts.complete) {
        opts.complete(resp);
      }
      return resp;
    };
    Scribd.logged_in = true;
    Scribd.Bookmarks.remove_bookmark = function(data, opts) {
      return {};
    };
    return it('should slide to the right indefinitely', function() {
      new Scribd.UI.ObjectGrid($(".document_grid"));
      return expect(true).toBe(true);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/lightboxes/download_login_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::Lightboxes::DownloadLoginSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe('Download Login', function() {
    beforeEach(function() {
      var active_subscription;
      active_subscription = $(".subscription_id").text();
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open('login_to_download_lb');
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#login_to_download_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    it_does_not_show("form.login_form");
    return it_shows([".continue_as_guest_btn", ".show_signin_form", ".show_signup_form", ".facebook_login_button"]);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/lightboxes/join_to_continue_spec.coffee (last modified: 2016-07-08 22:43:33 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::Lightboxes::JoinToContinueSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe("Join to Continue Lightbox", function() {
    beforeEach(function() {
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open("join_today_lb", Scribd.JoinTodayLightbox);
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#join_today_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    return it_shows(".flat_btn.facebook", ".show_signin_form");
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/lightboxes/login_spec.coffee (last modified: 2016-07-08 22:43:33 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::Lightboxes::LoginSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe("Login Lightbox", function() {
    beforeEach(function() {
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open("login_lb", Scribd.LoginLightbox);
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#login_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    it_shows([".flat_btn.facebook", ".login_form", ".forgot_password_btn", ".join_today_btn"]);
    return it("remember me should be checked", function() {
      return expect($("input[name=rememberme]").is(":checked")).toBe(true);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/lightboxes/reset_password_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::Lightboxes::ResetPasswordSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe("Reset Password Lightbox", function() {
    beforeEach(function() {
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open("forgot_password_lb", Scribd.ForgotPasswordLightbox);
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#forgot_password_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    return it_shows([".forgot_password_form", ".back_to_login"]);
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/shared/lightboxes/signup_spec.coffee (last modified: 2016-07-08 22:43:33 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Shared::Lightboxes::SignupSpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  describe("Signup Lightbox", function() {
    beforeEach(function() {
      Scribd.Lightbox.overlay = $("#fake_overlay");
      return Scribd.Lightbox.open("signup_lb", Scribd.SignupLightbox);
    });
    it("the lightbox opened", function() {
      var opened;
      opened = $('#signup_lb').is(":visible");
      return expect(opened).toBe(true);
    });
    it_shows([".flat_btn.facebook", ".signup_form", ".signin_instead", ".signup_disclosure"]);
    return it("signup optin should be checked", function() {
      return expect($("input[name=optin]").is(":checked")).toBe(true);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/store_purchase/invalid_country_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::StorePurchase::InvalidCountrySpec"] = function() { (function() {
  var it_does_not_show, it_shows, ref, with_widget;

  ref = Scribd.JsSpec.Support, it_shows = ref.it_shows, it_does_not_show = ref.it_does_not_show;

  with_widget = Scribd.JsSpec.with_widget;

  with_widget();

  it_shows(['.document_title', '.flat_btn']);

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/theme_pickers/themes_spec.coffee (last modified: 2016-06-08 00:25:14 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::ThemePickers::ThemesSpec"] = function() { (function() {
  describe('Should load profile', function() {
    return it('has a testing sandbox', function() {
      return expect($('.theme_picker').length).toBe(2);
    });
  });

}).call(this);
 };
    


/* ----------------------------------------------------------------------
   - spec_javascripts/js_spec/upload/upload_spec.coffee (last modified: 2016-06-29 23:01:07 +0000)
   ---------------------------------------------------------------------- */

      Scribd.JS_SPEC_DEFINITIONS["JsSpec::Upload::UploadSpec"] = function() { (function() {
  var MockUpload, copyrights, has_visible_element, isCompositeComponent, ref, ref1, render, renderIntoDocument, render_to_sandbox,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = React.addons.TestUtils, renderIntoDocument = ref.renderIntoDocument, isCompositeComponent = ref.isCompositeComponent;

  ref1 = Scribd.JsSpec.React, render_to_sandbox = ref1.render_to_sandbox, has_visible_element = ref1.has_visible_element;

  beforeEach(function() {
    return jasmine.addMatchers(Scribd.JsSpec.React.custom_matchers);
  });

  render = function(c) {
    c = render_to_sandbox(c);
    expect(isCompositeComponent(c)).toBe(true);
    return c;
  };

  copyrights = [
    {
      id: 1,
      name: "streakright",
      url: "https://streak.club"
    }
  ];

  MockUpload = (function() {
    function MockUpload() {
      this.clean_title = bind(this.clean_title, this);
      this.is_quality_checking = bind(this.is_quality_checking, this);
      this.is_uploading = bind(this.is_uploading, this);
      this.is_pdf = bind(this.is_pdf, this);
      this.filename = bind(this.filename, this);
    }

    MockUpload.id = 0;

    MockUpload.prototype.filename = function() {
      this.constructor.id += 1;
      return "hello-" + this.constructor.id + ".pdf";
    };

    MockUpload.prototype.is_pdf = function() {
      return true;
    };

    MockUpload.prototype.is_uploading = function() {
      return false;
    };

    MockUpload.prototype.is_quality_checking = function() {
      return false;
    };

    MockUpload.prototype.clean_title = function() {
      return $.Deferred();
    };

    return MockUpload;

  })();

  describe("upload button", function() {
    return it("creates an upload button", function() {
      return render(Scribd.R.Upload.UploadButton({
        accept: ".png"
      }));
    });
  });

  describe("upload list", function() {
    it("creates empty upload list", function() {
      return render(Scribd.R.Upload.UploadList({
        copyrights: copyrights,
        extensions: [".pdf", ".doc"],
        uploads: [],
        can_sell: true
      }));
    });
    it("renders filetype error", function() {
      return render(Scribd.R.Upload.UploadList({
        copyrights: copyrights,
        extensions: [".pdf", ".doc"],
        filetype_error: [".dong"],
        uploads: [],
        can_sell: true
      }));
    });
    return it("creates upload list with some uploads", function() {
      return render(Scribd.R.Upload.UploadList({
        copyrights: copyrights,
        extensions: [".pdf", ".doc"],
        uploads: [new MockUpload, new MockUpload],
        can_sell: true
      }));
    });
  });

  describe("document editor", function() {
    var defaults, mock_uploaded, mock_uploading, render_editor;
    defaults = {
      copyrights: copyrights,
      can_sell: true
    };
    mock_uploading = function() {
      var upload;
      upload = new MockUpload;
      upload.is_uploading = (function(_this) {
        return function() {
          return true;
        };
      })(this);
      upload.status = "uploading";
      upload.progress_percent = 50;
      return upload;
    };
    mock_uploaded = function(more) {
      var upload;
      upload = new MockUpload;
      $.extend(upload, {
        status: "complete",
        document: {
          id: 123,
          thumbnail: "/spec/mock_image.png",
          url: "http://scrubd.com/doc/999"
        },
        with_edit_url: $.Deferred((function(_this) {
          return function(d) {
            return d.resolve();
          };
        })(this)),
        save_document: (function(_this) {
          return function() {
            return $.Deferred(function(d) {
              return d.resolve();
            });
          };
        })(this),
        document_info: (function(_this) {
          return function() {
            return $.Deferred(function(d) {
              return d.resolve({
                sharing_opts: {}
              });
            });
          };
        })(this),
        page: {
          initial_download_document: (function(_this) {
            return function() {};
          })(this)
        }
      }, more);
      return upload;
    };
    render_editor = function(opts, fn) {
      var c;
      c = Scribd.R.Upload.DocumentEditor($.extend({}, defaults, opts));
      return render(c, fn);
    };
    it("renders uploading", function() {
      return render_editor({
        upload: mock_uploading()
      });
    });
    it("renders complete", function() {
      return render_editor({
        upload: mock_uploaded()
      });
    });
    it("renders with settings open", function() {
      var c;
      c = render_editor({
        upload: mock_uploaded()
      });
      c.trigger("editor:toggle_advanced");
      c.trigger("editor:set_store", true);
      expect(c).toHaveVisibleElement(".copyright_settings");
      return expect(c).toHaveVisibleElement(".price_picker");
    });
    it("errors if there is no description", function() {
      var c;
      c = render_editor({
        upload: mock_uploaded()
      });
      c.refs.description_input.value = "";
      c.trigger("editor:save");
      expect(c).toHaveVisibleElement(".form_errors");
      return expect(c).toHaveVisibleElement(".field_err");
    });
    it("transitions to completion state", function() {
      var c;
      c = render_editor({
        upload: mock_uploaded()
      });
      c.refs.description_input.value = "Some description";
      c.trigger("editor:save");
      return has_visible_element(c, ".url_input");
    });
    it("transitions to please wait screen", function() {
      var c, upload;
      upload = mock_uploaded({
        is_uploading: (function(_this) {
          return function() {
            return true;
          };
        })(this),
        with_edit_url: $.Deferred()
      });
      c = render_editor({
        upload: upload
      });
      c.refs.description_input.value = "Some description";
      c.trigger("editor:save");
      return has_visible_element(c, ".waiting_message");
    });
    it("renders loading state when trying to save", function() {
      var c, upload;
      upload = mock_uploaded({
        with_edit_url: $.Deferred()
      });
      c = render_editor({
        upload: upload
      });
      return c.trigger("editor:save");
    });
    return it("renders failed upload", function() {
      var upload;
      upload = mock_uploaded({
        status: "failed",
        failure_reason: "Something bad happened",
        can_try_again: function() {
          return true;
        }
      });
      return render_editor({
        upload: upload
      });
    });
  });

}).call(this);
 };
    
