/************************************************************************
 * 'embeds.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-18 17:23:52 +0000
 * Generated at: 2016-07-18 19:36:32 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 16:14:56 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - public/javascripts/jquery-1.11.1.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/*!
 * jQuery JavaScript Library v1.11.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:42Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.11.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	// Minified: var a,b,c
	var input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		fragment = document.createDocumentFragment();

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== strundefined ) {
			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	// Minified: var b,c,d,e,f,g, h,i
	var div, style, a, pixelPositionVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal;

	// Setup
	div = document.createElement( "div" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];
	style = a && a.style;

	// Finish early in limited (non-browser) environments
	if ( !style ) {
		return;
	}

	style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
		style.WebkitBoxSizing === "";

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		// Support: Android 2.3
		reliableMarginRight: function() {
			if ( reliableMarginRightVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		// Minified: var b,c,d,j
		var div, body, container, contents;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = false;
		reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );
		}

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		contents = div.getElementsByTagName( "td" );
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		if ( reliableHiddenOffsetsVal ) {
			contents[ 0 ].style.display = "";
			contents[ 1 ].style.display = "none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		}

		body.removeChild( container );
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	// Minified: var a,b,c,d,e
	var input, div, select, a, opt;

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));


/* ----------------------------------------------------------------------
   - public/javascripts/jquery-migrate-1.2.1.min.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/*! jQuery Migrate v1.2.1 | (c) 2005, 2013 jQuery Foundation, Inc. and other contributors | jquery.org/license */
jQuery.migrateMute===void 0&&(jQuery.migrateMute=!0),function(e,t,n){function r(n){var r=t.console;i[n]||(i[n]=!0,e.migrateWarnings.push(n),r&&r.warn&&!e.migrateMute&&(r.warn("JQMIGRATE: "+n),e.migrateTrace&&r.trace&&r.trace()))}function a(t,a,i,o){if(Object.defineProperty)try{return Object.defineProperty(t,a,{configurable:!0,enumerable:!0,get:function(){return r(o),i},set:function(e){r(o),i=e}}),n}catch(s){}e._definePropertyBroken=!0,t[a]=i}var i={};e.migrateWarnings=[],!e.migrateMute&&t.console&&t.console.log&&t.console.log("JQMIGRATE: Logging is active"),e.migrateTrace===n&&(e.migrateTrace=!0),e.migrateReset=function(){i={},e.migrateWarnings.length=0},"BackCompat"===document.compatMode&&r("jQuery is not compatible with Quirks Mode");var o=e("<input/>",{size:1}).attr("size")&&e.attrFn,s=e.attr,u=e.attrHooks.value&&e.attrHooks.value.get||function(){return null},c=e.attrHooks.value&&e.attrHooks.value.set||function(){return n},l=/^(?:input|button)$/i,d=/^[238]$/,p=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,f=/^(?:checked|selected)$/i;a(e,"attrFn",o||{},"jQuery.attrFn is deprecated"),e.attr=function(t,a,i,u){var c=a.toLowerCase(),g=t&&t.nodeType;return u&&(4>s.length&&r("jQuery.fn.attr( props, pass ) is deprecated"),t&&!d.test(g)&&(o?a in o:e.isFunction(e.fn[a])))?e(t)[a](i):("type"===a&&i!==n&&l.test(t.nodeName)&&t.parentNode&&r("Can't change the 'type' of an input or button in IE 6/7/8"),!e.attrHooks[c]&&p.test(c)&&(e.attrHooks[c]={get:function(t,r){var a,i=e.prop(t,r);return i===!0||"boolean"!=typeof i&&(a=t.getAttributeNode(r))&&a.nodeValue!==!1?r.toLowerCase():n},set:function(t,n,r){var a;return n===!1?e.removeAttr(t,r):(a=e.propFix[r]||r,a in t&&(t[a]=!0),t.setAttribute(r,r.toLowerCase())),r}},f.test(c)&&r("jQuery.fn.attr('"+c+"') may use property instead of attribute")),s.call(e,t,a,i))},e.attrHooks.value={get:function(e,t){var n=(e.nodeName||"").toLowerCase();return"button"===n?u.apply(this,arguments):("input"!==n&&"option"!==n&&r("jQuery.fn.attr('value') no longer gets properties"),t in e?e.value:null)},set:function(e,t){var a=(e.nodeName||"").toLowerCase();return"button"===a?c.apply(this,arguments):("input"!==a&&"option"!==a&&r("jQuery.fn.attr('value', val) no longer sets properties"),e.value=t,n)}};var g,h,v=e.fn.init,m=e.parseJSON,y=/^([^<]*)(<[\w\W]+>)([^>]*)$/;e.fn.init=function(t,n,a){var i;return t&&"string"==typeof t&&!e.isPlainObject(n)&&(i=y.exec(e.trim(t)))&&i[0]&&("<"!==t.charAt(0)&&r("$(html) HTML strings must start with '<' character"),i[3]&&r("$(html) HTML text after last tag is ignored"),"#"===i[0].charAt(0)&&(r("HTML string cannot start with a '#' character"),e.error("JQMIGRATE: Invalid selector string (XSS)")),n&&n.context&&(n=n.context),e.parseHTML)?v.call(this,e.parseHTML(i[2],n,!0),n,a):v.apply(this,arguments)},e.fn.init.prototype=e.fn,e.parseJSON=function(e){return e||null===e?m.apply(this,arguments):(r("jQuery.parseJSON requires a valid JSON string"),null)},e.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||0>e.indexOf("compatible")&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e.browser||(g=e.uaMatch(navigator.userAgent),h={},g.browser&&(h[g.browser]=!0,h.version=g.version),h.chrome?h.webkit=!0:h.webkit&&(h.safari=!0),e.browser=h),a(e,"browser",e.browser,"jQuery.browser is deprecated"),e.sub=function(){function t(e,n){return new t.fn.init(e,n)}e.extend(!0,t,this),t.superclass=this,t.fn=t.prototype=this(),t.fn.constructor=t,t.sub=this.sub,t.fn.init=function(r,a){return a&&a instanceof e&&!(a instanceof t)&&(a=t(a)),e.fn.init.call(this,r,a,n)},t.fn.init.prototype=t.fn;var n=t(document);return r("jQuery.sub() is deprecated"),t},e.ajaxSetup({converters:{"text json":e.parseJSON}});var b=e.fn.data;e.fn.data=function(t){var a,i,o=this[0];return!o||"events"!==t||1!==arguments.length||(a=e.data(o,t),i=e._data(o,t),a!==n&&a!==i||i===n)?b.apply(this,arguments):(r("Use of jQuery.fn.data('events') is deprecated"),i)};var j=/\/(java|ecma)script/i,w=e.fn.andSelf||e.fn.addBack;e.fn.andSelf=function(){return r("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"),w.apply(this,arguments)},e.clean||(e.clean=function(t,a,i,o){a=a||document,a=!a.nodeType&&a[0]||a,a=a.ownerDocument||a,r("jQuery.clean() is deprecated");var s,u,c,l,d=[];if(e.merge(d,e.buildFragment(t,a).childNodes),i)for(c=function(e){return!e.type||j.test(e.type)?o?o.push(e.parentNode?e.parentNode.removeChild(e):e):i.appendChild(e):n},s=0;null!=(u=d[s]);s++)e.nodeName(u,"script")&&c(u)||(i.appendChild(u),u.getElementsByTagName!==n&&(l=e.grep(e.merge([],u.getElementsByTagName("script")),c),d.splice.apply(d,[s+1,0].concat(l)),s+=l.length));return d});var Q=e.event.add,x=e.event.remove,k=e.event.trigger,N=e.fn.toggle,T=e.fn.live,M=e.fn.die,S="ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",C=RegExp("\\b(?:"+S+")\\b"),H=/(?:^|\s)hover(\.\S+|)\b/,A=function(t){return"string"!=typeof t||e.event.special.hover?t:(H.test(t)&&r("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"),t&&t.replace(H,"mouseenter$1 mouseleave$1"))};e.event.props&&"attrChange"!==e.event.props[0]&&e.event.props.unshift("attrChange","attrName","relatedNode","srcElement"),e.event.dispatch&&a(e.event,"handle",e.event.dispatch,"jQuery.event.handle is undocumented and deprecated"),e.event.add=function(e,t,n,a,i){e!==document&&C.test(t)&&r("AJAX events should be attached to document: "+t),Q.call(this,e,A(t||""),n,a,i)},e.event.remove=function(e,t,n,r,a){x.call(this,e,A(t)||"",n,r,a)},e.fn.error=function(){var e=Array.prototype.slice.call(arguments,0);return r("jQuery.fn.error() is deprecated"),e.splice(0,0,"error"),arguments.length?this.bind.apply(this,e):(this.triggerHandler.apply(this,e),this)},e.fn.toggle=function(t,n){if(!e.isFunction(t)||!e.isFunction(n))return N.apply(this,arguments);r("jQuery.fn.toggle(handler, handler...) is deprecated");var a=arguments,i=t.guid||e.guid++,o=0,s=function(n){var r=(e._data(this,"lastToggle"+t.guid)||0)%o;return e._data(this,"lastToggle"+t.guid,r+1),n.preventDefault(),a[r].apply(this,arguments)||!1};for(s.guid=i;a.length>o;)a[o++].guid=i;return this.click(s)},e.fn.live=function(t,n,a){return r("jQuery.fn.live() is deprecated"),T?T.apply(this,arguments):(e(this.context).on(t,this.selector,n,a),this)},e.fn.die=function(t,n){return r("jQuery.fn.die() is deprecated"),M?M.apply(this,arguments):(e(this.context).off(t,this.selector||"**",n),this)},e.event.trigger=function(e,t,n,a){return n||C.test(e)||r("Global events are undocumented and deprecated"),k.call(this,e,t,n||document,a)},e.each(S.split("|"),function(t,n){e.event.special[n]={setup:function(){var t=this;return t!==document&&(e.event.add(document,n+"."+e.guid,function(){e.event.trigger(n,null,t,!0)}),e._data(this,n,e.guid++)),!1},teardown:function(){return this!==document&&e.event.remove(document,n+"."+e._data(this,n)),!1}}})}(jQuery,window);


/* ----------------------------------------------------------------------
   - public/javascripts/underscore.js (last modified: 2016-04-19 20:59:57 +0000)
   ---------------------------------------------------------------------- */
// Underscore.js 1.4.4
// ===================

// Added _.throttle options for leading/trailing from rev 1.5.0

// > http://underscorejs.org
// > (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
// > Underscore may be freely distributed under the MIT license.

// Baseline setup
// --------------
(function() {

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.4.4';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? null : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value || _.identity);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    var args = slice.call(arguments, 2);
    return function() {
      return func.apply(context, args.concat(slice.call(arguments)));
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] == null) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(n);
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    escape: /\{\{(?![&])(.+?)\}\}/g,
    interpolate: /\{\{&(.+?)\}\}/g,
    evaluate: /\{\[(?![&])(.+?)\]\}/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);


/* ----------------------------------------------------------------------
   - public/javascripts/document_url.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
if (!window.Scribd) Scribd = {};

Scribd.DocumentUrl = {
  // Make it work with other hosts?
  urlByDocId: function(doc_id, options){
                if (!options) options = {};
                var host = options.env == "production" ? "scribd.com" : window.location.hostname;
                var port = options.env == "production" ? 80 : window.location.port;

                var prefix = "/doc/"
                if (options.prefix)
                  prefix = options.prefix

                var url = prefix + doc_id;

                if (!options.relative_path){
                  if(port && port != 80 && port != 443)
                    port = ":" + port;
                  else
                    port = "";

                  url = "http://" + host + port + url;
                }

                if (options.slug)
                  url += "/" + options.slug;

                if (options.secret_password && options.secret_password.length > 0)
                  url += "?secret_password=" + options.secret_password;

                return url;
              }
};


/* ----------------------------------------------------------------------
   - public/javascripts/geoip.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/**
 * GeoIP module.
 *
 *  This lets you get the geoip country code with somewhat low latency.
 * 
 *  In order it checks for geo-ssi, local-storage (5 day timeout), ajax (jquery, prototype), jsonp.
 */

if (!window.Scribd) Scribd = {};

Scribd.geoModule = (function(){

  var searchOrder = [checkSSI, checkLocalstorage, fetchJquery, fetchPrototype, fetchJsonp],
      attempt = 0,
      queries = [updateLocalStorage],
      done, result, fresh,
      cc_regex = /^([A-Z]{2})\s*$/;

  var localStorageKey = "_geo_cc_cache",
      localStorageTimeout = 432000000; // 5 days in milliseconds

  function respondToQueries(){
    var queryCallback;
    while(queryCallback = queries.shift()){
      queryCallback(result,fresh);
    }
  }

  function queryGeo(callback_or_now){
    if(callback_or_now === "now") {
       if (done) {
         return result;
       }
    }
    else {
      queries.push(callback_or_now);
      if (done){
        respondToQueries();
      }
    }
  }

  function searchForGeo(){
    if(attempt < searchOrder.length){
      searchOrder[attempt](work_callback);
    }
  }

  // internal callback for geo lookup methods
  function work_callback(_result, _fresh){
    if(_result && _result.length == 2){
      done = true;
      fresh = _fresh;
      result = _result;
      respondToQueries();
    }else{
      attempt += 1;
      searchForGeo();
    }
  }

  // maybe move these into a hash?
  function checkSSI(callback){
    callback(window.Scribd._geo_ssi_value, true);
  }

  function checkLocalstorage(callback){
    var value;

    if('localStorage' in window){
      try{
        value = window.localStorage.getItem(localStorageKey);
        if (value){
          value = JSON.parse(value);
          now = Date.now();
          if (value.date <= now && value.date > (now - localStorageTimeout)){
            return callback(value.geo_cc, false);
          }
        }
      }catch(e){
      }
    }
    callback();
  }

  function fetchJquery(callback){
    if(window.jQuery !== undefined){
      var xhr = window.jQuery.post('/ssi/geoip_cc', {'dataType': 'text'})
      xhr.always(function(){
        if(xhr.status == 200){
          var match = xhr.responseText.match(cc_regex);
          if(match){
            callback(match[1], true);
          } else{
            callback();
          }
        }else{
          callback();
        }
      });
    }else{
      return callback();
    }
  }

  function fetchPrototype(callback){
    if(window.Prototype){
      var req = new Ajax.Request('/ssi/geoip_cc',
        {
          method:'post',
          onSuccess: function(transport){
            var match = transport.responseText.match(cc_regex);
            if(match){
              callback(match[1], true);
            } else{
              callback();
            }
          },
          onFailure: function(){
            callback();
          }
        });
    }else{
      callback();
    }
  }

  function fetchJsonp(callback){
    var randId = "_geoip_"+Math.floor(Math.random()*(-1>>>1)).toString(16);
    window[randId] = function(result){
      try {
        delete window.randId;
      } catch (e) {
        window.randId = undefined;
      }
      callback(result);
    };

    var startjsonp = function(){
      var script = document.createElement("script");
      script.type="text/javascript";
      script.src="//www.scribd.com/ssi/geoip_script?callback="+randId;
      document.body.appendChild(script);
    };

    if(document.body){
      startjsonp();
    }else if(document.addEventListener){
      document.addEventListener( "DOMContentLoaded", startjsonp, false );
    }else if(document.attachEvent){
      document.attachEvent( "onreadystatechange", startjsonp);
    }else{
      callback();
    }
  }

  function updateLocalStorage(geo_cc, fresh){
    if(fresh !== true){ return; }
    if('localStorage' in window){
      try{
        var now = Date.now(),
            value = JSON.stringify({'geo_cc':geo_cc, 'date':Date.now()});
        window.localStorage.setItem(localStorageKey, value);
      }catch(e){
      }
    }
  }

  searchForGeo();
  return queryGeo;
})();




/* ----------------------------------------------------------------------
   - public/javascripts/rat.js (last modified: 2016-05-09 22:37:19 +0000)
   ---------------------------------------------------------------------- */
var RAT_API_VERSION = '2';

var ratInit = (function () {
    // Production steps of ECMA-262, Edition 5, 15.4.4.19
    // Reference: http://es5.github.com/#x15.4.4.19
    if (!Array.prototype.map) {
      Array.prototype.map = function(callback, thisArg) {
        var T, A, k;

        if (this == null) {
          throw new TypeError(" this is null or not defined");
        }

        var O = Object(this);

        var len = O.length >>> 0;

        if (typeof callback !== "function") {
          throw new TypeError(callback + " is not a function");
        }

        if (thisArg) {
          T = thisArg;
        }

        A = new Array(len);

        k = 0;

        while(k < len) {
          var kValue, mappedValue;
          if (k in O) {
            kValue = O[ k ];
            mappedValue = callback.call(T, kValue, k, O);
            A[ k ] = mappedValue;
          }
          k++;
        }

        return A;
      };
    }

    // from https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Math/random
    function getRandomInt(min, max)  {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    var Base64 = {

      // private property
      _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

      // public method for encoding
      encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);

          enc1 = chr1 >> 2;
          enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
          enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
          enc4 = chr3 & 63;

          if (isNaN(chr2)) {
            enc3 = enc4 = 64;
          } else if (isNaN(chr3)) {
            enc4 = 64;
          }

          output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
      },

      // private method for UTF-8 encoding
      _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

          var c = string.charCodeAt(n);

          if (c < 128) {
            utftext += String.fromCharCode(c);
          }
          else if((c > 127) && (c < 2048)) {
            utftext += String.fromCharCode((c >> 6) | 192);
            utftext += String.fromCharCode((c & 63) | 128);
          }
          else {
            utftext += String.fromCharCode((c >> 12) | 224);
            utftext += String.fromCharCode(((c >> 6) & 63) | 128);
            utftext += String.fromCharCode((c & 63) | 128);
          }

        }

        return utftext;
      }
    };

    function jsonp (url, callback) {

      var head = document.getElementsByTagName('head')[0];
      var newScript = document.createElement('script');


      var callbackName = 'jsonp' + getRandomInt(0, 1000000);

      window[callbackName] = function (data) {
        callback(data[0]);
        window[callbackName] = undefined;
      };

      var newurl = url.replace(/(.*\?.*)(\?)/, '$1' + callbackName);
      newScript.src = newurl;
      newScript.async = true;
      newScript.defer = 'defer';
      head.appendChild(newScript);
      return newScript;
    }

    function now() {
      return (new Date()).getTime() / 1000.0;
    }

    function encodeObj(raw_args) {
      var args = [];

      for (var k in raw_args) {
        if (raw_args.hasOwnProperty(k)) {
          var v = raw_args[k];
          if (v === undefined) {
            v = null;
          }
          v = Base64.encode(JSON.stringify(v));
          args.push(k + '=' + encodeURIComponent(v));
        }
      }
      return args.join('&');
    }


    function addListener(el, e, f) {
      if (el.addEventListener){
        el.addEventListener(e, f, false);
      } else if (el.attachEvent){
        el.attachEvent('on' + e, f);
      }
    }


    function removeListener(el, e, f) {
      if (el.removeEventListener){
        el.removeEventListener(e, f, false);
      } else if (el.detachEvent){
        el.detachEvent('on' + e, f);
      }
    }

    // vid is optional
    function Rats (hosts, otherData) {
      this.hosts = hosts;
      this.es = [];
      this.vs = [];
      this.ts = [];
      this.otherData = otherData;
      this._flushTimeoutId = null;
      this.lastPing = null;
      this.numPings = 0;
      this.dhost = this._randHost() + RAT_API_VERSION + '/';
    }

    Rats.prototype.start = function () {
      var self = this;
      Rats._unloaded = false;

      this._getVid();

      addListener(window, 'load', function () {self.docLoaded = true;});

      function unloadf () {
        if (!Rats._unloaded) {
          Rats._unloaded = true;
          if (self.lps) {
            self.lps.parentElement.removeChild(self.lps);
            delete self.lps;
            self.lps = null;
          }

          self.logEvent('dom.window.beforeunload');
          self.flushEvents(true);
          //remove the long poll script
        }
      }

      this.unloadf = unloadf;


      addListener(window, 'beforeunload', unloadf);
      addListener(window, 'unload', unloadf);
    };

    Rats.prototype._getVid = function (callback, maxRetries, retries, encodedURL) {
      if (this.disabled()) return;
      var url = encodedURL || (this.dhost + 'getvid.jsonp?callback=?&' + encodeObj({
        l: location.href,
        r: (document.referrer || document.referer || null),
        ea: this.otherData,
        ubtc: this._getUBTC()
      }));

      var self = this;
      retries = retries || 0;
      maxRetries = (maxRetries || 9) - 1; // default: up to 2^8 seconds = 256 seconds = 4.26 minutes

      jsonp(url, function (data) {
        if (data.status != 'success') {
          if (retries < maxRetries) {
            setTimeout(function() {
              self._getVid(callback, maxRetries, retries+1, url);
            }, Math.pow(2, retries) * 1000);
          } else {
            self.disable();
          }
          return;
        }

        self.vid = data.vid;
        self.lastFlushed = now();
        self._setupPing();
        self.logTimeoutLen = data.logTimeoutLen;

        if (self._onGetVid) {
          for (var i = 0; i < self._onGetVid.length; i++) {
            self._onGetVid[i](self.vid)
          }
          delete self._onGetVid;
        }

        if (callback) {
          callback(self.vid);
        }
      });
    };

    // To have it just ping the server on a flush timeout
    // This won't add an event, but just make the last seen time longer
    Rats.prototype._setupPing = function () {
      if (this.disabled()) {return;}
      if (this._pingSetup) {
        return;
      }
      this._pingSetup = true;
      var self = this;
      function ping() {
        self.lastPing = now();
        self.numPings += 1;
        self._pingSetup = false;
        self._startFlushTimeout();
        removeListener(document, 'mousemove', ping);
        setTimeout(function () {self._setupPing();}, 1000.0); // Update the ping every 1 seconds
      }

      addListener(document, 'mousemove', ping);
    };


    Rats.prototype._resetBuffers = function () {
      this.es = [];
      this.ts = [];
      this.vs = [];
      this.lastFlushed = this.lastPing;
      this.lastPing = null;
      this.numPings = 0;
      this._clearFlushTimeout();
    };

    Rats.prototype._getUBTC = function () {
      if ($.parseQuery != null) {
        this._ubtc = this._ubtc || $.parseQuery(document.cookie.replace(/; */g, '&')).scribd_ubtc;
      } else {
        this._ubtc = this._ubtc || document.cookie.replace(/; */g, '&').parseQuery().scribd_ubtc;
      }

      return this._ubtc;
    };

    // useImg uses an image to ping instead of jsonp
    Rats.prototype.flushEvents = function (useImg, callback) {
      var self = this;
      if (this.disabled()) {return;}

      // dont have vid? wait until we have it
      if (!this.vid) {
        this.withVid(function() { self.flushEvents() });
        return;
      }

      if ( typeof(Scribd.log) === 'function' ) {
        title = this.es.join(' | ');
        Scribd.log('$rat.parent.es: ' + title);
        Scribd.log('$rat.parent.vs: ' + this.vs.map(function(o) { return JSON.stringify(o); }).join(' | '));
      }

      var args = encodeObj({
        es: this.es,
        ts: this.ts,
        vs: this.vs,
        n: now(),
        lp: this.lastPing,
        np: this.numPings,
        ubtc: this._getUBTC()
      });
      this._resetBuffers();
      // Turn the args array into a string

      //var args = 'es=' + eString + '&ts=' + tString + '&vs=' + vString + '&n=' + nowString + '&lp=' + lastPingString + '&np=' + numPingsString;
      //
      var self = this;

      if (useImg) {
        var i = new Image();
        i.src = this.dhost + this.vid + '/de.png?rand=' + getRandomInt(0,100000) + '&' + args;
        document.body.appendChild(i);
      } else {
        this._flushRawEvents(this.dhost + this.vid + '/de.jsonp?callback=?&' + args, callback);
      }
    };


    Rats.prototype._flushRawEvents = function (url, callback, maxRetries, retries) {
      if ( this.disabled() ) return;

      var self = this;
      retries = retries || 0;
      maxRetries = (maxRetries || 9) - 1;  // default: up to 2^8 seconds = 256 seconds = 4.26 minutes

      jsonp(url, function (data) {
        if (data.status == 'success') {
          if (callback) {
            callback();
          }
        } else if (retries < maxRetries) {
          setTimeout(function() {
            self._flushRawEvents(url, callback, maxRetries, retries+1);
          }, Math.pow(2, retries) * 1000);
        } else {
          self.disable(); // just disable it so we don't overload the server
        }
      });
    };

    // takes a variable length of arguments
    Rats.prototype.logEvent = function (e, v) {
      if (typeof Scribd !== "undefined" && Scribd !== null ? Scribd.logging_enabled : void 0) {
        console.log("%crats:", "background-image: -webkit-gradient( linear, left top, right top, color-stop(0.0, #ED9C33), color-stop(1.0, #ED337C)); color:transparent; font-weight: bold; -webkit-background-clip: text; font-size: 150%;", e,v);
        $(document.body).trigger("scribd:rats_event", [e, v]);
      }

      if (this.disabled()) {return;}
      var n = now();
      this.lastPing = n;
      v = v || null;
      this.es.push(e);
      this.vs.push(v);
      this.ts.push(n);
      this._startFlushTimeout();
    };

    Rats.prototype.l = Rats.prototype.logEvent;

    Rats.prototype._startFlushTimeout = function () {
      if (this.disabled()) {return;}
      if (this.es.length >= 10) {
        var self = this;
        this.flushEvents(false, function () {self._setupPing();});
        return;
      }
      if (this._flushTimeoutId !== null || !this.logTimeoutLen) {
        return;
      }

      var self = this;
      this._flushTimeoutId = window.setTimeout( function () {
          self.flushEvents(false, function () {self._setupPing();});
        }, this._getTimeoutLen());
    };

    Rats.prototype._getTimeoutLen = function () {
      return this.logTimeoutLen - ((now() - this.lastFlushed) * 1000.0);
    };

    Rats.prototype._clearFlushTimeout = function () {
      if (this._flushTimeoutId === null) {
        return;
      }
      window.clearTimeout(this._flushTimeoutId);
      this._flushTimeoutId = null;
    };

    Rats.prototype._randHost = function (urlSuffix) {
      urlSuffix = urlSuffix || '';
      return this.hosts[getRandomInt(0, this.hosts.length-1)] + urlSuffix;
    };

    Rats.prototype.disable = function () {
      this._disabled = true;
      if (this.unloadf) {
        removeListener(window, 'beforeunload', this.unloadf);
        removeListener(window, 'unload', this.unloadf);
      }
    };

    Rats.prototype.disabled = function () {
      return this._disabled;
    };

    Rats.prototype.root = function () {
      return this;
    };

    Rats.prototype.withVid = function(fn) {
      if (this.vid) {
        return fn(this.vid);
      }
      (this._onGetVid = this._onGetVid || []).push(fn)
    };

    function makeScope(parent, prefix) {
      function RatScope(e, v) {
        if (prefix) {
          e = prefix + '.' + e;
        }
        parent.logEvent(e, v);
      }

      RatScope.logEvent = RatScope;

      RatScope.parent = parent;

      RatScope.root = function () {
        return parent.root();
      };

      RatScope.disable = function () {
        parent.disable();
      };

      RatScope.disabled = function () {
        return parent.disabled();
      };

      RatScope.s = function (prefix) {
        return makeScope(RatScope, prefix);
      };

      // Binds a logging message to an event. It will fire no more than fireTimeout/1000.0 per second
      // It will fire at most of maxTimes
      // maxTimes and fireTimeout are optional Arguments
      // TODO: make it so you can pass it a function insetad of an event name
      // Use case is binding it to keypress, and you want to have a custom key for each one
      RatScope.o = function (element, domEvent, logEventNameOrFunction, maxTimes, fireTimeout) {
        maxTimes = maxTimes || -1;
        fireTimeout = fireTimeout || 1000;
        if (RatScope.disabled()) {
          return;
        }

        var isSetUp = false;

        function setUp() {
          if (isSetUp) {
            return;
          } else {
            isSetUp = true;
          }
        }

        isSetUp = true;
        var self = this;
        function fire(e) {
          if (!e) {
            e = window.event;
          }
          if (logEventNameOrFunction instanceof Function) {
            RatScope.logEvent(logEventNameOrFunction.call(this, e));
          } else {
            RatScope.logEvent(logEventNameOrFunction);
          }

          removeListener(element, domEvent, fire);
          maxTimes -= 1;
          if (maxTimes == -1 || maxTimes > 0) {
            setTimeout(function () {setUp();}, fireTimeout); // Update the ping every 1 seconds
          }
        }

        addListener(element, domEvent, fire);
      };

      return RatScope;
    }

    // Allow us to create a disabled rat.
    return function (ratHosts, otherData, disabled) {
      var r = new Rats(ratHosts, otherData);
      if (disabled) {
        r.disable();
      } else {
        r.start();
      }
      return makeScope(r);
    };
  })();


/* ----------------------------------------------------------------------
   - public/javascripts/underscore.string.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '2.2.0rc'

!function(root, String){
  'use strict';

  // Defining helper functions.

  var nativeTrim = String.prototype.trim;
  var nativeTrimRight = String.prototype.trimRight;
  var nativeTrimLeft = String.prototype.trimLeft;

  var parseNumber = function(source) { return source * 1 || 0; };

  var strRepeat = function(str, qty){
    if (qty < 1) return '';
    var result = '';
    while (qty > 0) {
      if (qty & 1) result += str;
      qty >>= 1, str += str;
    }
    return result;
  };

  var slice = [].slice;

  var defaultToWhiteSpace = function(characters) {
    if (characters == null)
      return '\\s';
    else if (characters.source)
      return characters.source;
    else
      return '[' + _s.escapeRegExp(characters) + ']';
  };

  var escapeChars = {
    lt: '<',
    gt: '>',
    quot: '"',
    apos: "'",
    amp: '&'
  };

  var reversedEscapeChars = {};
  for(var key in escapeChars){ reversedEscapeChars[escapeChars[key]] = key; }

  // sprintf() for JavaScript 0.7-beta1
  // http://www.diveintojavascript.com/projects/javascript-sprintf
  //
  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
  // All rights reserved.

  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }

    var str_repeat = strRepeat;

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          } else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
          }
          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw new Error('[_.sprintf] huh?');
                }
              }
            }
            else {
              throw new Error('[_.sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw new Error('[_.sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();



  // Defining underscore.string

  var _s = {

    VERSION: '2.2.0rc',

    isBlank: function(str){
      if (str == null) str = '';
      return (/^\s*$/).test(str);
    },

    stripTags: function(str){
      if (str == null) return '';
      return String(str).replace(/<\/?[^>]+>/g, '');
    },

    capitalize : function(str){
      str = str == null ? '' : String(str);
      return str.charAt(0).toUpperCase() + str.slice(1);
    },

    chop: function(str, step){
      if (str == null) return [];
      str = String(str);
      step = ~~step;
      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
    },

    clean: function(str){
      return _s.strip(str).replace(/\s+/g, ' ');
    },

    count: function(str, substr){
      if (str == null || substr == null) return 0;
      return String(str).split(substr).length - 1;
    },

    chars: function(str) {
      if (str == null) return [];
      return String(str).split('');
    },

    swapCase: function(str) {
      if (str == null) return '';
      return String(str).replace(/\S/g, function(c){
        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
      });
    },

    escapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/[&<>"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });
    },

    unescapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/\&([^;]+);/g, function(entity, entityCode){
        var match;

        if (entityCode in escapeChars) {
          return escapeChars[entityCode];
        } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
          return String.fromCharCode(parseInt(match[1], 16));
        } else if (match = entityCode.match(/^#(\d+)$/)) {
          return String.fromCharCode(~~match[1]);
        } else {
          return entity;
        }
      });
    },

    escapeRegExp: function(str){
      if (str == null) return '';
      return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    },

    splice: function(str, i, howmany, substr){
      var arr = _s.chars(str);
      arr.splice(~~i, ~~howmany, substr);
      return arr.join('');
    },

    insert: function(str, i, substr){
      return _s.splice(str, i, 0, substr);
    },

    include: function(str, needle){
      if (needle === '') return true;
      if (str == null) return false;
      return String(str).indexOf(needle) !== -1;
    },

    join: function() {
      var args = slice.call(arguments),
        separator = args.shift();

      if (separator == null) separator = '';

      return args.join(separator);
    },

    lines: function(str) {
      if (str == null) return [];
      return String(str).split("\n");
    },

    reverse: function(str){
      return _s.chars(str).reverse().join('');
    },

    startsWith: function(str, starts){
      if (starts === '') return true;
      if (str == null || starts == null) return false;
      str = String(str); starts = String(starts);
      return str.length >= starts.length && str.slice(0, starts.length) === starts;
    },

    endsWith: function(str, ends){
      if (ends === '') return true;
      if (str == null || ends == null) return false;
      str = String(str); ends = String(ends);
      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;
    },

    succ: function(str){
      if (str == null) return '';
      str = String(str);
      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);
    },

    titleize: function(str){
      if (str == null) return '';
      return String(str).replace(/(?:^|\s)\S/g, function(c){ return c.toUpperCase(); });
    },

    camelize: function(str){
      return _s.trim(str).replace(/[-_\s]+(.)?/g, function(match, c){ return c.toUpperCase(); });
    },

    underscored: function(str){
      return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },

    dasherize: function(str){
      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
    },

    classify: function(str){
      return _s.titleize(String(str).replace(/_/g, ' ')).replace(/\s/g, '');
    },

    humanize: function(str){
      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));
    },

    trim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrim) return nativeTrim.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('\^' + characters + '+|' + characters + '+$', 'g'), '');
    },

    ltrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('^' + characters + '+'), '');
    },

    rtrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp(characters + '+$'), '');
    },

    truncate: function(str, length, truncateStr){
      if (str == null) return '';
      str = String(str); truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    },

    /**
     * _s.prune: a more elegant version of truncate
     * prune extra chars, never leaving a half-chopped word.
     * @author github.com/rwz
     */
    prune: function(str, length, pruneStr){
      if (str == null) return '';

      str = String(str); length = ~~length;
      pruneStr = pruneStr != null ? String(pruneStr) : '...';

      if (str.length <= length) return str;

      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },
        template = str.slice(0, length+1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

      if (template.slice(template.length-2).match(/\w\w/))
        template = template.replace(/\s*\S+$/, '');
      else
        template = _s.rtrim(template.slice(0, template.length-1));

      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;
    },

    words: function(str, delimiter) {
      if (_s.isBlank(str)) return [];
      return _s.trim(str, delimiter).split(delimiter || /\s+/);
    },

    pad: function(str, length, padStr, type) {
      str = str == null ? '' : String(str);
      length = ~~length;

      var padlen  = 0;

      if (!padStr)
        padStr = ' ';
      else if (padStr.length > 1)
        padStr = padStr.charAt(0);

      switch(type) {
        case 'right':
          padlen = length - str.length;
          return str + strRepeat(padStr, padlen);
        case 'both':
          padlen = length - str.length;
          return strRepeat(padStr, Math.ceil(padlen/2)) + str
                  + strRepeat(padStr, Math.floor(padlen/2));
        default: // 'left'
          padlen = length - str.length;
          return strRepeat(padStr, padlen) + str;
        }
    },

    lpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr);
    },

    rpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'right');
    },

    lrpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'both');
    },

    sprintf: sprintf,

    vsprintf: function(fmt, argv){
      argv.unshift(fmt);
      return sprintf.apply(null, argv);
    },

    toNumber: function(str, decimals) {
      if (str == null || str == '') return 0;
      str = String(str);
      var num = parseNumber(parseNumber(str).toFixed(~~decimals));
      return num === 0 && !str.match(/^0+$/) ? Number.NaN : num;
    },

    numberFormat : function(number, dec, dsep, tsep) {
      if (isNaN(number) || number == null) return '';

      number = number.toFixed(~~dec);
      tsep = tsep || ',';

      var parts = number.split('.'), fnums = parts[0],
        decimals = parts[1] ? (dsep || '.') + parts[1] : '';

      return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
    },

    strRight: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strRightBack: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.lastIndexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strLeft: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    strLeftBack: function(str, sep){
      if (str == null) return '';
      str += ''; sep = sep != null ? ''+sep : sep;
      var pos = str.lastIndexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    toSentence: function(array, separator, lastSeparator, serial) {
      separator = separator || ', '
      lastSeparator = lastSeparator || ' and '
      var a = array.slice(), lastMember = a.pop();

      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;

      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
    },

    toSentenceSerial: function() {
      var args = slice.call(arguments);
      args[3] = true;
      return _s.toSentence.apply(_s, args);
    },

    slugify: function(str) {
      if (str == null) return '';

      var from  = "ąàáäâãåæćęèéëêìíïîłńòóöôõøùúüûñçżź",
          to    = "aaaaaaaaceeeeeiiiilnoooooouuuunczz",
          regex = new RegExp(defaultToWhiteSpace(from), 'g');

      str = String(str).toLowerCase().replace(regex, function(c){
        var index = from.indexOf(c);
        return to.charAt(index) || '-';
      });

      return _s.dasherize(str.replace(/[^\w\s-]/g, ''));
    },

    surround: function(str, wrapper) {
      return [wrapper, str, wrapper].join('');
    },

    quote: function(str) {
      return _s.surround(str, '"');
    },

    exports: function() {
      var result = {};

      for (var prop in this) {
        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;
        result[prop] = this[prop];
      }

      return result;
    },

    repeat: function(str, qty, separator){
      if (str == null) return '';

      qty = ~~qty;

      // using faster implementation if separator is not needed;
      if (separator == null) return strRepeat(String(str), qty);

      // this one is about 300x slower in Google Chrome
      for (var repeat = []; qty > 0; repeat[--qty] = str) {}
      return repeat.join(separator);
    },

    levenshtein: function(str1, str2) {
      if (str1 == null && str2 == null) return 0;
      if (str1 == null) return String(str2).length;
      if (str2 == null) return String(str1).length;

      str1 = String(str1); str2 = String(str2);

      var current = [], prev, value;

      for (var i = 0; i <= str2.length; i++)
        for (var j = 0; j <= str1.length; j++) {
          if (i && j)
            if (str1.charAt(j - 1) === str2.charAt(i - 1))
              value = prev;
            else
              value = Math.min(current[j], current[j - 1], prev) + 1;
          else
            value = i + j;

          prev = current[j];
          current[j] = value;
        }

      return current.pop();
    }
  };

  // Aliases

  _s.strip    = _s.trim;
  _s.lstrip   = _s.ltrim;
  _s.rstrip   = _s.rtrim;
  _s.center   = _s.lrpad;
  _s.rjust    = _s.lpad;
  _s.ljust    = _s.rpad;
  _s.contains = _s.include;
  _s.q        = _s.quote;

  // CommonJS module is defined
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      // Export module
      module.exports = _s;
    }
    exports._s = _s;

  } else if (typeof define === 'function' && define.amd) {
    // Register as a named module with AMD.
    define('underscore.string', [], function() {
      return _s;
    });

  } else {
    // Integrate with Underscore.js if defined
    // or create our own underscore object.
    root._ = root._ || {};
    root._.string = root._.str = _s;
  }

}(this, String);


/* ----------------------------------------------------------------------
   - public/javascripts/underscore.string.patches.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
_.mixin({ 
  "each_slice": function(obj, size, iterator, context) {
    if(size === 0)
      return;
    for (var i=0, l=obj.length; i < l; i+=size) {
      iterator.call(context, obj.slice(i,i+size), i, obj);
    } 
  }
});

_.mixin(_.string.exports());


/* ----------------------------------------------------------------------
   - public/javascripts/shared/ZeroClipboard.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
// Simple Set Clipboard System
// Author: Joseph Huckaby

var ZeroClipboard = {

	version: "1.0.7",
	clients: {}, // registered upload clients on page, indexed by id
	moviePath: 'ZeroClipboard.swf', // URL to movie
	nextId: 1, // ID of next movie

	$: function(thingy) {
		// simple DOM lookup utility function
		if (typeof(thingy) == 'string') thingy = document.getElementById(thingy);
		if (!thingy.addClass) {
			// extend element with a few useful methods
			thingy.hide = function() { this.style.display = 'none'; };
			thingy.show = function() { this.style.display = ''; };
			thingy.addClass = function(name) { this.removeClass(name); this.className += ' ' + name; };
			thingy.removeClass = function(name) {
				var classes = this.className.split(/\s+/);
				var idx = -1;
				for (var k = 0; k < classes.length; k++) {
					if (classes[k] == name) { idx = k; k = classes.length; }
				}
				if (idx > -1) {
					classes.splice( idx, 1 );
					this.className = classes.join(' ');
				}
				return this;
			};
			thingy.hasClass = function(name) {
				return !!this.className.match( new RegExp("\\s*" + name + "\\s*") );
			};
		}
		return thingy;
	},

	setMoviePath: function(path) {
		// set path to ZeroClipboard.swf
		this.moviePath = path;
	},

	// use this method in JSNI calls to obtain a new Client instance
	newClient: function() {
		return new ZeroClipboard.Client();
	},

	dispatch: function(id, eventName, args) {
		// receive event from flash movie, send to client
		var client = this.clients[id];
		if (client) {
			client.receiveEvent(eventName, args);
		}
	},

	register: function(id, client) {
		// register new client to receive events
		this.clients[id] = client;
	},

	getDOMObjectPosition: function(obj, stopObj) {
		// get absolute coordinates for dom element
		var info = {
			left: 0,
			top: 0,
			width: obj.width ? obj.width : obj.offsetWidth,
			height: obj.height ? obj.height : obj.offsetHeight
		};

		while (obj && (obj != stopObj)) {
			info.left += obj.offsetLeft;
			info.top += obj.offsetTop;
			obj = obj.offsetParent;
		}

		return info;
	},

	Client: function(elem) {
		// constructor for new simple upload client
		this.handlers = {};

		// unique ID
		this.id = ZeroClipboard.nextId++;
		this.movieId = 'ZeroClipboardMovie_' + this.id;

		// register client with singleton to receive flash events
		ZeroClipboard.register(this.id, this);

		// create movie
		if (elem) this.glue(elem);
	}
};

ZeroClipboard.Client.prototype = {

	id: 0, // unique ID for us
	ready: false, // whether movie is ready to receive events or not
	movie: null, // reference to movie object
	clipText: '', // text to copy to clipboard
	handCursorEnabled: true, // whether to show hand cursor, or default pointer cursor
	cssEffects: true, // enable CSS mouse effects on dom container
	handlers: null, // user event handlers
	zIndex: 99, // default zIndex of the movie object

	glue: function(elem, appendElem, stylesToAdd) {
		// glue to DOM element
		// elem can be ID or actual DOM element object
		this.domElement = ZeroClipboard.$(elem);

		// float just above object, or default zIndex if dom element isn't set
		if (this.domElement.style.zIndex) {
			this.zIndex = parseInt(this.domElement.style.zIndex, 10) + 1;
		}

		if (typeof(appendElem) == 'string') {
			appendElem = ZeroClipboard.$(appendElem);
		}
		else if (typeof(appendElem) == 'undefined') {
			appendElem = document.getElementsByTagName('body')[0];
		}

		// find X/Y position of domElement
		var box = ZeroClipboard.getDOMObjectPosition(this.domElement, appendElem);

		// create floating DIV above element
		this.div = document.createElement('div');
		var style = this.div.style;
		style.position = 'absolute';
		style.left = '' + box.left + 'px';
		style.top = '' + box.top + 'px';
		style.width = '' + box.width + 'px';
		style.height = '' + box.height + 'px';
		style.zIndex = this.zIndex;

		if (typeof(stylesToAdd) == 'object') {
			for (addedStyle in stylesToAdd) {
				style[addedStyle] = stylesToAdd[addedStyle];
			}
		}

		// style.backgroundColor = '#f00'; // debug

		appendElem.appendChild(this.div);

		this.div.innerHTML = this.getHTML( box.width, box.height );
	},

	getHTML: function(width, height) {
		// return HTML for movie
		var html = '';
		var flashvars = 'id=' + this.id +
			'&width=' + width +
			'&height=' + height;

		if (navigator.userAgent.match(/MSIE/)) {
			// IE gets an OBJECT tag
			var protocol = location.href.match(/^https/i) ? 'https://' : 'http://';
			html += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="'+protocol+'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="'+width+'" height="'+height+'" id="'+this.movieId+'" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="'+ZeroClipboard.moviePath+'" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="'+flashvars+'"/><param name="wmode" value="transparent"/></object>';
		}
		else {
			// all other browsers get an EMBED tag
			html += '<embed id="'+this.movieId+'" src="'+ZeroClipboard.moviePath+'" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="'+width+'" height="'+height+'" name="'+this.movieId+'" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="'+flashvars+'" wmode="transparent" />';
		}
		return html;
	},

	hide: function() {
		// temporarily hide floater offscreen
		if (this.div) {
			this.div.style.left = '-2000px';
		}
	},

	show: function() {
		// show ourselves after a call to hide()
		this.reposition();
	},

	destroy: function() {
		// destroy control and floater
		if (this.domElement && this.div) {
			this.hide();
			this.div.innerHTML = '';

			var body = document.getElementsByTagName('body')[0];
			try { body.removeChild( this.div ); } catch(e) {;}

			this.domElement = null;
			this.div = null;
		}
	},

	reposition: function(elem) {
		// reposition our floating div, optionally to new container
		// warning: container CANNOT change size, only position
		if (elem) {
			this.domElement = ZeroClipboard.$(elem);
			if (!this.domElement) this.hide();
		}

		if (this.domElement && this.div) {
			var box = ZeroClipboard.getDOMObjectPosition(this.domElement);
			var style = this.div.style;
			style.left = '' + box.left + 'px';
			style.top = '' + box.top + 'px';
		}
	},

	setText: function(newText) {
		// set text to be copied to clipboard
		this.clipText = newText;
		if (this.ready) this.movie.setText(newText);
	},

	addEventListener: function(eventName, func) {
		// add user event listener for event
		// event types: load, queueStart, fileStart, fileComplete, queueComplete, progress, error, cancel
		eventName = eventName.toString().toLowerCase().replace(/^on/, '');
		if (!this.handlers[eventName]) this.handlers[eventName] = [];
		this.handlers[eventName].push(func);
	},

	setHandCursor: function(enabled) {
		// enable hand cursor (true), or default arrow cursor (false)
		this.handCursorEnabled = enabled;
		if (this.ready) this.movie.setHandCursor(enabled);
	},

	setCSSEffects: function(enabled) {
		// enable or disable CSS effects on DOM container
		this.cssEffects = !!enabled;
	},

	receiveEvent: function(eventName, args) {
		// receive event from flash
		eventName = eventName.toString().toLowerCase().replace(/^on/, '');

		// special behavior for certain events
		switch (eventName) {
			case 'load':
				// movie claims it is ready, but in IE this isn't always the case...
				// bug fix: Cannot extend EMBED DOM elements in Firefox, must use traditional function
				this.movie = document.getElementById(this.movieId);
				if (!this.movie) {
					var self = this;
					setTimeout( function() { self.receiveEvent('load', null); }, 1 );
					return;
				}

				// firefox on pc needs a "kick" in order to set these in certain cases
				if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) {
					var self = this;
					setTimeout( function() { self.receiveEvent('load', null); }, 100 );
					this.ready = true;
					return;
				}

				this.ready = true;
				this.movie.setText( this.clipText );
				this.movie.setHandCursor( this.handCursorEnabled );
				break;

			case 'mouseover':
				if (this.domElement && this.cssEffects) {
					this.domElement.addClass('hover');
					if (this.recoverActive) this.domElement.addClass('active');
				}
				break;

			case 'mouseout':
				if (this.domElement && this.cssEffects) {
					this.recoverActive = false;
					if (this.domElement.hasClass('active')) {
						this.domElement.removeClass('active');
						this.recoverActive = true;
					}
					this.domElement.removeClass('hover');
				}
				break;

			case 'mousedown':
				if (this.domElement && this.cssEffects) {
					this.domElement.addClass('active');
				}
				break;

			case 'mouseup':
				if (this.domElement && this.cssEffects) {
					this.domElement.removeClass('active');
					this.recoverActive = false;
				}
				break;
		} // switch eventName

		if (this.handlers[eventName]) {
			for (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) {
				var func = this.handlers[eventName][idx];

				if (typeof(func) == 'function') {
					// actual function reference
					func(this, args);
				}
				else if ((typeof(func) == 'object') && (func.length == 2)) {
					// PHP style object + method, i.e. [myObject, 'myMethod']
					func[0][ func[1] ](this, args);
				}
				else if (typeof(func) == 'string') {
					// name of function
					window[func](this, args);
				}
			} // foreach event handler defined
		} // user defined handler for event
	}

};


/* ----------------------------------------------------------------------
   - public/javascripts/jquery.parsequery.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/**
 * Copyright (c) 2010 Conrad Irwin <conrad@rapportive.com> MIT license.
 * Based loosely on original: Copyright (c) 2008 mkmanning MIT license.
 *
 * Parses CGI query strings into javascript objects.
 *
 * See the README for details.
 **/
(function ($) {
    $.parseQuery = function (options) {

        var config = {query: window.location.search || ""},
            params = {};

        if (typeof options === 'string') {
            options = {query: options};
        }
        $.extend(config, $.parseQuery, options);
        config.query = config.query.replace(/^\?/, '');

        if (config.query.length > 0) {
            $.each(config.query.split(config.separator), function (i, param) {
                var pair = param.split('='),
                    key = config.decode(pair.shift(), null).toString(),
                    value = config.decode(pair.length ? pair.join('=') : null, key);

                if (config.array_keys.test ? config.array_keys.test(key) : config.array_keys(key)) {
                    params[key] = params[key] || [];
                    params[key].push(value);
                } else {
                    params[key] = value;
                }
            });
        }
        return params;
    };
    $.parseQuery.decode = $.parseQuery.default_decode = function (string) {
        return decodeURIComponent((string || "").replace(/\+/g, ' '));
    };
    $.parseQuery.array_keys = function () {
        return false;
    };
    $.parseQuery.separator = "&";
}(window.jQuery || window.Zepto));


/* ----------------------------------------------------------------------
   - public/javascripts/jquery.scrollto.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/*!
 * jQuery.ScrollTo
 * Copyright (c) 2007-2012 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com
 * Dual licensed under MIT and GPL.
 * Date: 4/09/2012
 *
 * @projectDescription Easy element scrolling using jQuery.
 * http://flesler.blogspot.com/2007/10/jqueryscrollto.html
 * @author Ariel Flesler
 * @version 1.4.3.1
 *
 * @id jQuery.scrollTo
 * @id jQuery.fn.scrollTo
 * @param {String, Number, DOMElement, jQuery, Object} target Where to scroll the matched elements.
 *	  The different options for target are:
 *		- A number position (will be applied to all axes).
 *		- A string position ('44', '100px', '+=90', etc ) will be applied to all axes
 *		- A jQuery/DOM element ( logically, child of the element to scroll )
 *		- A string selector, that will be relative to the element to scroll ( 'li:eq(2)', etc )
 *		- A hash { top:x, left:y }, x and y can be any kind of number/string like above.
 *		- A percentage of the container's dimension/s, for example: 50% to go to the middle.
 *		- The string 'max' for go-to-end. 
 * @param {Number, Function} duration The OVERALL length of the animation, this argument can be the settings object instead.
 * @param {Object,Function} settings Optional set of settings or the onAfter callback.
 *	 @option {String} axis Which axis must be scrolled, use 'x', 'y', 'xy' or 'yx'.
 *	 @option {Number, Function} duration The OVERALL length of the animation.
 *	 @option {String} easing The easing method for the animation.
 *	 @option {Boolean} margin If true, the margin of the target element will be deducted from the final position.
 *	 @option {Object, Number} offset Add/deduct from the end position. One number for both axes or { top:x, left:y }.
 *	 @option {Object, Number} over Add/deduct the height/width multiplied by 'over', can be { top:x, left:y } when using both axes.
 *	 @option {Boolean} queue If true, and both axis are given, the 2nd axis will only be animated after the first one ends.
 *	 @option {Function} onAfter Function to be called after the scrolling ends. 
 *	 @option {Function} onAfterFirst If queuing is activated, this function will be called after the first scrolling ends.
 * @return {jQuery} Returns the same jQuery object, for chaining.
 *
 * @desc Scroll to a fixed position
 * @example $('div').scrollTo( 340 );
 *
 * @desc Scroll relatively to the actual position
 * @example $('div').scrollTo( '+=340px', { axis:'y' } );
 *
 * @desc Scroll using a selector (relative to the scrolled element)
 * @example $('div').scrollTo( 'p.paragraph:eq(2)', 500, { easing:'swing', queue:true, axis:'xy' } );
 *
 * @desc Scroll to a DOM element (same for jQuery object)
 * @example var second_child = document.getElementById('container').firstChild.nextSibling;
 *			$('#container').scrollTo( second_child, { duration:500, axis:'x', onAfter:function(){
 *				alert('scrolled!!');																   
 *			}});
 *
 * @desc Scroll on both axes, to different values
 * @example $('div').scrollTo( { top: 300, left:'+=200' }, { axis:'xy', offset:-20 } );
 */

;(function( $ ){
	
	var $scrollTo = $.scrollTo = function( target, duration, settings ){
		$(window).scrollTo( target, duration, settings );
	};

	$scrollTo.defaults = {
		axis:'xy',
		duration: parseFloat($.fn.jquery) >= 1.3 ? 0 : 1,
		limit:true
	};

	// Returns the element that needs to be animated to scroll the window.
	// Kept for backwards compatibility (specially for localScroll & serialScroll)
	$scrollTo.window = function( scope ){
		return $(window)._scrollable();
	};

	// Hack, hack, hack :)
	// Returns the real elements to scroll (supports window/iframes, documents and regular nodes)
	$.fn._scrollable = function(){
		return this.map(function(){
			var elem = this,
				isWin = !elem.nodeName || $.inArray( elem.nodeName.toLowerCase(), ['iframe','#document','html','body'] ) != -1;

				if( !isWin )
					return elem;

			var doc = (elem.contentWindow || elem).document || elem.ownerDocument || elem;
			
			return /webkit/i.test(navigator.userAgent) || doc.compatMode == 'BackCompat' ?
				doc.body : 
				doc.documentElement;
		});
	};

	$.fn.scrollTo = function( target, duration, settings ){
		if( typeof duration == 'object' ){
			settings = duration;
			duration = 0;
		}
		if( typeof settings == 'function' )
			settings = { onAfter:settings };
			
		if( target == 'max' )
			target = 9e9;
			
		settings = $.extend( {}, $scrollTo.defaults, settings );
		// Speed is still recognized for backwards compatibility
		duration = duration || settings.duration;
		// Make sure the settings are given right
		settings.queue = settings.queue && settings.axis.length > 1;
		
		if( settings.queue )
			// Let's keep the overall duration
			duration /= 2;
		settings.offset = both( settings.offset );
		settings.over = both( settings.over );

		return this._scrollable().each(function(){
			// Null target yields nothing, just like jQuery does
			if (target == null) return;

			var elem = this,
				$elem = $(elem),
				targ = target, toff, attr = {},
				win = $elem.is('html,body');

			switch( typeof targ ){
				// A number will pass the regex
				case 'number':
				case 'string':
					if( /^([+-]=)?\d+(\.\d+)?(px|%)?$/.test(targ) ){
						targ = both( targ );
						// We are done
						break;
					}
					// Relative selector, no break!
					targ = $(targ,this);
					if (!targ.length) return;
				case 'object':
					// DOMElement / jQuery
					if( targ.is || targ.style )
						// Get the real position of the target 
						toff = (targ = $(targ)).offset();
			}
			$.each( settings.axis.split(''), function( i, axis ){
				var Pos	= axis == 'x' ? 'Left' : 'Top',
					pos = Pos.toLowerCase(),
					key = 'scroll' + Pos,
					old = elem[key],
					max = $scrollTo.max(elem, axis);

				if( toff ){// jQuery / DOMElement
					attr[key] = toff[pos] + ( win ? 0 : old - $elem.offset()[pos] );

					// If it's a dom element, reduce the margin
					if( settings.margin ){
						attr[key] -= parseInt(targ.css('margin'+Pos)) || 0;
						attr[key] -= parseInt(targ.css('border'+Pos+'Width')) || 0;
					}
					
					attr[key] += settings.offset[pos] || 0;
					
					if( settings.over[pos] )
						// Scroll to a fraction of its width/height
						attr[key] += targ[axis=='x'?'width':'height']() * settings.over[pos];
				}else{ 
					var val = targ[pos];
					// Handle percentage values
					attr[key] = val.slice && val.slice(-1) == '%' ? 
						parseFloat(val) / 100 * max
						: val;
				}

				// Number or 'number'
				if( settings.limit && /^\d+$/.test(attr[key]) )
					// Check the limits
					attr[key] = attr[key] <= 0 ? 0 : Math.min( attr[key], max );

				// Queueing axes
				if( !i && settings.queue ){
					// Don't waste time animating, if there's no need.
					if( old != attr[key] )
						// Intermediate animation
						animate( settings.onAfterFirst );
					// Don't animate this axis again in the next iteration.
					delete attr[key];
				}
			});

			animate( settings.onAfter );			

			function animate( callback ){
				$elem.animate( attr, duration, settings.easing, callback && function(){
					callback.call(this, target, settings);
				});
			};

		}).end();
	};
	
	// Max scrolling position, works on quirks mode
	// It only fails (not too badly) on IE, quirks mode.
	$scrollTo.max = function( elem, axis ){
		var Dim = axis == 'x' ? 'Width' : 'Height',
			scroll = 'scroll'+Dim;
		
		if( !$(elem).is('html,body') )
			return elem[scroll] - $(elem)[Dim.toLowerCase()]();
		
		var size = 'client' + Dim,
			html = elem.ownerDocument.documentElement,
			body = elem.ownerDocument.body;

		return Math.max( html[scroll], body[scroll] ) 
			 - Math.min( html[size]  , body[size]   );
	};

	function both( val ){
		return typeof val == 'object' ? val : { top:val, left:val };
	};

})( jQuery );


/* ----------------------------------------------------------------------
   - public/javascripts/shared/vendor/easyXDM.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/*
 * easyXDM 
 * http://easyxdm.net/
 * Copyright(c) 2009, Øyvind Sean Kinsey, oyvind@kinsey.no.
 * 
 * MIT Licensed - http://easyxdm.net/license/mit.txt
 * 
 */
 (function (window, document, location, setTimeout, decodeURIComponent, encodeURIComponent) {
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, JSON, XMLHttpRequest, window, escape, unescape, ActiveXObject */

var global = this;
var _channelId = 0;
var emptyFn = Function.prototype;
var reURI = /^(http.?:\/\/([^\/\s]+))/, // returns groups for origin (1) and domain (2)
 reParent = /[\-\w]+\/\.\.\//, // matches a foo/../ expression 
 reDoubleSlash = /([^:])\/\//g; // matches // anywhere but in the protocol
//Sniffing is bad, but in this case unavoidable
var CREATE_FRAME_USING_HTML = /msie [67]/.test(navigator.userAgent.toLowerCase());
/* Methods for feature testing
 * From http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting
 */
function isHostMethod(object, property){
    var t = typeof object[property];
    return t == 'function' ||
    (!!(t == 'object' && object[property])) ||
    t == 'unknown';
}

function isHostObject(object, property){
    return !!(typeof(object[property]) == 'object' && object[property]);
}

/*
 * Create normalized methods for adding and removing events
 */
var on = (function(){
    if (isHostMethod(window, "addEventListener")) {
        /**
         * Set on to use the DOM level 2 addEventListener
         * https://developer.mozilla.org/en/DOM/element.on
         * @ignore
         * @param {Object} target
         * @param {String} type
         * @param {Function} listener
         */
        return function(target, type, listener){
            target.addEventListener(type, listener, false);
        };
    }
    else {
        /**
         * Set on to a wrapper around the IE spesific attachEvent
         * http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx
         * @ignore
         * @param {Object} object
         * @param {String} sEvent
         * @param {Function} fpNotify
         */
        return function(object, sEvent, fpNotify){
            object.attachEvent("on" + sEvent, fpNotify);
        };
    }
}());

var un = (function(){
    if (isHostMethod(window, "removeEventListener")) {
        /**
         * Set un to use the DOM level 2 removeEventListener
         * https://developer.mozilla.org/en/DOM/element.un
         * @ignore
         * @param {Object} target
         * @param {String} type
         * @param {Function} listener
         */
        return function(target, type, listener, useCapture){
            target.removeEventListener(type, listener, useCapture);
        };
    }
    else {
        /**
         * Set un to a wrapper around the IE spesific detachEvent
         * http://msdn.microsoft.com/en-us/library/ms536411%28VS.85%29.aspx
         * @ignore
         * @param {Object} object
         * @param {String} sEvent
         * @param {Function} fpNotify
         */
        return function(object, sEvent, fpNotify){
            object.detachEvent("on" + sEvent, fpNotify);
        };
    }
}());

/*
 * Methods for working with URLs
 */
/**
 * Get the domain name from a url.
 * @private
 * @param {String} url The url to extract the domain from.
 * @returns The domain part of the url.
 * @type {String}
 */
function getDomainName(url){
    return url.match(reURI)[2];
}

/**
 * Returns  a string containing the schema, domain and if present the port
 * @private
 * @param {String} url The url to extract the location from
 * @return {String} The location part of the url
 */
function getLocation(url){
    return url.match(reURI)[1];
}

/**
 * Resolves a relative url into an absolute one.
 * @private
 * @param {String} url The path to resolve.
 * @return {String} The resolved url.
 */
function resolveUrl(url){
    
    // replace all // except the one in proto with /
    url = url.replace(reDoubleSlash, "$1/");
    
    // If the url is a valid url we do nothing
    if (!url.match(/^(http||https):\/\//)) {
        // If this is a relative path
        var path = (url.substring(0, 1) === "/") ? "" : location.pathname;
        if (path.substring(path.length - 1) !== "/") {
            path = path.substring(0, path.lastIndexOf("/") + 1);
        }
        
        url = location.protocol + "//" + location.host + path + url;
    }
    
    // reduce all 'xyz/../' to just '' 
    while (reParent.test(url)) {
        url = url.replace(reParent, "");
    }
    
    return url;
}

/**
 * Appends the parameters to the given url.<br/>
 * The base url can contain existing query parameters.
 * @private
 * @param {String} url The base url.
 * @param {Object} parameters The parameters to add.
 * @return {String} A new valid url with the parameters appended.
 */
function appendQueryParameters(url, parameters){
    
    var hash = "", indexOf = url.indexOf("#");
    if (indexOf !== -1) {
        hash = url.substring(indexOf);
        url = url.substring(0, indexOf);
    }
    var q = [];
    for (var key in parameters) {
        if (parameters.hasOwnProperty(key)) {
            q.push(key + "=" + parameters[key]);
        }
    }
    return url + ((url.indexOf("?") === -1) ? "?" : "&") + q.join("&") + hash;
}

var _query = (function(){
    var query = {}, pair, search = location.search.substring(1).split("&"), i = search.length;
    while (i--) {
        pair = search[i].split("=");
        query[pair[0]] = pair[1];
    }
    return query;
}());

/*
 * Helper methods
 */
/**
 * Helper for checking if a variable/property is undefined
 * @private
 * @param {Object} v The variable to test
 * @return {Boolean} True if the passed variable is undefined
 */
function undef(v){
    return typeof v === "undefined";
}

/**
 * A safe implementation of HTML5 JSON. Feature testing is used to make sure the implementation works.
 * @private
 * @return {JSON} A valid JSON conforming object, or null if not found.
 */
function getJSON(){
    var cached = {};
    var obj = {
        a: [1, 2, 3]
    }, json = "{\"a\":[1,2,3]}";
    
    if (JSON && typeof JSON.stringify === "function" && JSON.stringify(obj).replace((/\s/g), "") === json) {
        // this is a working JSON instance
        return JSON;
    }
    if (Object.toJSON) {
        if (Object.toJSON(obj).replace((/\s/g), "") === json) {
            // this is a working stringify method
            cached.stringify = Object.toJSON;
        }
    }
    
    if (typeof String.prototype.evalJSON === "function") {
        obj = json.evalJSON();
        if (obj.a && obj.a.length === 3 && obj.a[2] === 3) {
            // this is a working parse method           
            cached.parse = function(str){
                return str.evalJSON();
            };
        }
    }
    
    if (cached.stringify && cached.parse) {
        // Only memoize the result if we have valid instance
        getJSON = function(){
            return cached;
        };
        return cached;
    }
    return null;
}

/**
 * Applies properties from the source object to the target object.<br/>
 * This is a destructive method.
 * @private
 * @param {Object} target The target of the properties.
 * @param {Object} source The source of the properties.
 * @param {Boolean} noOverwrite Set to True to only set non-existing properties.
 */
function apply(destination, source, noOverwrite){
    var member;
    for (var prop in source) {
        if (source.hasOwnProperty(prop)) {
            if (prop in destination) {
                member = source[prop];
                if (typeof member === "object") {
                    apply(destination[prop], member, noOverwrite);
                }
                else if (!noOverwrite) {
                    destination[prop] = source[prop];
                }
            }
            else {
                destination[prop] = source[prop];
            }
        }
    }
    return destination;
}

/**
 * Creates a frame and appends it to the DOM.
 * @private
 * @cfg {Object} prop The properties that should be set on the frame. This should include the 'src' property
 * @cfg {Object} attr The attributes that should be set on the frame.
 * @cfg {DOMElement} container Its parent element (Optional)
 * @cfg {Function} onLoad A method that should be called with the frames contentWindow as argument when the frame is fully loaded. (Optional)
 * @return The frames DOMElement
 * @type DOMElement
 */
function createFrame(config){
    var frame;
    // This is to work around the problems in IE6/7 with setting the name property. 
    // Internally this is set as 'submitName' instead when using 'iframe.name = ...'
    // This is not required by easyXDM itself, but is to facilitate other use cases 
    if (config.props.name && CREATE_FRAME_USING_HTML) {
        frame = document.createElement("<iframe name=\"" + config.props.name + "\"/>");
    }
    else {
        frame = document.createElement("IFRAME");
    }
    // transfer properties to the frame
    apply(frame, config.props);
    //id needs to be set for the references to work reliably
    frame.id = frame.name;
    
    if (config.onLoad) {
        frame.loadFn = function(){
            config.onLoad(frame.contentWindow);
        };
        on(frame, "load", frame.loadFn);
    }
    if (config.container) {
        // Remove the frame
        frame.border = frame.frameBorder = 0;
        config.container.appendChild(frame);
    }
    else {
        // This needs to be hidden like this, simply setting display:none and the like will cause failures in some browsers.
        frame.style.position = "absolute";
        frame.style.left = "-2000px";
        frame.style.top = "0px";
        document.body.appendChild(frame);
    }
    return frame;
}

/*
 * Methods related to AJAX
 */
/**
 * Creates a cross-browser XMLHttpRequest object
 * @private
 * @return {XMLHttpRequest} A XMLHttpRequest object.
 */
var getXhr = (function(){
    if (isHostMethod(window, "XMLHttpRequest")) {
        return function(){
            return new XMLHttpRequest();
        };
    }
    else {
        var item = (function(){
            var list = ["Microsoft", "Msxml2", "Msxml3"], i = list.length;
            while (i--) {
                try {
                    item = list[i] + ".XMLHTTP";
                    var obj = new ActiveXObject(item);
                    return item;
                } 
                catch (e) {
                }
            }
        }());
        return function(){
            return new ActiveXObject(item);
        };
    }
}());

/** Runs an asynchronous request using XMLHttpRequest
 * @private
 * @cfg {String} method POST, HEAD or GET
 * @cfg {String} url The url to request
 * @cfg {Object} data Any data that should be sent.
 * @cfg {Function} success The callback function for successfull requests
 * @cfg {Function} error The callback function for errors
 */
function ajax(config){
    apply(config, {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "XMLHttpRequest"
        },
        success: emptyFn,
        error: function(msg){
            throw new Error(msg);
        },
        data: {},
        type: "plain"
    }, true);
    
    var req = getXhr(), q = [];
    req.open(config.method, config.url, true);
    for (var prop in config.headers) {
        if (config.headers.hasOwnProperty(prop)) {
            req.setRequestHeader(prop, config.headers[prop]);
        }
    }
    
    req.onreadystatechange = function(){
        if (req.readyState == 4) {
            if (req.status >= 200 && req.status < 300) {
                var response = req.responseText;
                if (config.type === "json") {
                    response = getJSON().parse(response);
                }
                config.success(response);
            }
            else {
                config.error("An error occured. Status code: " + req.status);
            }
            req.onreadystatechange = null;
            delete req.onreadystatechange;
        }
    };
    
    for (var key in config.data) {
        if (config.data.hasOwnProperty(key)) {
            q.push(encodeURIComponent(key) + "=" + encodeURIComponent(config.data[key]));
        }
    }
    req.send(q.join("&"));
}

/*
 * Functions related to stacks
 */
/**
 * Prepares an array of stack-elements suitable for the current configuration
 * @private
 * @param {Object} config The Transports configuration. See easyXDM.Socket for more.
 * @return {Array} An array of stack-elements with the TransportElement at index 0.
 */
function prepareTransportStack(config){
    var protocol = config.protocol, stackEls;
    config.isHost = config.isHost || undef(_query.xdm_p);
    
    if (!config.props) {
        config.props = {};
    }
    if (!config.isHost) {
        config.channel = _query.xdm_c;
        config.secret = _query.xdm_s;
        config.remote = decodeURIComponent(_query.xdm_e);
        protocol = _query.xdm_p;
    }
    else {
        config.remote = resolveUrl(config.remote);
        config.channel = config.channel || "default" + _channelId++;
        config.secret = Math.random().toString(16).substring(2);
        if (undef(protocol)) {
            if (isHostMethod(window, "postMessage")) {
                /*
                 * This is supported in IE8+, Firefox 3+, Opera 9+, Chrome 2+ and Safari 4+
                 */
                protocol = "1";
            }
            else if (isHostMethod(window, "ActiveXObject") && isHostMethod(window, "execScript")) {
                /*
                 * This is supported in IE6 and IE7
                 */
                protocol = "3";
            }
            else if (config.remoteHelper) {
                /*
                 * This is supported in all browsers that retains the value of window.name when
                 * navigating from one domain to another, and where parent.frames[foo] can be used
                 * to get access to a frame from the same domain
                 */
                config.remoteHelper = resolveUrl(config.remoteHelper);
                protocol = "2";
            }
            else {
                /*
                 * This is supported in all browsers where [window].location is writable for all
                 * The resize event will be used if resize is supported and the iframe is not put
                 * into a container, else polling will be used.
                 */
                protocol = "0";
            }
        }
    }
    
    switch (protocol) {
        case "0":// 0 = HashTransport
            apply(config, {
                interval: 300,
                delay: 2000,
                useResize: true,
                useParent: false,
                usePolling: false
            }, true);
            if (config.isHost) {
                if (!config.local) {
                    // If no local is set then we need to find an image hosted on the current domain
                    var domain = location.protocol + "//" + location.host, images = document.body.getElementsByTagName("img"), i = images.length, image;
                    while (i--) {
                        image = images[i];
                        if (image.src.substring(0, domain.length) === domain) {
                            config.local = image.src;
                            break;
                        }
                    }
                    if (!config.local) {
                        // If no local was set, and we are unable to find a suitable file, then we resort to using the current window 
                        config.local = window;
                    }
                }
                
                var parameters = {
                    xdm_c: config.channel,
                    xdm_p: 0
                };
                
                if (config.local === window) {
                    // We are using the current window to listen to
                    config.usePolling = true;
                    config.useParent = true;
                    config.local = location.protocol + "//" + location.host + location.pathname + location.search;
                    parameters.xdm_e = encodeURIComponent(config.local);
                    parameters.xdm_pa = 1; // use parent
                }
                else {
                    parameters.xdm_e = resolveUrl(config.local);
                }
                
                if (config.container) {
                    config.useResize = false;
                    parameters.xdm_po = 1; // use polling
                }
                config.remote = appendQueryParameters(config.remote, parameters);
            }
            else {
                apply(config, {
                    channel: _query.xdm_c,
                    remote: decodeURIComponent(_query.xdm_e),
                    useParent: !undef(_query.xdm_pa),
                    usePolling: !undef(_query.xdm_po),
                    useResize: config.useParent ? false : config.useResize
                });
            }
            stackEls = [new easyXDM.stack.HashTransport(config), new easyXDM.stack.ReliableBehavior({
                timeout: ((config.useResize ? 50 : config.interval * 1.5) + (config.usePolling ? config.interval * 1.5 : 50))
            }), new easyXDM.stack.QueueBehavior({
                encode: true,
                maxLength: 4000 - config.remote.length
            }), new easyXDM.stack.VerifyBehavior({
                initiate: config.isHost
            })];
            break;
        case "1":
            stackEls = [new easyXDM.stack.PostMessageTransport(config), new easyXDM.stack.QueueBehavior()];
            break;
        case "2":
            stackEls = [new easyXDM.stack.NameTransport(config), new easyXDM.stack.QueueBehavior(), new easyXDM.stack.VerifyBehavior({
                initiate: config.isHost
            })];
            break;
        case "3":
            stackEls = [new easyXDM.stack.NixTransport(config), new easyXDM.stack.QueueBehavior()];
            break;
    }
    
    return stackEls;
}

/**
 * Chains all the separate stack elements into a single usable stack.<br/>
 * If an element is missing a necessary method then it will have a pass-through method applied.
 * @private
 * @param {Array} stackElements An array of stack elements to be linked.
 * @return {easyXDM.stack.StackElement} The last element in the chain.
 */
function chainStack(stackElements){
    var stackEl, defaults = {
        incoming: function(message, origin){
            this.up.incoming(message, origin);
        },
        outgoing: function(message, recipient){
            this.down.outgoing(message, recipient);
        },
        callback: function(success){
            this.up.callback(success);
        },
        init: function(){
            this.down.init();
        },
        destroy: function(){
            this.down.destroy();
        }
    };
    for (var i = 0, len = stackElements.length; i < len; i++) {
        stackEl = stackElements[i];
        apply(stackEl, defaults, true);
        if (i !== 0) {
            stackEl.down = stackElements[i - 1];
        }
        if (i !== len - 1) {
            stackEl.up = stackElements[i + 1];
        }
    }
    return stackEl;
}

/*
 * Export the main object and any other methods applicable
 */
/** 
 * @class easyXDM
 * A javascript library providing cross-browser, cross-domain messaging/RPC.
 * @version 2.4.0.90
 * @singleton
 */
global.easyXDM = {
    /**
     * The version of the library
     * @type {String}
     */
    version: "2.4.0.90",
    apply: apply,
    query: _query,
    ajax: ajax,
    getJSONObject: getJSON,
    stack: {}
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global console, _FirebugCommandLine,  easyXDM, window, escape, unescape, isHostObject, undef, _trace */

/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, isHostObject, isHostMethod, un, on, createFrame, debug */

/** 
 * @class easyXDM.DomHelper
 * Contains methods for dealing with the DOM
 * @singleton
 */
easyXDM.DomHelper = {
    /**
     * Provides a consistent interface for adding eventhandlers
     * @param {Object} target The target to add the event to
     * @param {String} type The name of the event
     * @param {Function} listener The listener
     */
    on: on,
    /**
     * Provides a consistent interface for removing eventhandlers
     * @param {Object} target The target to remove the event from
     * @param {String} type The name of the event
     * @param {Function} listener The listener
     */
    un: un,
    /**
     * Checks for the presence of the JSON object.
     * If it is not present it will use the supplied path to load the JSON2 library.
     * This should be called in the documents head right after the easyXDM script tag.
     * http://json.org/json2.js
     * @param {String} path A valid path to json2.js
     */
    requiresJSON: function(path){
        if (!isHostObject(window, "JSON")) {
            document.write('<script type="text/javascript" src="' + path + '"></script>');
        }
    }
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, debug */


(function(){
    // The map containing the stored functions
    var _map = {};
    
    /**
     * @class easyXDM.Fn
     * This contains methods related to function handling, such as storing callbacks.
     * @singleton
     * @namespace easyXDM
     */
    easyXDM.Fn = {
        /**
         * Stores a function using the given name for reference
         * @param {String} name The name that the function should be referred by
         * @param {Function} fn The function to store
         * @namespace easyXDM.fn
         */
        set: function(name, fn){
            _map[name] = fn;
        },
        /**
         * Retrieves the function referred to by the given name
         * @param {String} name The name of the function to retrieve
         * @param {Boolean} del If the function should be deleted after retrieval
         * @return {Function} The stored function
         * @namespace easyXDM.fn
         */
        get: function(name, del){
            var fn = _map[name];
            
            if (del) {
                delete _map[name];
            }
            return fn;
        }
    };
    
}());
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, chainStack, prepareTransportStack, getLocation, debug */

/**
 * @class easyXDM.Socket
 * This class creates a transport channel between two domains that is usable for sending and receiving string-based messages.<br/>
 * The channel is reliable, supports queueing, and ensures that the message originates from the expected domain.<br/>
 * Internally different stacks will be used depending on the browsers features and the available parameters.
 * <h2>How to set up</h2>
 * Setting up the provider:
 * <pre><code>
 * var socket = new easyXDM.Socket({
 * &nbsp; local: "name.html",
 * &nbsp; onReady: function(){
 * &nbsp; &nbsp; &#47;&#47; you need to wait for the onReady callback before using the socket
 * &nbsp; &nbsp; socket.postMessage("foo-message");
 * &nbsp; },
 * &nbsp; onMessage: function(message, origin) {
 * &nbsp;&nbsp; alert("received " + message + " from " + origin);
 * &nbsp; }
 * });
 * </code></pre>
 * Setting up the consumer:
 * <pre><code>
 * var socket = new easyXDM.Socket({
 * &nbsp; remote: "http:&#47;&#47;remotedomain/page.html",
 * &nbsp; remoteHelper: "http:&#47;&#47;remotedomain/name.html",
 * &nbsp; onReady: function(){
 * &nbsp; &nbsp; &#47;&#47; you need to wait for the onReady callback before using the socket
 * &nbsp; &nbsp; socket.postMessage("foo-message");
 * &nbsp; },
 * &nbsp; onMessage: function(message, origin) {
 * &nbsp;&nbsp; alert("received " + message + " from " + origin);
 * &nbsp; }
 * });
 * </code></pre>
 * If you are unable to upload the <code>name.html</code> file to the consumers domain then remove <code>removeHelper</code> property
 * and the transport will fall back to using FMI instead of the window.name to transport messages.
 * @namespace easyXDM
 * @constructor
 * @cfg {String/Window} local The url to the local name.html document, a local static file, or a reference to the local window.
 * @cfg {String} remote The url to the providers document.
 * @cfg {String} remoteHelper The url to the remote name.html file. This is to support NameTransport as a fallback. Optional.
 * @cfg {Number} delay The number of milliseconds easyXDM should try to get a reference to the local window.  Optional, defaults to 2000.
 * @cfg {Number} interval The interval used when polling for messages. Optional, defaults to 300.
 * @cfg {String} channel The name of the channel to use. Must be unique. Optional if only a single channel is expected in the document.
 * @cfg {Function} onMessage The method that should handle incoming messages.<br/> This method should accept two arguments, the message as a string, and the origin as a string. Optional.
 * @cfg {Function} onReady A method that should be called when the transport is ready. Optional.
 * @cfg {DOMElement} container The element that the primary iframe should be inserted into. If not set then the iframe will be positioned off-screen. Optional.
 * @cfg {Object} props Additional properties that should be applied to the iframe. This can also contain nested objects e.g: <code>{style:{width:"100px", height:"100px"}}</code>. 
 * Properties such as 'name' and 'src' will be overrided. Optional.
 */
easyXDM.Socket = function(config){
    
    var stack = chainStack(prepareTransportStack(config).concat([{
        incoming: function(message, origin){
            config.onMessage(message, origin);
        },
        callback: function(success){
            if (config.onReady) {
                config.onReady(success);
            }
        }
    }])), recipient = getLocation(config.remote);
    
    /**
     * Initiates the destruction of the stack.
     */
    this.destroy = function(){
        stack.destroy();
    };
    
    /**
     * Posts a message to the remote end of the channel
     * @param {String} message The message to send
     */
    this.postMessage = function(message){
        stack.outgoing(message, recipient);
    };
    
    stack.init();
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, undef,, chainStack, prepareTransportStack, debug */

/** 
 * @class easyXDM.Rpc
 * Creates a proxy object that can be used to call methods implemented on the remote end of the channel, and also to provide the implementation
 * of methods to be called from the remote end.<br/>
 * The instantiated object will have methods matching those specified in <code>config.remote</code>.<br/>
 * This requires the JSON object present in the document, either natively, using json.org's json2 or as a wrapper around library spesific methods.
 * <h2>How to set up</h2>
 * <pre><code>
 * var rpc = new easyXDM.Rpc({
 * &nbsp; &#47;&#47; this configuration is equal to that used by the Socket.
 * &nbsp; remote: "http:&#47;&#47;remotedomain/...",
 * &nbsp; onReady: function(){
 * &nbsp; &nbsp; &#47;&#47; you need to wait for the onReady callback before using the proxy
 * &nbsp; &nbsp; rpc.foo(...
 * &nbsp; }
 * },{
 * &nbsp; local: {..},
 * &nbsp; remote: {..}
 * });
 * </code></pre>
 * 
 * <h2>Exposing functions (procedures)</h2>
 * <pre><code>
 * var rpc = new easyXDM.Rpc({
 * &nbsp; ...
 * },{
 * &nbsp; local: {
 * &nbsp; &nbsp; nameOfMethod: {
 * &nbsp; &nbsp; &nbsp; method: function(arg1, arg2, success, error){
 * &nbsp; &nbsp; &nbsp; &nbsp; ...
 * &nbsp; &nbsp; &nbsp; }
 * &nbsp; &nbsp; },
 * &nbsp; &nbsp; &#47;&#47; with shorthand notation 
 * &nbsp; &nbsp; nameOfAnotherMethod:  function(arg1, arg2, success, error){
 * &nbsp; &nbsp; }
 * &nbsp; },
 * &nbsp; remote: {...}
 * });
 * </code></pre>

 * The function referenced by  [method] will receive the passed arguments followed by the callback functions <code>success</code> and <code>error</code>.<br/>
 * To send a successfull result back you can use
 *     <pre><code>
 *     return foo;
 *     </pre></code>
 * or
 *     <pre><code>
 *     success(foo);
 *     </pre></code>
 *  To return an error you can use
 *     <pre><code>
 *     throw new Error("foo error");
 *     </code></pre>
 * or
 *     <pre><code>
 *     error("foo error");
 *     </code></pre>
 *
 * <h2>Defining remotely exposed methods (procedures/notifications)</h2>
 * The definition of the remote end is quite similar:
 * <pre><code>
 * var rpc = new easyXDM.Rpc({
 * &nbsp; ...
 * },{
 * &nbsp; local: {...},
 * &nbsp; remote: {
 * &nbsp; &nbsp; nameOfMethod: {}
 * &nbsp; }
 * });
 * </code></pre>
 * To call a remote method use
 * <pre><code>
 * rpc.nameOfMethod("arg1", "arg2", function(value) {
 * &nbsp; alert("success: " + value);
 * }, function(message) {
 * &nbsp; alert("error: " + message + );
 * });
 * </code></pre>
 * Both the <code>success</code> and <code>errror</code> callbacks are optional.<br/>
 * When called with no callback a JSON-RPC 2.0 notification will be executed.
 * Be aware that you will not be notified of any errors with this method.
 * <br/>
 * <h2>Specifying a custom serializer</h2>
 * If you do not want to use the JSON2 library for non-native JSON support, but instead capabilities provided by some other library
 * then you can specify a custom serializer using <code>serializer: foo</code>
 * <pre><code>
 * var rpc = new easyXDM.Rpc({
 * &nbsp; ...
 * },{
 * &nbsp; local: {...},
 * &nbsp; remote: {...},
 * &nbsp; serializer : {
 * &nbsp; &nbsp; parse: function(string){ ... },
 * &nbsp; &nbsp; stringify: function(object) {...}
 * &nbsp; }
 * });
 * </code></pre>
 * If <code>serializer</code> is set then the class will not attempt to use the native implementation.
 * @namespace easyXDM
 * @constructor
 * @param {Object} config The underlying transports configuration. See easyXDM.Socket for available parameters.
 * @param {Object} jsonRpcConfig The description of the interface to implement.
 */
easyXDM.Rpc = function(config, jsonRpcConfig){
    
    // expand shorthand notation
    if (jsonRpcConfig.local) {
        for (var method in jsonRpcConfig.local) {
            if (jsonRpcConfig.local.hasOwnProperty(method)) {
                var member = jsonRpcConfig.local[method];
                if (typeof member === "function") {
                    jsonRpcConfig.local[method] = {
                        method: member
                    };
                }
            }
        }
    }
    var stack = chainStack(prepareTransportStack(config).concat([new easyXDM.stack.RpcBehavior(this, jsonRpcConfig), {
        callback: function(success){
            if (config.onReady) {
                config.onReady(success);
            }
        }
    }]));
    
    /**
     * Initiates the destruction of the stack.
     */
    this.destroy = function(){
        stack.destroy();
    };
    
    stack.init();
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, getLocation, appendQueryParameters, createFrame, debug, un, on, apply*/

/**
 * @class easyXDM.stack.PostMessageTransport
 * PostMessageTransport is a transport class that uses HTML5 postMessage for communication.<br/>
 * <a href="http://msdn.microsoft.com/en-us/library/ms644944(VS.85).aspx">http://msdn.microsoft.com/en-us/library/ms644944(VS.85).aspx</a><br/>
 * <a href="https://developer.mozilla.org/en/DOM/window.postMessage">https://developer.mozilla.org/en/DOM/window.postMessage</a>
 * @namespace easyXDM.stack
 * @constructor
 * @param {Object} config The transports configuration.
 * @cfg {String} remote The remote domain to communicate with.
 */
easyXDM.stack.PostMessageTransport = function(config){
    var pub, // the public interface
 frame, // the remote frame, if any
 callerWindow, // the window that we will call with
 targetOrigin; // the domain to communicate with
    /**
     * Resolves the origin from the event object
     * @private
     * @param {Object} event The messageevent
     * @return {String} The scheme, host and port of the origin
     */
    function _getOrigin(event){
        if (event.origin) {
            // This is the HTML5 property
            return event.origin;
        }
        if (event.uri) {
            // From earlier implementations 
            return getLocation(event.uri);
        }
        if (event.domain) {
            // This is the last option and will fail if the 
            // origin is not using the same schema as we are
            return location.protocol + "//" + event.domain;
        }
        throw "Unable to retrieve the origin of the event";
    }
    
    /**
     * This is the main implementation for the onMessage event.<br/>
     * It checks the validity of the origin and passes the message on if appropriate.
     * @private
     * @param {Object} event The messageevent
     */
    function _window_onMessage(event){
        var origin = _getOrigin(event);
        if (origin == targetOrigin && event.data.substring(0, config.channel.length + 1) == config.channel + " ") {
            pub.up.incoming(event.data.substring(config.channel.length + 1), origin);
        }
    }
    
    return (pub = {
        outgoing: function(message, domain, fn){
            callerWindow.postMessage(config.channel + " " + message, domain || targetOrigin);
            fn();
        },
        destroy: function(){
            un(window, "message", _window_onMessage);
            if (frame) {
                callerWindow = null;
                frame.parentNode.removeChild(frame);
                frame = null;
            }
        },
        init: function(){
            targetOrigin = getLocation(config.remote);
            if (config.isHost) {
                // add the event handler for listening
                on(window, "message", function waitForReady(event){
                    if (event.data == config.channel + "-ready") {
                        // replace the eventlistener
                        callerWindow = frame.contentWindow;
                        un(window, "message", waitForReady);
                        on(window, "message", _window_onMessage);
                        setTimeout(function(){
                            pub.up.callback(true);
                        }, 0);
                    }
                });
                // set up the iframe
                apply(config.props, {
                    src: appendQueryParameters(config.remote, {
                        xdm_e: location.protocol + "//" + location.host,
                        xdm_c: config.channel,
                        xdm_p: 1 // 1 = PostMessage
                    })
                });
                frame = createFrame(config);
            }
            else {
                // add the event handler for listening
                on(window, "message", _window_onMessage);
                callerWindow = window.parent;
                callerWindow.postMessage(config.channel + "-ready", targetOrigin);
                setTimeout(function(){
                    pub.up.callback(true);
                }, 0);
            }
        }
    });
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global global, GetNixProxy, easyXDM, window, escape, unescape, getLocation, appendQueryParameters, createFrame, debug, un, on, isHostMethod, apply*/

/**
 * @class easyXDM.stack.NixTransport
 * NixTransport is a transport class that uses the strange fact that in IE <8, the window.opener property can be written to and read from all windows.<br/>
 * This is used to pass methods that are able to relay messages back and forth. To avoid context-leakage a VBScript (COM) object is used to relay all the strings.<br/>
 * This transport is loosely based on the work done by <a href="https://issues.apache.org/jira/browse/SHINDIG-416">Shindig</a>
 * @namespace easyXDM.stack
 * @constructor
 * @param {Object} config The transports configuration.
 * @cfg {String} remote The remote domain to communicate with.
 * @cfg {String} secret the pre-shared secret used to secure the communication.
 */
easyXDM.stack.NixTransport = function(config){
    var pub, // the public interface
 frame, send, targetOrigin, proxy;
    
    return (pub = {
        outgoing: function(message, domain, fn){
            send(message);
            fn();
        },
        destroy: function(){
            proxy = null;
            if (frame) {
                frame.parentNode.removeChild(frame);
                frame = null;
            }
        },
        init: function(){
            targetOrigin = getLocation(config.remote);
            if (config.isHost) {
                try {
                    if (!isHostMethod(window, "GetNixProxy")) {
                        window.execScript('Class NixProxy\n' +
                        '    Private m_parent, m_child, m_Auth\n' +
                        '\n' +
                        '    Public Sub SetParent(obj, auth)\n' +
                        '        If isEmpty(m_Auth) Then m_Auth = auth\n' +
                        '        SET m_parent = obj\n' +
                        '    End Sub\n' +
                        '    Public Sub SetChild(obj)\n' +
                        '        SET m_child = obj\n' +
                        '        m_parent.ready()\n' +
                        '    End Sub\n' +
                        '\n' +
                        // The auth string, which is a pre-shared key between the parent and the child, 
                        // and that can only be set once by the parent, secures the communication, and also serves to provide
                        // 'proof' of the origin of the messages.
                        // Before passing the message on to the recipent we convert the message into a primitive, 
                        // this mitigates modifying .toString as an attack vector.
                        '    Public Sub SendToParent(data, auth)\n' +
                        '        If m_Auth = auth Then m_parent.send(CStr(data))\n' +
                        '    End Sub\n' +
                        '    Public Sub SendToChild(data, auth)\n' +
                        '        If m_Auth = auth Then m_child.send(CStr(data))\n' +
                        '    End Sub\n' +
                        'End Class\n' +
                        'Function GetNixProxy()\n' +
                        '    Set GetNixProxy = New NixProxy\n' +
                        'End Function\n', 'vbscript');
                    }
                    proxy = GetNixProxy();
                    proxy.SetParent({
                        send: function(msg){
                            pub.up.incoming(msg, targetOrigin);
                        },
                        ready: function(){
                            setTimeout(function(){
                                pub.up.callback(true);
                            }, 0);
                        }
                    }, config.secret);
                    send = function(msg){
                        proxy.SendToChild(msg, config.secret);
                    };
                } 
                catch (e) {
                    throw new Error("Could not set up VBScript NixProxy:" + e.message);
                }
                // set up the iframe
                apply(config.props, {
                    src: appendQueryParameters(config.remote, {
                        xdm_e: location.protocol + "//" + location.host,
                        xdm_c: config.channel,
                        xdm_s: config.secret,
                        xdm_p: 3 // 3 = NixTransport
                    })
                });
                frame = createFrame(config);
                frame.contentWindow.opener = proxy;
            }
            else {
                // by storing this in a variable we negate replacement attacks
                try {
                    proxy = window.opener;
                } 
                catch (e) {
                    throw new Error("Cannot access window.opener");
                }
                proxy.SetChild({
                    send: function(msg){
                        // the timeout is necessary to have execution continue in the correct context
                        global.setTimeout(function(){
                            pub.up.incoming(msg, targetOrigin);
                        }, 0);
                    }
                });
                
                send = function(msg){
                    proxy.SendToParent(msg, config.secret);
                };
                setTimeout(function(){
                    pub.up.callback(true);
                }, 0);
            }
        }
    });
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, undef, getLocation, appendQueryParameters, resolveUrl, createFrame, debug, un, apply */

/**
 * @class easyXDM.stack.NameTransport
 * NameTransport uses the window.name property to relay data.
 * The <code>local</code> parameter needs to be set on both the consumer and provider,<br/>
 * and the <code>remoteHelper</code> parameter needs to be set on the consumer.
 * @constructor
 * @param {Object} config The transports configuration.
 * @cfg {String} remoteHelper The url to the remote instance of hash.html - this is only needed for the host.
 * @namespace easyXDM.stack
 */
easyXDM.stack.NameTransport = function(config){
    
    var pub; // the public interface
    var isHost, callerWindow, remoteWindow, readyCount, callback, remoteOrigin, remoteUrl;
    
    function _sendMessage(message){
        var url = config.remoteHelper + (isHost ? ("#_3" + encodeURIComponent(remoteUrl + "#" + config.channel)) : ("#_2" + config.channel));
        callerWindow.contentWindow.sendMessage(message, url);
    }
    
    function _onReady(){
        if (isHost) {
            if (++readyCount === 2 || !isHost) {
                pub.up.callback(true);
            }
        }
        else {
            _sendMessage("ready");
            pub.up.callback(true);
        }
    }
    
    function _onMessage(message){
        pub.up.incoming(message, remoteOrigin);
    }
    
    function _onLoad(){
        if (callback) {
            setTimeout(function(){
                callback(true);
            }, 0);
        }
    }
    
    return (pub = {
        outgoing: function(message, domain, fn){
            callback = fn;
            _sendMessage(message);
        },
        destroy: function(){
            callerWindow.parentNode.removeChild(callerWindow);
            callerWindow = null;
            if (isHost) {
                remoteWindow.parentNode.removeChild(remoteWindow);
                remoteWindow = null;
            }
        },
        init: function(){
            isHost = config.isHost;
            readyCount = 0;
            remoteOrigin = getLocation(config.remote);
            config.local = resolveUrl(config.local);
            
            if (isHost) {
                // Register the callback
                easyXDM.Fn.set(config.channel, function(message){
                    if (isHost && message === "ready") {
                        // Replace the handler
                        easyXDM.Fn.set(config.channel, _onMessage);
                        _onReady();
                    }
                });
                
                // Set up the frame that points to the remote instance
                remoteUrl = appendQueryParameters(config.remote, {
                    xdm_e: config.local,
                    xdm_c: config.channel,
                    xdm_p: 2
                });
                apply(config.props, {
                    src: remoteUrl + '#' + config.channel,
                    name: config.channel
                });
                remoteWindow = createFrame(config);
            }
            else {
                config.remoteHelper = config.remote;
                easyXDM.Fn.set(config.channel, _onMessage);
            }
            // Set up the iframe that will be used for the transport
            callerWindow = createFrame({
                props: {
                    src: config.local + "#_4" + config.channel
                },
                onLoad: function(){
                    // Remove the handler
                    un(callerWindow, "load", callerWindow.loadFn);
                    easyXDM.Fn.set(config.channel + "_load", _onLoad);
                    _onReady();
                }
            });
        }
    });
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, getLocation, createFrame, debug, un, on, apply*/

/**
 * @class easyXDM.stack.HashTransport
 * HashTransport is a transport class that uses the IFrame URL Technique for communication.<br/>
 * <a href="http://msdn.microsoft.com/en-us/library/bb735305.aspx">http://msdn.microsoft.com/en-us/library/bb735305.aspx</a><br/>
 * @namespace easyXDM.stack
 * @constructor
 * @param {Object} config The transports configuration.
 * @cfg {String/Window} local The url to the local file used for proxying messages, or the local window.
 * @cfg {Number} delay The number of milliseconds easyXDM should try to get a reference to the local window.
 * @cfg {Number} interval The interval used when polling for messages.
 */
easyXDM.stack.HashTransport = function(config){
    var pub;
    var me = this, isHost, _timer, pollInterval, _lastMsg, _msgNr, _listenerWindow, _callerWindow;
    var usePolling, useParent, useResize, _remoteOrigin;
    
    function _sendMessage(message){
        if (!_callerWindow) {
            return;
        }
        var url = config.remote + "#" + (_msgNr++) + "_" + message;
        
        if (isHost || !useParent) {
            // We are referencing an iframe
            _callerWindow.contentWindow.location = url;
            if (useResize) {
                _callerWindow.width = _callerWindow.width > 75 ? 50 : 100;
            }
        }
        else {
            // We are referencing the parent window
            _callerWindow.location = url;
        }
    }
    
    function _handleHash(hash){
        _lastMsg = hash;
        pub.up.incoming(_lastMsg.substring(_lastMsg.indexOf("_") + 1), _remoteOrigin);
    }
    
    function _onResize(){
        _handleHash(_listenerWindow.location.hash);
    }
    
    /**
     * Checks location.hash for a new message and relays this to the receiver.
     * @private
     */
    function _pollHash(){
        if (_listenerWindow.location.hash && _listenerWindow.location.hash != _lastMsg) {
            _handleHash(_listenerWindow.location.hash);
        }
    }
    
    function _attachListeners(){
        if (usePolling) {
            _timer = setInterval(_pollHash, pollInterval);
        }
        else {
            on(_listenerWindow, "resize", _onResize);
        }
    }
    
    return (pub = {
        outgoing: function(message, domain){
            _sendMessage(message);
        },
        destroy: function(){
            if (usePolling) {
                window.clearInterval(_timer);
            }
            else if (_listenerWindow) {
                un(_listenerWindow, "resize", _pollHash);
            }
            if (isHost || !useParent) {
                _callerWindow.parentNode.removeChild(_callerWindow);
            }
            _callerWindow = null;
        },
        init: function(){
            isHost = config.isHost;
            pollInterval = config.interval;
            _lastMsg = "#" + config.channel;
            _msgNr = 0;
            usePolling = config.usePolling;
            useParent = config.useParent;
            useResize = config.useResize;
            _remoteOrigin = getLocation(config.remote);
            
            if (!isHost && useParent) {
                _listenerWindow = window;
                _callerWindow = parent;
                _attachListeners();
                pub.up.callback(true);
            }
            else {
                apply(config, {
                    props: {
                        src: (isHost ? config.remote : config.remote + "#" + config.channel),
                        name: (isHost ? "local_" : "remote_") + config.channel
                    },
                    onLoad: (isHost && useParent || !isHost) ? (function(){
                        _listenerWindow = window;
                        _attachListeners();
                        pub.up.callback(true);
                    }) : null
                });
                _callerWindow = createFrame(config);
                
                if (isHost && !useParent) {
                    var tries = 0, max = config.delay / 50;
                    (function getRef(){
                        if (++tries > max) {
                            throw new Error("Unable to reference listenerwindow");
                        }
                        if (_listenerWindow) {
                            return;
                        }
                        try {
                            // This works in IE6
                            _listenerWindow = _callerWindow.contentWindow.frames["remote_" + config.channel];
                            window.clearTimeout(_timer);
                            _attachListeners();
                            pub.up.callback(true);
                            return;
                        } 
                        catch (ex) {
                            setTimeout(getRef, 50);
                        }
                    }());
                }
            }
        }
    });
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, debug */

/**
 * @class easyXDM.stack.ReliableBehavior
 * This is a behavior that tries to make the underlying transport reliable by using acknowledgements.
 * @namespace easyXDM.stack
 * @constructor
 * @param {Object} config The behaviors configuration.
 * @cfg {Number} timeout How long it should wait before resending. Default is 5. Optional.
 * @cfg {Number} tries How many times it should try before giving up.
 */
easyXDM.stack.ReliableBehavior = function(config){
    var pub, // the public interface
 timer, // timer to wait for acks
 current, // the current message beging sent
 next, // the next message to be sent, to support piggybacking acks
 sendId = 0, // the id of the last message sent
 sendCount = 0, // how many times we hav tried resending
 maxTries = config.tries || 5, timeout = config.timeout, //
 receiveId = 0, // the id of the last message received
 callback; // the callback to execute when we have a confirmed success/failure
    return (pub = {
        incoming: function(message, origin){
            var indexOf = message.indexOf("_"), ack = parseInt(message.substring(0, indexOf), 10), id;
            message = message.substring(indexOf + 1);
            indexOf = message.indexOf("_");
            id = parseInt(message.substring(0, indexOf), 10);
            indexOf = message.indexOf("_");
            message = message.substring(indexOf + 1);
            if (timer && ack === sendId) {
                window.clearTimeout(timer);
                timer = null;
                if (callback) {
                    setTimeout(function(){
                        callback(true);
                    }, 0);
                }
            }
            if (id !== 0) {
                if (id !== receiveId) {
                    receiveId = id;
                    message = message.substring(id.length + 1);
                    pub.down.outgoing(id + "_0_ack", origin);
                    // we must give the other end time to pick up the ack
                    setTimeout(function(){
                        pub.up.incoming(message, origin);
                    }, config.timeout / 2);
                }
                else {
                    pub.down.outgoing(id + "_0_ack", origin);
                }
            }
        },
        outgoing: function(message, origin, fn){
            callback = fn;
            sendCount = 0;
            current = {
                data: receiveId + "_" + (++sendId) + "_" + message,
                origin: origin
            };
            
            // Keep resending until we have an ack
            (function send(){
                timer = null;
                if (++sendCount > maxTries) {
                    if (callback) {
                        setTimeout(function(){
                            callback(false);
                        }, 0);
                    }
                }
                else {
                    pub.down.outgoing(current.data, current.origin);
                    timer = setTimeout(send, config.timeout);
                }
            }());
        },
        destroy: function(){
            if (timer) {
                window.clearInterval(timer);
            }
            pub.down.destroy();
        }
    });
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, debug, undef*/

/**
 * @class easyXDM.stack.QueueBehavior
 * This is a behavior that enables queueing of messages. <br/>
 * It will buffer incoming messages and dispach these as fast as the underlying transport allows.
 * This will also fragment/defragment messages so that the outgoing message is never bigger than the
 * set length.
 * @namespace easyXDM.stack
 * @constructor
 * @param {Object} config The behaviors configuration. Optional.
 * @cfg {Number} maxLength The maximum length of each outgoing message. Set this to enable fragmentation.
 */
easyXDM.stack.QueueBehavior = function(config){
    var pub, queue = [], waiting = true, incoming = "", destroying, maxLength = 0;
    
    function dispatch(){
        if (waiting || queue.length === 0 || destroying) {
            return;
        }
        waiting = true;
        var message = queue.shift();
        
        pub.down.outgoing(message.data, message.origin, function(success){
            waiting = false;
            if (message.callback) {
                setTimeout(function(){
                    message.callback(success);
                }, 0);
            }
            dispatch();
        });
    }
    return (pub = {
        init: function(){
            if (undef(config)) {
                config = {};
            }
            maxLength = config.maxLength ? config.maxLength : 0;
            pub.down.init();
        },
        callback: function(success){
            waiting = false;
            dispatch();
            pub.up.callback(success);
        },
        incoming: function(message, origin){
            var indexOf = message.indexOf("_"), seq = parseInt(message.substring(0, indexOf), 10);
            incoming += message.substring(indexOf + 1);
            if (seq === 0) {
                if (config.encode) {
                    incoming = decodeURIComponent(incoming);
                }
                pub.up.incoming(incoming, origin);
                incoming = "";
            }
        },
        outgoing: function(message, origin, fn){
            if (config.encode) {
                message = encodeURIComponent(message);
            }
            var fragments = [], fragment;
            if (maxLength) {
                while (message.length !== 0) {
                    fragment = message.substring(0, maxLength);
                    message = message.substring(fragment.length);
                    fragments.push(fragment);
                }
            }
            else {
                fragments.push(message);
            }
            while ((fragment = fragments.shift())) {
                queue.push({
                    data: fragments.length + "_" + fragment,
                    origin: origin,
                    callback: fragments.length === 0 ? fn : null
                });
            }
            dispatch();
        },
        destroy: function(){
            destroying = true;
            pub.down.destroy();
        }
    });
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, undef */

/**
 * @class easyXDM.stack.VerifyBehavior
 * This behavior will verify that communication with the remote end is possible, and will also sign all outgoing,
 * and verify all incoming messages. This removes the risk of someone hijacking the iframe to send malicious messages.
 * @namespace easyXDM.stack
 * @constructor
 * @param {Object} config The behaviors configuration.
 * @cfg {Boolean} initiate If the verification should be initiated from this end.
 */
easyXDM.stack.VerifyBehavior = function(config){
    var pub, mySecret, theirSecret, verified = false;
    
    function startVerification(){
        mySecret = Math.random().toString(16).substring(2);
        pub.down.outgoing(mySecret);
    }
    
    return (pub = {
        incoming: function(message, origin){
            var indexOf = message.indexOf("_");
            if (indexOf === -1) {
                if (message === mySecret) {
                    pub.up.callback(true);
                }
                else if (!theirSecret) {
                    theirSecret = message;
                    if (!config.initiate) {
                        startVerification();
                    }
                    pub.down.outgoing(message);
                }
            }
            else {
                if (message.substring(0, indexOf) === theirSecret) {
                    pub.up.incoming(message.substring(indexOf + 1), origin);
                }
            }
        },
        outgoing: function(message, origin, fn){
            pub.down.outgoing(mySecret + "_" + message, origin, fn);
        },
        callback: function(success){
            if (config.initiate) {
                startVerification();
            }
        }
    });
};
/*jslint evil: true, browser: true, immed: true, passfail: true, undef: true, newcap: true*/
/*global easyXDM, window, escape, unescape, undef, getJSON, debug, emptyFn */

/**
 * @class easyXDM.stack.RpcBehavior
 * This uses JSON-RPC 2.0 to expose local methods and to invoke remote methods and have responses returned over the the string based transport stack.<br/>
 * Exposed methods can return values synchronous, asyncronous, or bet set up to not return anything.
 * @namespace easyXDM.stack
 * @constructor
 * @param {Object} proxy The object to apply the methods to.
 * @param {Object} config The definition of the local and remote interface to implement.
 * @cfg {Object} local The local interface to expose.
 * @cfg {Object} remote The remote methods to expose through the proxy.
 * @cfg {Object} serializer The serializer to use for serializing and deserializing the JSON. Should be compatible with the HTML5 JSON object. Optional, will default to JSON.
 */
easyXDM.stack.RpcBehavior = function(proxy, config){
    var pub, serializer = config.serializer || getJSON();
    var _callbackCounter = 0, _callbacks = {};
    
    /**
     * Serializes and sends the message
     * @private
     * @param {Object} data The JSON-RPC message to be sent. The jsonrpc property will be added.
     */
    function _send(data){
        data.jsonrpc = "2.0";
        pub.down.outgoing(serializer.stringify(data));
    }
    
    /**
     * Creates a method that implements the given definition
     * @private
     * @param {Object} The method configuration
     * @param {String} method The name of the method
     * @return {Function} A stub capable of proxying the requested method call
     */
    function _createMethod(definition, method){
        var slice = Array.prototype.slice;
        
        return function(){
            var l = arguments.length, callback, message = {
                method: method
            };
            
            if (l > 0 && typeof arguments[l - 1] === "function") {
                //with callback, procedure
                if (l > 1 && typeof arguments[l - 2] === "function") {
                    // two callbacks, success and error
                    callback = {
                        success: arguments[l - 2],
                        error: arguments[l - 1]
                    };
                    message.params = slice.call(arguments, 0, l - 2);
                }
                else {
                    // single callback, success
                    callback = {
                        success: arguments[l - 1]
                    };
                    message.params = slice.call(arguments, 0, l - 1);
                }
                _callbacks["" + (++_callbackCounter)] = callback;
                message.id = _callbackCounter;
            }
            else {
                // no callbacks, a notification
                message.params = slice.call(arguments, 0);
            }
            // Send the method request
            _send(message);
        };
    }
    
    /**
     * Executes the exposed method
     * @private
     * @param {String} method The name of the method
     * @param {Number} id The callback id to use
     * @param {Function} method The exposed implementation
     * @param {Array} params The parameters supplied by the remote end
     */
    function _executeMethod(method, id, fn, params){
        if (!fn) {
            if (id) {
                _send({
                    id: id,
                    error: {
                        code: -32601,
                        message: "Procedure not found."
                    }
                });
            }
            return;
        }
        
        var used = false, success, error;
        if (id) {
            success = function(result){
                if (used) {
                    return;
                }
                used = true;
                _send({
                    id: id,
                    result: result
                });
            };
            error = function(message){
                if (used) {
                    return;
                }
                used = true;
                _send({
                    id: id,
                    error: {
                        code: -32099,
                        message: "Application error: " + message
                    }
                });
            };
        }
        else {
            success = error = emptyFn;
        }
        // Call local method
        try {
            var result = fn.method.apply(fn.scope, params.concat([success, error]));
            if (!undef(result)) {
                success(result);
            }
        } 
        catch (ex1) {
            error(ex1.message);
        }
    }
    
    return (pub = {
        incoming: function(message, origin){
            var data = serializer.parse(message);
            if (data.method) {
                // A method call from the remote end
                if (config.handle) {
                    config.handle(data, _send);
                }
                else {
                    _executeMethod(data.method, data.id, config.local[data.method], data.params);
                }
            }
            else {
                // A method response from the other end
                var callback = _callbacks[data.id];
                if (data.error) {
                    if (callback.error) {
                        callback.error(data.error);
                    }
                }
                else if (callback.success) {
                    callback.success(data.result);
                }
                delete _callbacks[data.id];
            }
        },
        init: function(){
            if (config.remote) {
                // Implement the remote sides exposed methods
                for (var method in config.remote) {
                    if (config.remote.hasOwnProperty(method)) {
                        proxy[method] = _createMethod(config.remote[method], method);
                    }
                }
            }
            pub.down.init();
        },
        destroy: function(){
            for (var method in config.remote) {
                if (config.remote.hasOwnProperty(method) && proxy.hasOwnProperty(method)) {
                    delete proxy[method];
                }
            }
            pub.down.destroy();
        }
    });
};
})(window, document, location, window.setTimeout, decodeURIComponent, encodeURIComponent);


/* ----------------------------------------------------------------------
   - public/javascripts/4gen.js (last modified: 2016-05-03 20:22:21 +0000)
   ---------------------------------------------------------------------- */
init_4gen = function () {
  var $;

  if (typeof jQuery !== 'undefined') {
    $ = jQuery;
  }


  /*jslint browser: true, regexp: false */
  /*global Effect, jQuery, $,Element, escape */

  // CHANGEME
  var defaultViewManager = 'scroll';
  var adjacentLoadPages = 3;
  var adjacentFontLoadPages = 8;
  var ie6_pngfix_shim = '/images/4gen/trans_1x1.gif';
  var pagePadding = 30.0; // The padding on each page. (margin, padding, shadows, etc.)
                          // We may need to break this into width-wise and height-wise at some point.
  var extrasWidth = 315.0;

  var fontLoaderStrategy;
  var FONT_LOADER_EOT = 1;
  var FONT_LOADER_CSS_TTF = 2;
  var FONT_LOADER_MULTI_SVG = 3;

  var FONT_SERV_VERSION = 12; // Just change it when font serv changes.  just a cache buster

  /*******************************************************************************************

    HTML Page Resizer

  *******************************************************************************************/

  if (!window.console) {
    window.console = {log:function () {}};
  }

  // We only care about the DocumentManager in this
  var DocumentManager = (function () {

      //  Base64 encode / decode
      //  http://www.webtoolkit.info/

      var Base64 = {

        // private property
        _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

        // public method for decoding
        decode : function (input) {
          var output = "";
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;

          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

          while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
              output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
              output = output + String.fromCharCode(chr3);
            }

          }

          output = Base64._utf8_decode(output);

          return output;

        },

        // private method for UTF-8 decoding
        _utf8_decode : function (utftext) {
          var string = "";
          var i = 0;
          var c = 0;
          var c1 = 0;
          var c2 = 0;
          while ( i < utftext.length ) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
              string += String.fromCharCode(c);
              i++;
            }
            else if((c > 191) && (c < 224)) {
              c2 = utftext.charCodeAt(i+1);
              string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
              i += 2;
            }
            else {
              c2 = utftext.charCodeAt(i+1);
              c3 = utftext.charCodeAt(i+2);
              string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
              i += 3;
            }

          }

          return string;
        }

      };

      // addEventHelper takes the owner OBJ which will be "this"
      // when the callbacks are called, and the names of possible events
      //
      // It adds the methods (addEvent, removeEvent, and fireEvent) to
      // the ownerObj
      //
      // Just use it like
      // addEventHelper(cls, ['resize', 'cheeseup', 'lolcats']); after you declare your class
      // and call this.initEventHelper in your constructor
      //
      // change eventListenerEnabled to suppress events from firing

      // A helper class to make it easy for our classes to have callbacks
      function EventHelper (possibleEvents) {
      }

      EventHelper.prototype.initEventHelper = function () {
        this.eventListenerEnabled = true;
        this.eventListeners = {};
        for (var i = 0; i < this.possibleEvents.length; i++) {
          this.eventListeners[this.possibleEvents[i]] = {};
        }
      };

      // To ensure that callbacks with the function text but different
      // contexts can be registered, callbacks are index by a unique identifier
      // which is attached to the function as ._uid
      EventHelper.prototype.addEvent = function(eventName, callback) {
        if (!this.eventListeners[eventName]) {
          throw eventName + " is not a valid type of event";
        }
        // Initialize the uid counter if need be
        if (!this.eventListeners[eventName].next_uid) {
          this.eventListeners[eventName].next_uid = 1;
        }
        // Assign the uid and increment
        if(!callback._event_listener_uid) {
          callback._event_listener_uid = this.eventListeners[eventName].next_uid;
          this.eventListeners[eventName].next_uid++;
        }
        this.eventListeners[eventName][callback._event_listener_uid] = callback;
      };

      // Only delete the same instance of callback that was based into
      // add event
      EventHelper.prototype.removeEvent = function(eventName, callback) {
        delete this.eventListeners[eventName][callback._event_listener_uid];
      };


      // Fires all the eventListeners for an event name
      EventHelper.prototype.fireEvent = function(eventName, arg1/*, ...*/) {
        if (!this.eventListenerEnabled) {
          return;
        }

        var eventsToFire = this.eventListeners[eventName];
        // pop off the eventName
        var newArgs = [];
        if (arguments.length > 1) {
          newArgs[arguments.length - 2] = null;
          //make new array without the first arg
          for (var i = 1; i < arguments.length; i++) {
            newArgs[i-1] = arguments[i];
          }
        }

        var self = this;
        function startFireEvent(func) {
          // Have it call the function in a new thread
          //window.setTimeout(function () {
              func.apply(self, newArgs);
          //  },
          //  0);
        }
        for (var c in eventsToFire) {
          if (c != 'next_uid' && eventsToFire.hasOwnProperty(c)) { //Prevent next_uid from being called as a function WAT
            startFireEvent(eventsToFire[c]);
          }
        }
      };


      // Some ghetto inheritance
      // make sure you can eventHelper constructors
      function addEventHelper(cls, possibleEvents) {
        cls.prototype.addEvent = EventHelper.prototype.addEvent;
        cls.prototype.removeEvent = EventHelper.prototype.removeEvent;
        cls.prototype.fireEvent = EventHelper.prototype.fireEvent;
        cls.prototype.initEventHelper = EventHelper.prototype.initEventHelper;

        cls.prototype.possibleEvents = possibleEvents;
      }


      /////////////////
      // Font Loader declarations
      //////////////////////

      //////////////////////////////////////////////
      //
      // Some Constants used for FontLoader
      //
      //////////////////////////////////////////////
      var FONT_PRELOAD_BED_ID = 'font_preload_bed';
      var STUB_CHAR = "\uF8FF";

      // Used for styles
      var isIe = function () {
        return document.styleSheets[0] && !document.styleSheets[0].insertRule;
      };

      var isInt = function(i) {
        return i % 1 == 0;
      };

      var set_href = function(a, href) {
          if(isIe()) {
              /* IE changes the text of a link once the href is changed by js if
                 the link text looks like a link as well (e.g. if it starts with "www".)
                 The following makes sure the link text stays unchanged.
               */
              var text = a.innerHTML;
              a.href = href;
              if(a.innerHTML != text)
                  a.innerHTML = text;
          } else {
              a.href = href;
          }
      };

      var isFroYo = (function () {
          var uagent = navigator.userAgent.toLowerCase();
          return uagent.search("android 2.2") > -1; // Special check for froyo
        })();

      var isMobileSafari = (function () {
          var uagent = navigator.userAgent.toLowerCase();
          return (uagent.search("mobile") > -1 &&
            uagent.search("safari") > -1 &&
            !isFroYo); // Special check for froyo
        })();

      var isWebKit = navigator.userAgent.indexOf('AppleWebKit/') > -1;



      fontLoaderStrategy = (function () {
          if (isIe()) {
            return FONT_LOADER_EOT;
          } else if (isMobileSafari) {
            return FONT_LOADER_CSS_TTF;
          } else {
            return FONT_LOADER_CSS_TTF;
          }
        })();

      // Kludge for IE  Make it less aggressive for loading fonts
      if (isIe()) {
        adjacentFontLoadPages = 5;
        adjacentLoadPages = 2;
      }

      if (isFroYo) {
        adjacentFontLoadPages = 1;
        adjacentLoadPages = 1;
      }



      //////////////////////////////////////////////////////////
      //
      // Font object specific to the FontLoader
      //
      //////////////////////////////////////////////////////////

      function FontLoaderFont (id, shortstyle, family, fallback, weight, style) {
        this.id = id;
        this.shortstyle = shortstyle;
        this.family = family;
        this.fallback = fallback;
        this.weight = weight;
        this.style = style;
      }

      FontLoaderFont.prototype.eotCssRule = function (assetUrl) {
        var fontFaceStr = "src: url(" + assetUrl + this.family + ".eot); " +
            "font-family: " + this.family + "; font-weight: " + this.weight + "; font-style: " + this.style;
        return "@font-face {" + fontFaceStr + "}";
      };

      FontLoaderFont.prototype.ttfCssRule = function (assetUrl) {
        var fontFaceStr = "src: url(" + assetUrl + this.family + ".ttf) format('truetype'); " +
            "font-family: " + this.family + "; font-weight: " + this.weight + "; font-style: " + this.style;
        return "@font-face {" + fontFaceStr + "}";
      };

      FontLoaderFont.prototype.svgCssRule = function (assetUrl) {
        var fontFaceStr = "src: url(" + assetUrl + "#" + this.family + ") format('svg'); " +
            "font-family: " + this.family + "; font-weight: " + this.weight + "; font-style: " + this.style;
        return "@font-face {" + fontFaceStr + "}";
      };

      FontLoaderFont.prototype.createPreloadElem = function () {
        return "<span style='font-family: " + this.family + "'>scribd.</span> ";
        //document.body.appendChild(e);
      };


      //////////////////////////////////////////
      //
      // The FontLoader object
      //
      //////////////////////////////////////////
      function FontLoader (docManager) {
        this.fonts = [];
        this.docManager = docManager;
        this._cssRuleQueue = [];
        this._fontLoadQueue = [];
      }

      // Makes a new style block and adds it to the head
      // This is because manipulating an existing styleblock in
      // some browsers (including FF) causes a redisplay of elements
      FontLoader.prototype._makeNewStyleBlock = function () {
        var style = document.createElement('style');

        if (!window.createPopup) { /* For Safari */
          style.appendChild(document.createTextNode(''));
        }

        var head = document.getElementsByTagName('head')[0];
        head.appendChild(style); // Insert it into the beginning of the head

        return style;
      };

      // We batch update our CSS rules.  We push stuff into the queue, and after
      // the request we append them all to the CSS rule sheet
      //
      // THis is to make it so we don't accidentally trigger calculating new layouts
      // when it is unecessary
      FontLoader.prototype._insertCssRule = function (rule) {
        this._cssRuleQueue.push(rule);
      };

      // Call this at the end of any function that may call _insertCssRule
      FontLoader.prototype._flushCssRuleQueue = function (optionalIdName) {
        if (this._cssRuleQueue.length > 0) {
          var styleElem = (
              optionalIdName &&
              document.getElementById(optionalIdName)) ||
            this._makeNewStyleBlock();

          var cssText = this._cssRuleQueue.join('\n');

          if (isIe()) {
            styleElem.styleSheet.cssText = cssText;
          } else if (!window.createPopup) { /* For Safari */
            styleElem.appendChild(document.createTextNode(cssText));
          } else {
            styleElem.innerHTML = cssText;
          }

          this._cssRuleQueue = [];
        }
      };


      FontLoader.prototype.getFontAggregatorHostForFonts = function (fonts) {
        var fontIds = [];
        for (var i = 0; i < fonts.length; i++) {
          fontIds.push(fonts[i].shortstyle + fonts[i].id);
        }
        fontIds.sort();
        var url = this.docManager.nextFontAggregatorHost() + '/' + this.docManager.assetPrefix + '/' + fontIds.join(',') + '/' + FONT_SERV_VERSION + '/';

        switch(fontLoaderStrategy) {
        case FONT_LOADER_EOT:
          //url += 'eots';
          break;
        case FONT_LOADER_CSS_TTF:
          if (!isFroYo) {
            url += 'ttfs.css';
          }
          break;
        case FONT_LOADER_MULTI_SVG:
          url += 'fonts.svg';
          break;
        }

        return url;
      };
      //FontLoader.prototype._tLoadQueue

      FontLoader.prototype._addTTFRules = function (fonts, assetUrl) {
        for (var i = 0; i < fonts.length; i++) {
          var font = fonts[i];
          this._insertCssRule(font.ttfCssRule(assetUrl));
        }
      };

      FontLoader.prototype._addSVGRules = function (fonts, assetUrl) {
        for (var i = 0; i < fonts.length; i++) {
          var font = fonts[i];
          this._insertCssRule(font.svgCssRule(assetUrl));
        }
      };

      FontLoader.prototype._addEOTRules = function (fonts, assetUrl) {
        for (var i = 0; i < fonts.length; i++) {
          var font = fonts[i];
          this._insertCssRule(font.eotCssRule(assetUrl));
        }
      };


      FontLoader.prototype._nextPreloadId = function () {
        if (!this._preloadId) {
          this._preloadId = 0;
        }

        var id =  "preload_bed" + this._preloadId;

        this._preloadId += 1;

        return id;
      };

      FontLoader.prototype._addCSSWebkit = function (fonts, assetUrl) {

        var self = this;
        var preloadIFrame = document.createElement('iframe');

        function oniFrameLoad () {
          var newPreload = document.createElement('div');
          var preloadId = self._nextPreloadId();
          newPreload.innerHTML = innerHTML;

          var preloadBed = document.getElementById(FONT_PRELOAD_BED_ID);

          //document.body.appendChild(newPreload);

          var intervalId = window.setInterval(
            function () {
              // Wait until the stylesheet loads
              if (preloadIFrame.contentDocument.styleSheets.length > 0) {
                window.clearInterval(intervalId);

                //force style calculation
                preloadIFrame.contentDocument.body.getBoundingClientRect();
                preloadBed.appendChild(newPreload);
                window.setTimeout(function () {
                    //force style calculation
                    preloadIFrame.contentDocument.body.getBoundingClientRect();
                    self._addCSSLink(assetUrl);
                  },
                  500);
              }
            }, 0);
        }

        var preloadId = this._nextPreloadId();

        preloadIFrame.id = preloadId;

        var innerHTML = '';

        for (var i = 0; i < fonts.length; i++) {
          var font = fonts[i];
          innerHTML += font.createPreloadElem();
        }


        var styleElem = this._makeNewStyleBlock();


        preloadIFrame.addEventListener('load', function () {oniFrameLoad();}, false);
        preloadIFrame.style.display = 'none';
        document.body.appendChild(preloadIFrame);
        preloadIFrame.contentDocument.body.innerHTML = innerHTML;


        var link = preloadIFrame.contentDocument.createElement('link');
        link.href = assetUrl;
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.media = 'screen';

        var head = preloadIFrame.contentDocument.getElementsByTagName('head')[0];
        head.appendChild(link); // Insert it into the beginning of the head
      };

      FontLoader.prototype._addCSSLink = function (assetUrl) {
        var link = document.createElement('link');
        link.href = assetUrl;
        link.rel = 'stylesheet';
        link.type = 'text/css';

        var head = document.getElementsByTagName('head')[0];
        head.appendChild(link); // Insert it into the beginning of the head
      };


      FontLoader.prototype.flushFontQueue = function () {
        if (this._fontLoadQueue.length === 0) {
          return;
        }
        if (this.docManager.displayType=='rasterize') {
          return;
        }

        var fontsToLoad = this._fontLoadQueue;
        this._fontLoadQueue = [];


        var assetUrl = this.getFontAggregatorHostForFonts(fontsToLoad);

        switch(fontLoaderStrategy) {
        case FONT_LOADER_EOT:
          this._addEOTRules(fontsToLoad, assetUrl);
          break;
        case FONT_LOADER_CSS_TTF:
          if (isFroYo) {
            this._addTTFRules(fontsToLoad, assetUrl);
          } else if (isWebKit) {
            this._addCSSWebkit(fontsToLoad, assetUrl);
          } else {
            this._addCSSLink(assetUrl);
          }
          break;
        case FONT_LOADER_MULTI_SVG:
          this._addSVGRules(fontsToLoad, assetUrl);
          break;
        }

        this._flushCssRuleQueue();
      };

      FontLoader.prototype.addFontToQueue = function (fontId) {
        var font = this.fonts[fontId];
        if (!font._loadQueued) {
          font._loadQueued = true;
          this._fontLoadQueue.push(font);
        }
      };


      /////////////////////////
      // Public functions
      /////////////////////////
      FontLoader.prototype.addFont = function (id, shortstyle, family, fallback, weight, style) {
        var font = new FontLoaderFont(id, shortstyle, family, fallback, weight, style);
        this.fonts[id] = font;
      };

      /* deprecated */
      FontLoader.prototype.setNumFonts = function (numFonts) {
        for (var i = 0; i < numFonts; i++) {
          this.fonts[i] = new FontLoaderFont(i, "", "ff"+i, "sans-serif", "normal", "normal");
        }
      };

      // Makes styles to overcome the FOUT
      FontLoader.prototype._initHidersCSS = function () {
        var families = [];
        for (var i = 0; i < this.fonts.length; i++) {
          families.push('.' + this.fonts[i].family);
        }
        this._insertCssRule(families.join(', ')  + ' {display: none;}\n');
      };

      // Makes the real styles
      FontLoader.prototype._initFamilyCSS = function () {
        for (var i = 0; i < this.fonts.length; i++) {
          var fam = this.fonts[i].family;
          var fallback = this.fonts[i].fallback;
          var weight = this.fonts[i].weight;
          var style = this.fonts[i].style;

          var selector = 'div.' + fam + ' span';

          // If we have a specific embed div, use that as the root for the css selectors.
          if (typeof(scribd) !== 'undefined' && typeof(scribd.embed_div_id) !== 'undefined') {
            selector = '#' + scribd.embed_div_id + ' ' + selector;
          }

          if(isIe()) {
            // don't do font fallbacks for IE- it will try to slant fonts that are already italic
            this._insertCssRule(selector + ' {font-family: ' + fam + ' !important;\n}');
          } else {
            this._insertCssRule(selector + ' {font-family: ' + fam + ', ' + fallback + '; font-weight: '+weight+'; font-style: '+style+';\n}');
          }
        }
      };

      FontLoader.prototype.initStyles = function (numFonts) {
        if (this.docManager.displayType=='rasterize') {
          return;
        }

        this._initFamilyCSS();
        switch(fontLoaderStrategy) {
        case FONT_LOADER_EOT:
          break;
        case FONT_LOADER_CSS_TTF:
          if (!isFroYo) {
            this._initHidersCSS();
          }
          break;
        case FONT_LOADER_MULTI_SVG:
          break;
        }
        this._flushCssRuleQueue('preload_styler');
      };

      FontLoader.prototype.setupTestElements = function () {

        if (fontLoaderStrategy != FONT_LOADER_CSS_TTF || isWebKit || this.docManager.displayType=='rasterize') {
          return; // we only use this for TTFS and webkit
        }

        var innerHTML = '';

        for (var i = 0; i < this.fonts.length; i++) {
          var font = this.fonts[i];
          innerHTML += font.createPreloadElem();
        }

        var preloadBed = document.getElementById(FONT_PRELOAD_BED_ID);
        preloadBed.innerHTML = innerHTML;
        document.body.appendChild(preloadBed);

        this._insertCssRule('#' + FONT_PRELOAD_BED_ID + ' span {display: block; visibility: hidden}');
        this._flushCssRuleQueue();
      };

      function LoadFontGroup (groupNum, fontLoader) {
        this.pages = [];
        this.loaded = false;
        this.fonts = {}; // Object with fontFamily => true;  Used like a set
        this.numFonts = 0;
        this.fontLoader = fontLoader;
        this.groupNum = groupNum || 0;
      }

      LoadFontGroup.prototype.addPage = function (page) {
        for (var i = 0; i < page.fonts.length; i++) {
          var fontId = page.fonts[i];
          if (this.fonts[fontId] === undefined) {
            this.fonts[fontId] = true;
            this.numFonts += 1;
          }
        }
        this.pages.push(page);
      };


      LoadFontGroup.prototype.isFull = function () {
        var numPages = this.pages.length;
        var groupNum = this.groupNum;
        var numFonts = this.numFonts;

        if (fontLoaderStrategy == FONT_LOADER_EOT) {
          return (
            this.hasLoaded ||
            numFonts > 50 ||
            (numFonts >= 20 && (
                (groupNum === 0 && numPages >= adjacentFontLoadPages + 3) ||
                (numPages >= 15)))
          );
        } else  if (fontLoaderStrategy == FONT_LOADER_MULTI_SVG || isFroYo) {
          return (
            this.hasLoaded ||
            (numFonts >= 5 && numPages >= adjacentFontLoadPages)
          );
        } else {

          return (
            this.hasLoaded ||
            numFonts > 100 ||
            (numFonts >= 20 && (
                (groupNum === 0 && numPages >= adjacentFontLoadPages + 3) ||
                (numPages >= 100)))
          );
        }
      };

      // Defaults to load immediately. deferredDelay is in MS
      LoadFontGroup.prototype.load = function (loadDelay) {
        if (this.hasLoaded) {
          return;
        }

        this.hasLoaded = true;

        var self = this;
        function load () {
          for (var fontId in self.fonts) {
            if (self.fonts.hasOwnProperty(fontId)) {
              self.fontLoader.addFontToQueue(fontId);
            }
          }

          self.fontLoader.flushFontQueue();
        }


        if (loadDelay) {
          window.setTimeout(function () {load();}, loadDelay);
        } else {
          load();
        }
      };

      LoadFontGroup.prototype.newNextGroup = function () {
        return new LoadFontGroup(this.groupNum + 1, this.fontLoader);
      };


      //////////////////////////////////////////////
      // Page Manager Functions
      ///////////////////////////////////////////

      var SCALE_METHOD_WEBKIT = 1;
      var SCALE_METHOD_MOZ    = 2;
      var SCALE_METHOD_ZOOM   = 3;
      var SCALE_METHOD_OPERA  = 4;

      // pageScaleMethod is used to determine which CSS attribute we use to scale a page
      var pageScaleMethod = (function() {
          if (document.documentElement.style.WebkitTransform !== undefined) {
            return SCALE_METHOD_WEBKIT;
          } else if (document.documentElement.style.MozTransform !== undefined) {
            return SCALE_METHOD_MOZ;
          } else if (document.documentElement.style.OTransform !== undefined) {
            return SCALE_METHOD_OPERA;
          } else {
            return SCALE_METHOD_ZOOM;
          }
        })();

      // Usually container_elem will be the outer_page_elem
      // Params: see defaultParams for a list of arguments that are needed and descriptiopns
      function Page(params)  {
        // Set the params.  Every param we need should be in _defaultParams
        for (var p in this._defaultParams) {
          if (this._defaultParams.hasOwnProperty(p)) {
            this[p] = params[p] || this._defaultParams[p];
          }
        }

        // Some sanity checks
        for (var i = 0; i < this._requiredParams.length; i++) {
          var param = this._requiredParams[i];
          if (!this[param]) {
            throw "Missing required Page param: " + param;
          }
        }

        if (!this.contentUrl && !this.innerPageElem) {
          throw "Must initialize a page with either a contentUrl or innerPageElem element";
        }

        if (this.containerElem.boundToPageObj === true) {
          throw "Container Elem is already bound to a page.  We shouldn't get here";
        }
        this.containerElem.boundToPageObj = true;

        // This is used to manage whether we have to update the display.  We
        // don't actually have to zoom if we're displaying.  If we're not visible
        // we still need to keep track of whether or not the innerZoom has changed

        // This maintains the width we would like our contents to be.
        // It will generally be set to the last width we set our width to
        //
        // _targetWidth will be null if we don't have any pending zooms
        this._targetWidth = null;

        // We know that the innerPage is visible if it exists at the start
        this._innerPageVisible = !!this.innerPageElem;

        // We haven't turned the images on yet
        this._imagesTurnedOn = false;

        this.boundingRect = null;

        this.isVisible = false;  // Whether or not this page is being displayed.  The CurrentDisplay manager is
                                 // responsible for setting this eagerly
        this.displayDirty = true;  // if we need to update the display even if it is in the same state
        this.displayOn = null;


        this.loadHasStarted = !!this.innerPageElem; //If we've started (or have already finished loading the inner page
      }

      Page.prototype._defaultParams = {
        containerElem: null,  // This is generally the outer_page_x element of the page
        innerPageElem: null,  // Element of the page.  This exists once the page is loaded
        contentUrl: null,     // URL for content (either this or innerPageElem is required)
        origWidth: null,      // Width from manifest of document
        origHeight: null,     // Height from manifest of document
        fonts: null,          // List of font families
        docManager: null,     // The doc manager for the document. DocumentManager automatically injects this
        pageNum: null        // The pageNumber
      };

      Page.prototype._requiredParams = ['origWidth', 'origHeight', 'fonts', 'docManager', 'containerElem', 'pageNum'];



      // ONLY call this after all the outer pages are loaded
      // and after all the elements are zoomed
      //
      // TODO: when in fit to width, don't call this toooo often
      Page.prototype._updateBoundingRect = function () {
        var top, left, width, height;

        // This creates a bounding rectangle with the coordinate system where
        // 0,0 is the top left of the unscrolled container (typically window)

        if (this.containerElem.getBoundingClientRect && this.docManager.viewportManager.viewRect) {
          var boundingRect = this.containerElem.getBoundingClientRect();

          var vpr = this.docManager.viewportManager.viewRect;

          // unscroll the bounding rect, since getBoundingClientRect is affected by scroll
          left = boundingRect.left + vpr.left;
          top = boundingRect.top + vpr.top;

          // offset for the position on the scrolling component in the page
          if (vpr.offsetX) {
            left -= vpr.offsetX;
          }

          if (vpr.offsetY) {
            top -= vpr.offsetY;
          }

          width = boundingRect.right - boundingRect.left;
          height = boundingRect.bottom - boundingRect.top;

          this.boundingRect = {
            left: left,
            'top': top,
            bottom: top + height,
            right: left + width,
            width: width,
            height: height
          };

       } else {
         // TODO: this does not work with custom scroll parent on view manager
         top = this.containerElem.offsetTop;
         left = this.containerElem.offsetLeft;
         width = this.containerElem.offsetWidth;
         height = this.containerElem.offsetHeight;

         this.boundingRect = {
           left: left,
           'top': top,
           bottom: top + height,
           right: left + width,
           width: width,
           height: height
         };
       }

        /*
        var top = this.containerElem.offsetTop;
        var left = this.containerElem.offsetLeft;
        var width = this.containerElem.offsetWidth;
        var height = this.containerElem.offsetHeight;

        this.boundingRect = {
          left: left,
          'top': top,
          bottom: top + height,
          right: left + width,
          width: width,
          height: height

        } */
      };

      //////////////////////////////
      // ASYNC Loading Functions
      ////////////////////////////////
      //
      Page.prototype._setContainerContents = function (pageHTML) {
        // XXX This is for the demo only

        var getRidOfNoscripts =  /<noscript *><img[^<>]*\/><\/noscript *>/g;

        // Set the contents of our container to the pageHTML

        var el = $(pageHTML.replace(getRidOfNoscripts, ''))[0];
        this.containerElem.appendChild(el);
        var self = this;

        this.innerPageElem = el;
        this.turnOnLinks();
        this.turnOnImages(); // Turn on the images now
        this.fixSVGFonts();

        this.displayDirty = true;
        if (this.displayOn) {
          this.display();
        } else {
          this.hide();
        }
      };


      Page.prototype.fixSVGFonts = function () {
        if (this._svgFontsFixed) {
          throw "Already fixed the svg fonts";
        }

        if (!this.innerPageElem) {
          return;
        }

        if (isMobileSafari) {
          var splitSpaces = function (element) {
            if (element.nodeType == document.TEXT_NODE) {
              var spaceIdx = element.textContent.search(/[  \n][^ \n ]/);

              if (spaceIdx >= 0) {
                splitSpaces(element.splitText(spaceIdx + 1));
              }
            } else {
              var children  = element.childNodes;
              for (var i = 0; i < children.length; i++) {
                splitSpaces(children[i]);
              }
            }
          };

          var addSpans = function (element) {
            var children  = element.childNodes;
            for (var i = 0; i < children.length; i++) {
              var e1 = children[i];
              if (e1.nodeType == document.ELEMENT_NODE) {
                addSpans(e1);
              } else {
                var e2 = children[i+1];
                if (e2 && e2.nodeName == '#text') {
                  element.insertBefore(document.createElement('span'), e2);
                }
              }
            }
          };



          splitSpaces(this.innerPageElem);
          addSpans(this.innerPageElem);
        }
        this._svgFontsFixed = true;
      };


      Page.prototype.imagePageContent = function(imageUrl) {
        str = "<img src='"+ imageUrl +"'></img>";
        return str;
      };

      // Load the page from the json
      Page.prototype.load = function () {
        this.currentlyLoading = true;
        this.loadHasStarted = true;
        // We want to make it so if we call display while its loading, it turns it on after.
        // This gets rid of the race condition where you can't change the visibility of a page state
        // while it is loading

        if (this.innerPageElem) {
          throw "We already have loaded this page, but it looks like you called loadPage again";
        }

        this.loadFonts(); // When loading a page, start the loading of its fonts

        var callbackName = 'page' + this.pageNum + '_callback';

        //Sanity Check
        if (window[callbackName]) {
          // page callback is being redefined, garbage collect the old function first.
          try {
            delete window[callbackName]; // Surround with TRY because we can't do this with IE
          } catch (err) {
            // Just clean up the callback we set
            window[callbackName] = undefined;
          }
        }

        if (this.docManager.displayType == 'rasterize') {
            delete this.currentlyLoading;
            this._setContainerContents(this.imagePageContent(this.contentUrl));
            return;
        }

        // Set up a jsonp callback
        var s = document.createElement('script');

        // This will be called once the static jsonp file is loaded
        // "contents" will be an array with 1 string element.  This is the
        // body of the page
        var self = this;
        window[callbackName] = function (contents) {
          // Remove the script that we added
          document.body.removeChild(s);
          var pageHTML = contents[0];

          // We're not loading anymore
          delete self.currentlyLoading;

          // Set the contents of our container to
          // the page contents
          //
          // setContainerContents will either display or hide the page
          // based on the this.displayOn variable
          self._setContainerContents(pageHTML);

          if(typeof $ !== "undefined") {
            $container = $('#' + self.containerElem.id);
            skip_blur = Scribd.eligible_for_archive_blur_test 
              // only skip the blur if they are an eligible user (rails determines this) and have come from 
              // a search engine and are in the test variant
              && (document.referrer.match(/google|bing|yahoo/i) || window.location.hash.match(/\bscribd\b/))
              && ((Scribd.nway_test_choice_value("archive_blur") || "control") != "control")
              ;

            // If $ is undefined, this page should have been removed already if it's a "blurred page".
            if (!skip_blur && $container.hasClass('blurred_page')) {
              self.docManager.doDynamicBlurring(self.containerElem.id);
            }
          }


          self.docManager.fireEvent('pageLoaded', self.containerElem);

          try {
            delete window[callbackName]; // Surround with TRY because we can't do this with IE
          } catch (err) {
            // Just clean up the callback we set
            window[callbackName] = undefined;
          }
        };
       s.src = this.contentUrl;
       s.type = 'text/javascript';
       s.charset = 'UTF-8';
       document.body.appendChild(s);
      };

      // Removes the page from the DOM and resets its load state
      Page.prototype.remove = function() {
        if (this.innerPageElem) {
          var p = this.innerPageElem.parentNode;
          p.removeChild(this.innerPageElem);
          delete this.innerPageElem;
          delete this.currentLoading;
          delete this.loadHasStarted;
          this._linksTurnedOn = false;
          this._imagesTurnedOn = false;
          this._svgFontsFixed = false;
        }
      };

      ///////////////////////////////////////////
      // Visibility functions
      // (hiding and showing the page)
      //
      //////////////////////////////////////////

      // forceLoad is option.  if true, it will load the page if it hasn't been loaded yet
      Page.prototype.display = function (forceLoad, dontTurnOn) {
        if (this.displayOn && !this.displayDirty) {
          return;
        }

        this.displayOn = true;

        if (this.currentlyLoading) {
          return;
        } else if (!this.innerPageElem) {
          if (this.loadHasStarted) {
            return;
          } else if (forceLoad) {
            this.load();
            return;
          } else {
            return;
          }
        }

        this.displayDirty = false;


        if (!dontTurnOn) {
          // If we haven't turned on our images yet, we need to
          if(!this._linksTurnedOn) {
            this.turnOnLinks();
          }

          // If we haven't turned on our images yet, we need to
          if(!this._imagesTurnedOn) {
            this.turnOnImages();
          }


          // If we haven't turned on our images yet, we need to
          if(!this._svgFontsFixed) {
            this.fixSVGFonts();
          }

        }

        this.loadFonts(); // When loading a page, start the loading of its fonts

        // if we're laready visible, return
        if (this._innerPageVisible) {
          return;
        }

        this.containerElem.className = this.containerElem.className.replace(/placeholder|not_visible/g, '');
        this._innerPageVisible = true;
        if (!dontTurnOn) {
          this._fitContentsToWidth(); // This will update the zoom if it has changed while we've been away
          this.innerPageElem.style.display = 'block';
        }
      };

      Page.prototype.hide = function () {
        if (!this.displayOn && !this.displayDirty) {
          return;
        }

        this.displayOn = false;

        if (!this.innerPageElem) {
          return;
        }

        this.displayDirty = false;

        this.containerElem.className = this.containerElem.className + ' not_visible';
        this._innerPageVisible = false;
        this.innerPageElem.style.display = 'none';
      };

      Page.prototype.setLoadFontGroup = function (loadFontGroup) {
        loadFontGroup.addPage(this);
        this.loadFontGroup = loadFontGroup;
      };

      Page.prototype.loadFonts = function () {
        this.loadFontGroup.load();
      };

      var isIe6 = !!( document.all && (/msie 6./i).test(navigator.appVersion) && window.ActiveXObject );

      /////////////////////////////////////////////
      // RESIZING functions (zooming and whatnot)
      /////////////////////////////////////////////
      Page.prototype._setZoomScale = function(val) {
        var e = this.innerPageElem;
        switch (pageScaleMethod) {
        case SCALE_METHOD_WEBKIT:
          e.style.WebkitTransform = 'scale(' + val + ')';
          e.style.WebkitTransformOrigin = 'top left';
          break;

        case SCALE_METHOD_MOZ:
          e.style.MozTransform = 'scale(' + val + ')';
          e.style.MozTransformOrigin = 'top left';
          break;

        case SCALE_METHOD_OPERA:
          e.style.OTransform = 'scale(' + val + ')';
          e.style.OTransformOrigin = 'top left';
          break;

        case SCALE_METHOD_ZOOM:
          if (!e.originalZoom) {
            // Current style for zoom is in percent
            // NOTE: This only works in IE.
            e.originalZoom = e.currentStyle.zoom == 'normal' ? 1.0 : parseFloat(e.currentStyle.zoom) / 100.0;
            if (isIe6 && !this.docManager._isEmbed) {
              e.originalZoom *= 1.35;
            }
          }
          e.style.zoom = (e.originalZoom * val * 100.0) + '%';
          if(isIe6) {
            // force IE to rerender the element... dammit.  this is some pretty hacky stuff.
            var p = this.innerPageElem;
            setTimeout(function() {
              p.style.marginLeft = p.style.marginLeft === '' ? 0 : '';
            }, 500);
          }
          break;

        default:
          throw "Unknown scale method " + pageScaleMethod;
        }
      };


      // This changes the zoom of the innerPageElem. If the page isn't loaded yet
      // we don't do anything
      //
      // it will set the width to _targetWidth and then set it to null
      Page.prototype._fitContentsToWidth = function() {
        if (this._targetWidth && this.innerPageElem && this._innerPageVisible) {
          var multiplier = this._targetWidth / this.origWidth;
          this._setZoomScale(multiplier);
          this._targetWidth = null;
        }
      };

      Page.prototype.setWidth = function (width) {
        var height = Math.ceil((width/this.origWidth) * this.origHeight);
        this.containerElem.style.width = width + "px";
        this.containerElem.style.height = height + "px";
        this._targetWidth = width;
        this._fitContentsToWidth();
      };

      Page.prototype.setBounds = function(width, height) {
        if(this.origWidth / this.origHeight > width / height) {
          height = Math.ceil((width/this.origWidth) * this.origHeight);
        } else {
          width = Math.ceil((height/this.origHeight) * this.origWidth);
        }

        this.containerElem.style.width = width + "px";
        this.containerElem.style.height = height + "px";

        this._targetWidth = width;
        this._fitContentsToWidth();
      };


      /////////////////////////////////////////
      // Lazy Image Loading Functions
      /////////////////////////////////////////


      // The page's images are set to use the 'orig' attribute instead of 'src'
      // This is so we can control
      Page.prototype.turnOnImages = function () {
        if (!this.innerPageElem) {
          throw "Can't turn on images for a page that's not loaded";
        }

        // Sanity check
        if (this._imagesTurnedOn) {
          throw "Images have already been turned on for this document";
        }

        this._imagesTurnedOn = true;

        var elemsToCheck = this.innerPageElem.getElementsByTagName('img');
        for (var i = 0; i < elemsToCheck.length; i++) {
          var img = elemsToCheck[i];
          if (img.className.toLowerCase().search('absimg') > -1) {  // Is this an absimg?
            if (!img.src) {
              var inputUrl = this.docManager.subImageSrc(img.getAttribute('orig'));
              if (this.docManager.enablePNGHack) {
                img.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + inputUrl + "', sizingMethod='scale')";
                img.src = ie6_pngfix_shim;
              } else {
                // move the orig attribute to the src.  Also, set the display to block
                img.src = inputUrl;
              }
              img.removeAttribute('orig');
              img.style.display = 'block';
            }
          }
        }
      };

      // The page's images are set to use the 'orig' attribute instead of 'src'
      // This is so we can control
      Page.prototype.turnOnLinks = function () {
        if (!this.innerPageElem) {
          throw "Can't turn on links for a page that's not loaded";
        }

        // Sanity check
        if (this._linksTurnedOn) {
          throw "Links have already been turned on for this document";
        }



        this._linksTurnedOn = true;

        var _docManager = this.docManager;
        var make_handler = function(href) {
            return (function() {
              _docManager.gotoPage(href.substring(4));
            });
        };

        var elemsToCheck = this.innerPageElem.getElementsByTagName('a');
        for (var i = 0; i < elemsToCheck.length; i++) {
          var a = elemsToCheck[i];
          if (a.className.toLowerCase().search('ll') > -1) {  // Is this an absimg?
            if (!a.href) {
              var orig = a.getAttribute('orig');
              if (orig) {
                var href = Base64.decode(orig).replace(/^j[\W]*a[\W]*v[\W]*a[\W]*s[\W]*c[\W]*r[\W]*i[\W]*p[\W]*t[\W]*:|^f[\W]*i[\W]*l[\W]*e[\W]*:/ig, "");
                if (href.search(/^page/) > -1) {
                  // internal link
                  a.onclick = make_handler(href);
                } else {
                  // external link
                  if(href.search(/^mailto:/) >= 0) {
                      // leave mailto links alone
                  } else if(href.search(/^(http|ftp)/) < 0) {
                      href = "http://"+href;
                  }
                  a.target = "_blank";
                  set_href(a, href);
                  a.rel = "nofollow";
                }
              }
            }
          }
        }
      };

      function ViewportManager() {
        this.initEventHelper();

        this.viewRect = null;

        // Our callbacks are objects so we can remove them
        // Think of them more as "set" datatypes.  The value doesn't matter

        this.enabled = false;

        var self = this;

        // Wrap eventHandler
        this._scrollCallback = function () {
          self._eventHandler('scroll');
        };
        // Wrap eventHandler
        this._resizeCallback = function (e) {
          self._eventHandler('resize');
        };
      };

      addEventHelper(ViewportManager, ['vertical', 'horizontal', 'either', 'resize']);

      // broken for the iPad!
      ViewportManager.prototype._makeViewRect = function () {
        var scrollTarget = this.container;

        var de = document.documentElement;
        var top = scrollTarget.scrollTop || scrollTarget.scrollY || scrollTarget.pageYOffset || de.scrollTop;
        var left = scrollTarget.scrollLeft || scrollTarget.scrollX || scrollTarget.pageXOffset || de.scrollLeft;
        var width = scrollTarget.clientWidth || scrollTarget.innerWidth || de.clientWidth;
        var height = scrollTarget.clientHeight || scrollTarget.innerHeight || de.clientHeight;

        var right = left + width;
        var bottom = top + height;

        var out = {
          'top': top,
          left: left,
          right: right,
          bottom: bottom,

          width: width,
          height: height
        };

        // get the viewport offset
        if (this.container != window) {
          var rect = this.container.getBoundingClientRect && this.container.getBoundingClientRect();
          if (rect) {
            out.offsetX = rect.left;
            out.offsetY = rect.top;
          }
        }

        return out;
      };

      ViewportManager.prototype._updateViewRect = function() {
        var oldViewRect = this.viewRect;
        this.viewRect = this._makeViewRect();
        var xChanged = !oldViewRect || oldViewRect.left != this.viewRect.left || oldViewRect.width != this.viewRect.width; // don't need to compare right
        var yChanged = !oldViewRect || oldViewRect.top != this.viewRect.top || oldViewRect.height != this.viewRect.height; // don't need to compare bottom

        return {
          xChanged: xChanged,
          yChanged: yChanged
        };
      };

      ViewportManager.prototype._eventHandler = function (eventType) {
        var changes = this._updateViewRect();

        if((eventType == 'resize' || eventType == 'both') && (changes.xChanged || changes.yChanged)) {
          this.fireEvent('resize', this.viewRect);
        }

        // Call the callbacks that fire when either horizontal or vertical change
        if (changes.xChanged || changes.yChanged) {
          this.fireEvent('either', this.viewRect);
        }

        // Call the callbacks that fire when the horizontal stuff change
        if (changes.xChanged) {
          this.fireEvent('horizontal', this.viewRect);
        }


        // Call the callbacks that fire when the vertical stuff change
        if (changes.yChanged) {
          this.fireEvent('vertical', this.viewRect);
        }
      };


      ViewportManager.prototype.enable = function () {
        if (this.enabled) {
          throw "ViewportManager has already been enabled";
        }
        this.enabled = true;
        this.container = DocumentManager.scrollParent || window;
        this._eventHandler('both'); // Call it once to prime the pump and see if things changed since we last have been here

        if (window.addEventListener) {
          this.container.addEventListener('resize', this._resizeCallback, false);
          // We prefer scroll on the document because iPhone supports it
          var scrollTarget = DocumentManager.scrollParent ? this.container : window.document
          scrollTarget.addEventListener('scroll', this._scrollCallback, false);
        } else if (window.attachEvent) { // This is for IE.
          this.container.attachEvent('onresize', this._resizeCallback);
          this.container.attachEvent('onscroll', this._scrollCallback); // IE doesn't support scroll events for the document
        }
      };

      ViewportManager.prototype.disable = function () {
        if (!this.enabled) {
          throw "ViewportManager has already been disabled";
        }
        this.enabled = false;

        if (this.container.removeEventListener) {
          window.removeEventListener('resize', this._resizeCallback, false);
          this.container.removeEventListener('scroll', this._scrollCallback, false);
        } else if (window.detatchEvent) {
          window.detatchEvent('onresize', this._resizeCallback);
          this.container.detatchEvent('onscroll', this._scrollCallback);
        }
      };

      //
      // ViewManager (abstract)
      //
      // override the _methods
      //

      function ViewManager() { }

      ViewManager.prototype.name = function() {
        return this._name;
      };

      ViewManager.prototype.register = function(documentManager, viewportManager) {
        if (this.registered) {
          throw "This ViewManager is already registered";
        }
        this.registered = true;

        this.documentManager = documentManager;
        this.viewportManager = viewportManager;

        this._currentPageWidth = defaultViewWidth;
        this._currentZoomMultiplier = 1.0;
        this._updatePageWidths();

        var targetPage = this.documentManager.firstVisiblePage;

        this._register(documentManager, viewportManager);

        if (targetPage) {
          this.documentManager.gotoPage(targetPage.pageNum, {});
        }

        if (documentManager.view_manager_deferred) {
          documentManager.view_manager_deferred.resolve(documentManager);
        }
      };

      ViewManager.prototype._zoomedPageWidth = function() {
        return this._currentPageWidth * this._currentZoomMultiplier;
      };

      ViewManager.prototype._updatePageWidths = function() {
        this.documentManager.setPageWidths(this._zoomedPageWidth());
      };

      // Probably only need to override this for the Scroll view manager
      //
      // This tells the document manager if it should scroll to the top of the
      // current page or go the previous page(when scrolling up)
      ViewManager.prototype.isTopPageInView = function() {
        return true;
      };

      ViewManager.prototype._register = function(documentManager, viewportManager) {
        // optional method
      };

      ViewManager.prototype.unregister = function() {
        if (!this.registered) {
          throw "This ViewManager is already unregistered";
        }

        if (this.isFullscreen) {
          this.exitFullscreen();
        }

        this._checkBodyWidth();

        this._unregister();

        this.registered = false;
        delete this.documentManager;
        delete this.viewportManager;
      };

      ViewManager.prototype._unregister = function() {
        // optional method
      };

      ViewManager.prototype._pagingStep = function() {
        return 1;
      };

      ViewManager.prototype.gotoPage = function(pageNum, options) {
        if (!this.registered) {
          throw 'ViewManager must be registerd to call gotoPage';
        }

        this._gotoPage(pageNum, options);
      };

      ViewManager.prototype._gotoPage = function(pageNum, options) {
        // override me
      };

      ViewManager.prototype._fireHideExtras = function() {
        this.documentManager._fireHideExtras();
        this._extrasHidden = true;
      };

      ViewManager.prototype._fireShowExtras = function() {
        this.documentManager._fireShowExtras();
        this._extrasHidden = false;
      };

      ViewManager.prototype.enterFullscreen = function() {
        if(this.isFullscreen) {
          throw 'Fullscreen is already set';
        }

        this._checkBodyWidth();
        this.viewportManager.addEvent('resize', this._fullscreenResizedCallback);
        this._fireHideExtras();
        this.resetZoom();

        this._enterFullscreen();

        this._fullscreenResized(this.viewportManager.viewRect);
        this._currentPageWidth = this.viewportManager.viewRect.width;
        this.isFullscreen = true;

        var targetPage = this.documentManager.firstVisiblePage;
        if(targetPage) {
          this.documentManager.gotoPage(targetPage.pageNum, {});
        }

        this.documentManager._fireEnteredFullscreen();
      };

      ViewManager.prototype.exitFullscreen = function() {
        if(!this.isFullscreen) {
          throw 'Fullscreen is not set';
        }

        this.viewportManager.removeEvent('resize', this._fullscreenResizedCallback);
        this._fireShowExtras();
        this.resetZoom();

        this._exitFullscreen();

        this.isFullscreen = false;

        var targetPage = this.documentManager.firstVisiblePage;

        if(targetPage) {
          this.documentManager.gotoPage(targetPage.pageNum, {});
        }

        this.documentManager._fireExitedFullscreen();
      };


      ViewManager.prototype._viewBarWidth = function() {
        if(this._extrasHidden) {
          return 0.0;
        } else {
          return this.documentManager.options.extrasWidth;
        }
      };


      ViewManager.prototype._enterFullscreen = function() {
        // override me
      };

      ViewManager.prototype._exitFullscreen = function() {
        // override me
      };

      // Called every time the browser is resized when in fullscreen mode
      ViewManager.prototype._fullscreenResized = function(viewRect) {
        // override me
      };

      ViewManager.prototype._scrollWithZoom = function(viewRect, multiplier) {
        window.scrollTo(0, viewRect.top * multiplier);
      };

      ViewManager.prototype.zoom = function(multiplier) {
        var oldViewRect = this.viewportManager.viewRect;
        if (!oldViewRect) {
          return;
        }
        this._currentZoomMultiplier *= multiplier;
        this._checkBodyWidth();
        this._updatePageWidths();
        this.documentManager.setIsScrolling(true);
        this._scrollWithZoom(oldViewRect, multiplier);
        this._zoomed();
        this.documentManager.setIsScrolling(false);
        this.documentManager._fireZoomed(multiplier);
      };

      ViewManager.prototype._zoomed = function() {
        // override me
      };

      ViewManager.prototype.resetZoom = function() {
        this._currentZoomMultiplier = 1.0;
        this._checkBodyWidth();
        this._updatePageWidths();
        this._zoomed();
      };

      // This sets the width of the body to a fixed number if it's wider than
      // the current window width
      ViewManager.prototype._checkBodyWidth = function (pageWidth) {
        if (DocumentManager.scrollParent) {
          // body size doesn't need to be updated when rendering in own scroll container
          return;
        }

        if (DocumentManager.updateBodyWidth == false) {
          return;
        }

        // TODO: refactor this stuff out
        // TODO: once embeds are updated we can get rid of this
        var windowWidth = document.documentElement.clientWidth;
        var targetWidth = this._zoomedPageWidth() + this._viewBarWidth() + 10;

        globalHeader = document.getElementById('global_header'); // XXX XXX Make this non-hardcoded

        if (targetWidth > windowWidth) {
          document.body.style.width = targetWidth + 'px';
          if (globalHeader) {
            globalHeader.style.width = windowWidth + 'px';
          }
        } else {
          document.body.style.width = '100%';
          if (globalHeader) {
            globalHeader.style.width = '100%';
          }
        }
      };


      //////////////
      // Animation
      //////////////

      // Scroll so that the given target is at the top of the screen.
      // Duration is in milliseconds.
      function animateScroll (target, duration, callback) {
        if (typeof $ === 'undefined' && typeof scribd !== "undefined" ) {
          DocumentManager.setJQuery(scribd.jQuery);
        }
        $('html, body').animate({
          scrollTop: $(target).offset().top
        }, {
          queue: false,
          duration: duration,
          easing: 'linear',
          complete: callback
        });
      }


      //
      //  BookViewManager
      //
      function BookViewManager() {
        this._name = 'book';
        this.currentPageId = null;
        var self = this;

        this._fullscreenResizedCallback = function(rect) {
          self._fullscreenResized(rect);
        };
      }

      BookViewManager.prototype = new ViewManager();

      BookViewManager.prototype._register = function(documentManager, viewportManager) {
        this._prepareDisplay();
      };

      BookViewManager.prototype._unregister = function() {
        for(var pageId in this.documentManager.pages) {
          if (this.documentManager.pages.hasOwnProperty(pageId)) {
            var page = this.documentManager.pages[pageId];
            $(page.containerElem).removeClass("book_view");
            page.containerElem.style.display = '';
          }
        }
      };

      BookViewManager.prototype._prepareDisplay = function() {
        for(var pageId in this.documentManager.pages) {
          if (this.documentManager.pages.hasOwnProperty(pageId)) {
            var page = this.documentManager.pages[pageId];
            $(page.containerElem).addClass("book_view");
            page.containerElem.style.display = 'none';
            page.hide();
          }
        }

        this.documentManager.setPageMissingModulesVisible(false);

        // force page jump for initial defaultViewMode == 'book'
        this.documentManager.gotoPage(this.documentManager.currentPageNum() || 1);
      };

      BookViewManager.prototype._zoomed = function() {
        var page = this.documentManager.pages[this.currentPageId];
      };

      BookViewManager.prototype._updatePageWidths = function() {
        // Display two pages side by side, each half as wide as the display area.
        // The _zoomedPageWidth for book view actually refers to the width of
        // both pages together.
        this.documentManager.setPageWidths(this._zoomedPageWidth() / 2);
      };

      BookViewManager.prototype._pagingStep = function() {
        // Since we have two pages on screen, hitting the next or previous button
        // changes the page number by two.
        return 2;
      };

      BookViewManager.prototype._showPage = function(pageId) {
          var page = this.documentManager.pages[pageId];
          if(page) {
            page.isVisible = true;
            page.display(true);
            page.containerElem.style.display = '';
          }
      };

      BookViewManager.prototype._hidePage = function(pageId) {
          var page = this.documentManager.pages[pageId];
          if(page) {
            page.isVisible = false;
            page.containerElem.style.display = 'none';
            page.hide();
          }
      };

      BookViewManager.prototype._gotoPage = function(pageId, options) {
        pageId = parseInt(pageId, 10);
        // When we go to a page, we define this as going to the page on the left.
        // Notice that it is valid to go to page 0, as well as to the last page.
        // In these cases, the other page will be blank.

        // We default to having odd pages on the right, as per publishing convention:
        // http://en.wikipedia.org/wiki/Recto_and_verso
        // TODO: have an option to put odd pages on the left.
        if (pageId % 2 == 1) {
          pageId -= 1;
        }

        var left_page = null; // Verso
        var right_page = null; // Recto

        // Hide the old pages before we switch.
        if (typeof (this.currentPageId) == 'number') {
          this._hidePage(this.currentPageId);
          this._hidePage(this.currentPageId + 1);
        }

        // Get the left and right pages.
        left_page = this.documentManager.pages[pageId];
        right_page = this.documentManager.pages[pageId + 1];

        // If both of the pages are not available, exit early.
        if (!left_page && !right_page) { return; }

        this.currentPageId = pageId;

        if(this.isFullscreen) {
          this._setPageBounds(this.viewportManager.viewRect);
        }

        // Show the new pages.
        this._showPage(pageId);
        this._showPage(pageId + 1);

        // Inform the doc manager that page visibility changed.
        this.documentManager.visiblePagesChanged();
      };


      BookViewManager.prototype._setWidth = function(width) {
        this._currentPageWidth = width;
        this.documentManager.setPageWidths(width);
      };

      BookViewManager.prototype._fullscreenResized = function(viewRect) {
        this._setWidth(viewRect.width - pagePadding);
      };

      BookViewManager.prototype._enterFullscreen = function() {
        this._previousPageWidth = this._currentPageWidth || defaultViewWidth;
        animateScroll(this.documentManager.pages[this.currentPageId].containerElem, 300);
      };

      BookViewManager.prototype._exitFullscreen = function() {
        this._setWidth(defaultViewWidth);
        this._checkBodyWidth();
      };




      //
      //  SlideViewManager
      //
      function SlideViewManager() {
        this._name = 'slideshow';
        this.currentPageId = null;
        var self = this;

        this._fullscreenResizedCallback = function(rect) {
          self._fullscreenResized(rect);
        };
      }

      SlideViewManager.prototype = new ViewManager();

      SlideViewManager.prototype._register = function(documentManager, viewportManager) {
        this._prepareDisplay();
        var scroll_preventer = document.getElementById('scroll_preventer');
        if (scroll_preventer) {
          scroll_preventer.style.overflow = 'hidden';
          scroll_preventer.style.height = '100%';
        }
      };

      SlideViewManager.prototype._unregister = function() {
        var scroll_preventer = document.getElementById('scroll_preventer');
        if (scroll_preventer) {
          scroll_preventer.style.overflow = 'visible';
          scroll_preventer.style.height = 'auto';
        }
      };

      SlideViewManager.prototype._prepareDisplay = function() {
        for(var pageId in this.documentManager.pages) {
          if (this.documentManager.pages.hasOwnProperty(pageId)) {
            var page = this.documentManager.pages[pageId];
            page.containerElem.style.display = 'none';
            page.hide();
          }
        }

        this.documentManager.setPageMissingModulesVisible(false);

        // force page jump for initial defaultViewMode == 'slideshow'
        this.documentManager.gotoPage(this.documentManager.currentPageNum() || 1);
      };

      SlideViewManager.prototype._setPageBounds = function(bounds) {
        var page = this.documentManager.pages[this.currentPageId];
        if(page) {
          page.setBounds(bounds.width, bounds.height);
        }
      };

      SlideViewManager.prototype._gotoPage = function(pageId, options) {
        if (!this.documentManager.pages.hasOwnProperty(pageId)) {
          return;
        }

        var page;

        if (this.currentPageId) {
          page = this.documentManager.pages[this.currentPageId];
          if(page) {
            page.isVisible = false;
            page.containerElem.style.display = 'none';
            page.hide();
          }
        }

        this.currentPageId = pageId;
        page = this.documentManager.pages[pageId];

        if(this.isFullscreen) {
          this._setPageBounds(this.viewportManager.viewRect);
        }

        page.isVisible = true;
        page.display(true);
        page.containerElem.style.display = '';
        page._updateBoundingRect();

        // inform the doc manager that page visibility changed
        this.documentManager.visiblePagesChanged();
      };

      SlideViewManager.prototype._setWidth = function(width) {
        this._currentPageWidth = width;
        this.documentManager.setPageWidths(width);
      };

      SlideViewManager.prototype._fullscreenResized = function(viewRect) {
        this._setPageBounds(viewRect);
      };

      SlideViewManager.prototype._enterFullscreen = function() {
        this._previousPageWidth = this._currentPageWidth || defaultViewWidth;
        animateScroll(this.documentManager.pages[this.currentPageId].containerElem, 300);
      };

      SlideViewManager.prototype._exitFullscreen = function() {
        this._setWidth(defaultViewWidth);
        this._checkBodyWidth();
      };


      //////////////////////
      // ScrollViewManager
      //////////////////////

      function ScrollViewManager() {
        this._name = 'scroll';

        var self = this;

        this._verticalPositionChangeCallback = function () {
          self.checkAndUpdateVisiblePages();
        };
        this._fullscreenResizedCallback = function () {
          self._fullscreenResized();
        };

      }

      ScrollViewManager.prototype = new ViewManager();


      // Updates whether or not the page is visible.
      // Returns true if the value has changed
      ScrollViewManager.prototype._updateInViewport = function (page) {
        var vpr = this.viewportManager.viewRect; // Make it shorter :P
        var br = page.boundingRect;  // Our bounding rect

        //See if our bounding rect intersects with the viewport rectangle
        var oldVisible = page.isVisible;
        if (!vpr || !br) {
          page.isVisible = false;
        } else {
          page.isVisible = (
            br.left < vpr.right &&
            br.right > vpr.left &&
            br.top < vpr.bottom &&
            br.bottom > vpr.top);
        }

        this.adjacentVisiblePages = 2; // How many adjacent visible pages do we need?

        return oldVisible != page.isVisible;
      };

      ScrollViewManager.prototype.checkAndUpdateVisiblePages = function () {
        var hasChanged = false;
        for (var p in this.pages) {
          if (this.pages.hasOwnProperty(p)) {
            var page = this.pages[p];
            var curPageHasChanged = this._updateInViewport(page);

            // TODO right now we only have the current pages in viewport be visible
            hasChanged = hasChanged || curPageHasChanged;
          }
        }

        if (hasChanged) {
          // If we get here, we know that the visibility of a page has changed
          this.documentManager.visiblePagesChanged();
        } else {
          this.documentManager.scheduleLogPageView();
        }
        this._updateDisplayOnPages();
      };


      // Turn display on and off for pages
      // Set a timer to do this only max of once every N ms so we can have smoother scrollings
      ScrollViewManager.prototype._updateDisplayOnPages = function () {
        if (this.documentManager.firstVisiblePage && this.documentManager.lastVisiblePage) {
          var firstVisiblePageNum = this.documentManager.firstVisiblePage.pageNum - this.adjacentVisiblePages;
          var lastVisiblePageNum = this.documentManager.lastVisiblePage.pageNum + this.adjacentVisiblePages;

          // Some of these will be invalid page numbers, but we check
          for(var p in this.pages) {
            if (this.pages.hasOwnProperty(p)) {

              var page = this.pages[p];
              if (page) {
                if (page.pageNum >= firstVisiblePageNum &&  page.pageNum <= lastVisiblePageNum) {
                  page.display();
                } else {
                  page.hide();
                  this.documentManager.fireEvent('pageHide', page);
                }
              }
            }
          }
        }
      };

      ScrollViewManager.prototype._zoomed = function() {
        this.checkAndUpdateVisiblePages();
      };

      ScrollViewManager.prototype._register = function (documentManager, viewportManager) {
        this.pages = documentManager.pages;
        this.viewportManager.addEvent('vertical', this._verticalPositionChangeCallback);

        for(var pageId in this.pages) {
          if (this.pages.hasOwnProperty(pageId)) {
            var page = this.documentManager.pages[pageId];
            page.containerElem.style.display = '';
          }
        }

        this.documentManager.setPageMissingModulesVisible(true);

        // Initialize our junk
        this.documentManager._updatePageBoundingRects();
        this.checkAndUpdateVisiblePages();
      };

      ScrollViewManager.prototype.isTopPageInView = function () {
        var firstPage = this.documentManager.firstVisiblePage;

        if (firstPage) {

          // This happens sometimes when the view height is taller than one page and we are scrolled to the last page.
          if (this.documentManager._expectedFirstPageNum > firstPage.pageNum){
            return true;
          }

          return firstPage.boundingRect.top + 5.0 >= this.viewportManager.viewRect.top;
        } else {
          // If we don't have a first page object, let's let the document scroll
          // to the next page anyways
          return true;
        }
      };


      ScrollViewManager.prototype._unregister = function () {
        this.viewportManager.removeEvent('vertical', this._verticalPositionChangeCallback);
        delete this.pages;
      };

      // Pagination

      ScrollViewManager.prototype._gotoPage = function(pageId, options) {
        options = options || {};

        if (!this.pages.hasOwnProperty(pageId)) {
          return;
        }

        var page = this.documentManager.pages[pageId];
        this.documentManager.setIsScrolling(true);

        var scrollContainer = this.documentManager.viewportManager.container;
        page._updateBoundingRect();

        if (scrollContainer == window) {
          scrollTo(page.boundingRect.left, page.boundingRect.top - (options.offset || 0));
        } else {
          scrollContainer.scrollTop = page.boundingRect.top - (options.offset || 0);
        }

        this.documentManager.setIsScrolling(false);

        if (!this.documentManager.isScrolling) {
          this.documentManager.visiblePagesChanged();
        }

        return page.pageNum;
      };

      ScrollViewManager.prototype._gotoNextPage = function() {
        if (!this.documentManager.firstVisiblePage) {
          return;
        }
        this.documentManager.gotoPage(this.documentManager.firstVisiblePage.pageNum + 1, {'direction' : 1});
      };

      ScrollViewManager.prototype._gotoPreviousPage = function() {
        if (!this.documentManager.firstVisiblePage) {
          return;
        }

        this.documentManager.gotoPage(this.documentManager.firstVisiblePage.pageNum - 1, {'direction' : -1});
      };


      // Fullscreen

      ScrollViewManager.prototype._setWidth = function(width) {
        var position = this.pagePosition();

        this._currentPageWidth = width;
        this._updatePageWidths();
        this._checkBodyWidth();

        this.restorePosition(position);
      };

      ScrollViewManager.prototype._fullscreenResized = function() {
        this._setWidth((window.innerWidth || document.documentElement.clientWidth) - pagePadding);
      };

      ScrollViewManager.prototype._enterFullscreen = function() {
        this._previousPageWidth = this._currentWidth || defaultViewWidth;
      };

      ScrollViewManager.prototype._exitFullscreen = function() {
        this._setWidth(this._previousPageWidth);
      };

      ScrollViewManager.prototype.pagePosition = function() {
        var container = $(this.viewportManager.container);

        // the old crappy way
        if (container.is(window)) {
          var page = this.documentManager.currentPageNum() || 1;
          var page_elm = $("#outer_page_" + page);

          var pos = 0;
          if (page_elm.length){
            pos = ($(window).scrollTop() - page_elm.offset().top) / page_elm.height();
          }
          return [page, pos];
        }

        var currentPage = this.documentManager.pages[this.documentManager.currentPageNum() || 1];
        var scrollTop = container.scrollTop();
        var scrollLeft = container.scrollLeft();

        var px = (scrollTop - currentPage.boundingRect.top) / currentPage.boundingRect.height;
        var py = (scrollLeft - currentPage.boundingRect.left) / currentPage.boundingRect.width;

        return [currentPage.pageNum, px, py];
      }

      // restores a position from pagePosition, [page_num, percentage_of_page, percentage_of_page_x]
      ScrollViewManager.prototype.restorePosition = function(pos) {
        if (this._disableRestorePosition) {
          return;
        }

        var page_elm = $(this.pages[pos[0]].containerElem);
        this._gotoPage(pos[0], { offset: -Math.floor(pos[1] * page_elm.height()) });

        if (pos[2] != null) {
          var container = $(this.viewportManager.container);
          if (!$(container).is(window)) {
            var x_offset = pos[2];
            x_offset = Math.floor(x_offset * page_elm.width());
            var max_scroll = page_elm.width() - container.width(); // close enough
            container[0].scrollLeft = Math.min(max_scroll, x_offset);
          }
        }
      }

      ScrollViewManager.prototype.zoom = function(multiplier) {
        var oldViewRect = this.viewportManager.viewRect;
        if (!oldViewRect) {
          return;
        }

        var position = this.pagePosition();

        this._currentZoomMultiplier *= multiplier;
        this._checkBodyWidth();
        this._updatePageWidths();

        this.restorePosition(position);
        this._zoomed();

        this.documentManager._fireZoomed(multiplier);
      }

      function DocumentManager(defaultViewMode, mobile, options) {
        this.options = options || {};
        this.options.extrasWidth = this.options.extrasWidth || extrasWidth;

        this.defaultViewMode = (defaultViewMode || 'scroll');
        this.mobile = (mobile || false);

        if ($) {
          // used to tell when the view manager is actually ready
          this.view_manager_deferred = $.Deferred();
        }

        this.initEventHelper();
        this.pages = {};
        this._pageWidths = null;
        this._fontLoader = new FontLoader(this);

        this.viewManagers = {
          'scroll': new ScrollViewManager(),
          'slideshow': new SlideViewManager(),
          'book': new BookViewManager()
        };


        // The viewport Manager (abbreviated for short)
        this.viewportManager = new ViewportManager();

        this._currentFontAggregatorHostIdx = 0;

        this.visiblePages = [];
        this.firstVisiblePage = null;
        this.lastVisiblePage = null;

        this.currentFontGroup = new LoadFontGroup(0, this._fontLoader);

        this.isScrolling = false;
        this._scrollingCount = 0;
      }

      addEventHelper(DocumentManager, [
        'expectedFirstPageChanged', // Passes in the new first page
        'viewmodeChanged',
        'enteredFullscreen',
        'exitedFullscreen',
        'hideExtras',
        'showExtras',
        'zoomed', // Passes in the zoom multiplier
        'pageHide',
        'pageLoaded',
        'allPagesAdded',
        'pageView',
        'viewmodeInitialized'
        ]);

      DocumentManager.prototype.disableRestorePosition = function() {
        this.viewManagers.scroll._disableRestorePosition = true;
      }

      DocumentManager.prototype._fireZoomed = function(multiplier) {
        this.fireEvent('zoomed', multiplier);
      };

      DocumentManager.prototype.nextFontAggregatorHost = function () {
        this._currentFontAggregatorHostIdx = (this._currentFontAggregatorHostIdx + 1) % this.fontAggregatorHosts.length;
        return this.fontAggregatorHosts[this._currentFontAggregatorHostIdx];
      };

      DocumentManager.prototype._fireHideExtras = function() {
        this.fireEvent('hideExtras');
      };

      DocumentManager.prototype._fireShowExtras = function() {
        this.fireEvent('showExtras');
      };

      DocumentManager.prototype.currentPageNum = function() {
        return this._expectedFirstPageNum;
      };

      DocumentManager.prototype.setupTestElements = function () {
        this._fontLoader.setupTestElements();
      };

      DocumentManager.prototype.pageCount = function() {
        if(this.hasOwnProperty('_pageCount')) {
          return this._pageCount;
        }
        var i = 0;
        for(var p in this.pages) {
          if (this.pages.hasOwnProperty(p)) {
          i++;
          }
        }
        this._pageCount = i;
        return this._pageCount;
      };

      DocumentManager.prototype.setupPaidDocument = function(allowedPages, originalPageCount) {
          this.allowedPages = allowedPages;
          this.originalPageCount = originalPageCount;
          this._allowedPagesHash = [];
          this._maximumAllowedPage = Math.max.apply(null, this.allowedPages);
          this._minimumAllowedPage = Math.min.apply(null, this.allowedPages);
          this._isPaidDocument = true;
          this._pageMissingElements = [];
          for (var i=0; i < allowedPages.length; i++) {
              this._allowedPagesHash[allowedPages[i]] = true;
              if ((i > 0 && allowedPages[i] > allowedPages[i-1]+1)||(i===0 && allowedPages[i]!=1)) {
                  this._pageMissingElements.push('page_missing_explanation_' + allowedPages[i].toString());
              }
          }
          if (this._maximumAllowedPage!=this.originalPageCount) {
              this._pageMissingElements.push('page_missing_explanation_' + (this.originalPageCount+1).toString());
          }
      };

      DocumentManager.prototype.minimumPageNumber = function() {
          if (this.viewMode() == 'book') {
            return 0;
          } else {
            return 1;
          }
      };

      DocumentManager.prototype.maximumPageNumber = function() {
          if (this.allowedPages) {
              return this.originalPageCount;
          } else {
              return this.pageCount();
          }
      };

      DocumentManager.prototype.getClosestPageNumber = function(pageNum, direction) {
          if (this.allowedPages) {
              if (this._allowedPagesHash[pageNum]) {
                  return pageNum;
              } else {
                  if (pageNum >= this._maximumAllowedPage) {
                      return this._maximumAllowedPage;
                  } else if (pageNum <= this._minimumAllowedPage) {
                      return this._minimumAllowedPage;
                  }

                  for (var i=1; i <= this.originalPageCount; i++) {
                      if (direction <= 0 &&
                          this._allowedPagesHash[pageNum-i] === true) {
                          return pageNum-i;
                      } else if (
                          direction >=0 &&
                          pageNum + i < this.originalPageCount &&
                          this._allowedPagesHash[pageNum+i] === true) {
                          return pageNum+i;
                      }
                  }
              }
          } else {
              return pageNum;
          }
      };

      DocumentManager.prototype.setPageMissingModulesVisible = function (visible) {
          if (typeof $ === 'undefined' && typeof scribd !== "undefined" ) {
            DocumentManager.setJQuery(scribd.jQuery);
          }
          if (!this._isPaidDocument) {
              return;
          }
          for (var i = 0; i < this._pageMissingElements.length; i++) {
            var elm = $(this._pageMissingElements[i]);
            if (elm) {
              if (visible){
                elm.show();
              } else {
                elm.hide();
              }
            }
          }
      };


      DocumentManager.prototype.getNextAvailablePage = function(pageNum) {
          return getClosestPageNumber(pageNum, 1);
      };

      DocumentManager.prototype.getPreviousAvailablePage = function(pageNum) {
          return getClosestPageNumber(pageNum, -1);
      };

      DocumentManager.prototype.flushFontQueue = function () {
        this._fontLoader.flushFontQueue();
      };


      // Only the ViewManager should call this
      DocumentManager.prototype.visiblePagesChanged = function () {
        var visiblePages = [];
        for (var p in this.pages) {
          if (this.pages.hasOwnProperty(p)) {
            var page = this.pages[p];
            if (page.isVisible) {
              visiblePages.push(page);
            }
          }
        }

        //DEV-934
        //this prevents issues when the element containing the iframe is hidden on page load
        if (!visiblePages.length){
          return;
        }

        //Gotta sort them
        visiblePages.sort(function(a,b) {
            if (a.pageNum < b.pageNum) {
              return -1;
            } else {
              return 1;
            }
          }
        );

        this.visiblePages = visiblePages;
        var lastFirstVisiblePage = this.firstVisiblePage;
        this.firstVisiblePage = visiblePages.length > 0 ? visiblePages[0] : null;
        this.lastVisiblePage = visiblePages.length > 0 ? visiblePages[visiblePages.length - 1] : null;


        if (!this.isScrolling) {
          this._loadAdjacentFonts();
          this._loadAdjacentPages();
        }

        // Check to see if the first page changed
        if ((this.firstVisiblePage !== lastFirstVisiblePage &&
            (!this.firstVisiblePage || !lastFirstVisiblePage)) ||
          this.firstVisiblePage.pageNum != lastFirstVisiblePage.pageNum) {

          // We don't want to fire this if we're scrolling
          if (!this.isScrolling && this.firstVisiblePage) {
            this._updateExpectedFirstPage(this.firstVisiblePage.pageNum);
          }
        }

        this.scheduleLogPageView();
      };


      function constrain(num, min, max) {
        return Math.min(max, Math.max(min, num));
      }

      DocumentManager.prototype.boundingRatioForPage = function (page) {
        var vpr = this.viewportManager.viewRect; // Make it shorter :P
        var br = page.boundingRect;  // Our bounding rect

        var pageHeight = br.bottom - br.top;
        var pageWidth = br.right - br.left;

        return {
          left: (vpr.left - br.left) / pageWidth,
          right: (vpr.right - br.right) / pageWidth + 1.0,
          'top': constrain((vpr.top - br.top) / pageHeight + page.pageNum,
            page.pageNum,
            page.pageNum + 1.0),
          bottom: constrain((vpr.bottom - br.bottom) / pageHeight + page.pageNum + 1.0,
            page.pageNum,
            page.pageNum + 1.0)
        };
      };


      // Set a timer to log the page view in a second
      // If there's one already scheduled, defer it
      DocumentManager.prototype.scheduleLogPageView = function() {
        if (this.logPageViewTimout) {
          window.clearTimeout(this.logPageViewTimout);

        }
        var self = this;
        this.logPageViewTimout = window.setTimeout(function () {
            self.logPageView();
            self.logPageViewTimout = null;
          },
          1000
        );
      };

      // Rounds to two decimal places
      function _floor2(x) {
        return Math.floor(x * 100.0) / 100.0;
      }

      DocumentManager.prototype.getVisibleBBox = function () {
        var ret = {};
        if (this.firstVisiblePage) {
          var topVb = this.boundingRatioForPage(this.firstVisiblePage);
          ret.left = topVb.left;
          ret.right = topVb.right;
          ret.top = topVb.top;
        }

        if (this.lastVisiblePage) {
          var bottomVb = this.boundingRatioForPage(this.lastVisiblePage);
          ret.bottom = bottomVb.bottom;
        }
        return ret;
      };

      DocumentManager.prototype.logPageView = function()  {
        var bbox = this.getVisibleBBox();

        // Truncate the values to make it a little smaller
        for (var k in bbox) {
          if (bbox.hasOwnProperty(k)) {
            bbox[k] = _floor2(bbox[k]);
          }
        }

        var rat = window.$rat;
        if (rat) {
          var val;
          if (window.RAT_API_VERSION == '2') {
            val = [[bbox.left, bbox.top], [bbox.right, bbox.bottom]];
          } else {
            val =  '(' + bbox.left + ' ' + bbox.top + ') (' + bbox.right + ' ' + bbox.bottom + ')';
          }
          rat('fourgen.viewchange', val);
        }

        this.fireEvent('pageView');
        return bbox;
      };

      DocumentManager.prototype._updateExpectedFirstPage = function (pageNum) {
        this._expectedFirstPageNum = pageNum;
        this.fireEvent('expectedFirstPageChanged', this._expectedFirstPageNum);
      };

      DocumentManager.prototype._loadAdjacentFonts = function () {
        if (this.firstVisiblePage && this.lastVisiblePage) {
          var pagesToDisplay = [];
          var firstLoadPageNum = this.firstVisiblePage.pageNum - adjacentFontLoadPages;
          var lastLoadPageNum = this.lastVisiblePage.pageNum + adjacentFontLoadPages;

          // Some of these will be invalid page numbers, but we check
          for (var i = firstLoadPageNum; i <= lastLoadPageNum; i++) {
            var page = this.pages[i];
            if (page) {
              page.loadFonts();
            }
          }
        }
      };

      DocumentManager.prototype._loadAdjacentPages = function () {
        if (this.firstVisiblePage && this.lastVisiblePage) {
          var pagesToDisplay = [];
          var firstLoadPageNum = this.firstVisiblePage.pageNum - adjacentLoadPages;
          var lastLoadPageNum = this.lastVisiblePage.pageNum + adjacentLoadPages;

          // Some of these will be invalid page numbers, but we check
          for (var i = firstLoadPageNum; i <= lastLoadPageNum; i++) {
            var page = this.pages[i];
            if (page &&!page.loadHasStarted) {
              page.load();
              if (this.mobile) {
                page.setWidth(this._pageWidths);
              }
            }
          }

          if (this.mobile) {
            this._removeUnusedPages();
          }
        }
      };

      // A dirty dirty hack to remove pages outside the scope of the current load window from the DOM
      // This will "hopefully" remedy the crashing issues currently presenting themselves on the iPad
      DocumentManager.prototype._removeUnusedPages = function() {
        var firstLoadPageNum = this.firstVisiblePage.pageNum - adjacentLoadPages;
        var lastLoadPageNum = this.lastVisiblePage.pageNum + adjacentLoadPages;
        var pages = this.pages;

        var i = adjacentLoadPages+1;
        while (pages[i]) {
          if (i < firstLoadPageNum || i > lastLoadPageNum) {
            pages[i].remove();
          }
          i++;
        }

      };

      // ONLY call this after all the outer pages are loaded
      // and after all the elements are zoomed
      DocumentManager.prototype._updatePageBoundingRects = function () {
        for(var p in this.pages) {
          if (this.pages.hasOwnProperty(p)) {
            this.pages[p]._updateBoundingRect();
          }
        }
      };

      DocumentManager.prototype.removeInsteadOfBlurring = function () {
        if ((/iPhone|iPod|iPad|Android|BlackBerry/).test(navigator.userAgent)) {
          // We're on mobile.
          return true;
        }
        if (typeof Scribd === "undefined" || typeof $ === "undefined") {
          return true;
        }
        return false;
      }

      // Add a page.  We will be injecting docManager into params, so it will be mutated
      DocumentManager.prototype.addPage = function (params) {
        if (params.blur && this.removeInsteadOfBlurring()) {
          // If this is a "blurred" page and we're removing "blurred" pages, remove it.
          params.containerElem.parentNode.removeChild(params.containerElem);
        } else {
          if (params.pageNum === undefined) {
            throw "must have pageNum param";
          }
          params.docManager = this;

          var page = new Page(params);

          this.pages[params.pageNum] = page;
          if (this._pageWidths) {
            page.setWidth(this._pageWidths);
          }

          if (this.currentFontGroup.isFull()) {
            this.currentFontGroup = this.currentFontGroup.newNextGroup();
          }

          page.setLoadFontGroup(this.currentFontGroup);

          return page;
        }
      };


      // Set isScrolling to true to suppress scroll events if we're
      // forcing the window to scroll
      //
      // It does not automatically load pages while in scrolling mode either
      // Track this re-entrant-ly, using a counter for the number of scroll
      // animations that are still happening.
      DocumentManager.prototype.setIsScrolling = function (isScrolling) {
        // Increment or decrement the counter.
        if (isScrolling) {
          this._scrollingCount += 1;
        } else {
          this._scrollingCount -= 1;
        }
        // Ignore excessive decrements.
        if (this._scrollingCount < 0) {
          this._scrollingCount = 0;
        }
        // Set the boolean variable based on the counter.
        if (this._scrollingCount === 0) {
          this.isScrolling = false;
        } else {
          this.isScrolling = true;
        }
      };

      DocumentManager.prototype.setViewManager = function (viewManagerName, cb) {
        if (this._currentViewManager) {
          this._setViewManager(viewManagerName);
          if(typeof(cb) === 'function') {
            cb();
          }
        }
        else {
          var self = this;
          this.addEvent("viewmodeInitialized", function() {
            self.setViewManager(viewManagerName, cb);
          });
        }
      };

      DocumentManager.prototype._setViewManager = function (viewManagerName, initial) {
        if(!initial) {
          this._currentViewManager.unregister();
        }

        var previousViewManager = this._currentViewManager;
        this._currentViewManager = this.viewManagers[viewManagerName];

        this._currentViewManager.register(this, this.viewportManager);

        this.fireEvent('viewmodeChanged',
         this.viewMode(),
         previousViewManager ? previousViewManager.name() : null);
      };

      DocumentManager.prototype.setInitialViewManager = function (viewManagerName) {
        if (this._currentViewManager) {
          throw "This should be called before any view manager exists";
        }
        this._setViewManager(viewManagerName, true);
        this.fireEvent("viewmodeInitialized", this.viewMode(), null);
      };

      DocumentManager.prototype.setDefaultWidth = function(width) {
          this._currentViewManager._currentPageWidth = width;
          this._currentViewManager._currentZoomMultiplier = 1.0;
          this._currentViewManager._updatePageWidths();
      };

      // Replaces the image src with a domain of our chosing for image loading
      DocumentManager.prototype.subImageSrc = function (src) {

        var i,j = 0;
        // poor man's hash function- we only have four buckets.
        for(i=0;i<src.length;i++) {
          j += src.charCodeAt(i);
        }
        var toDomain = this._imageDomainSubstitutionList[j % this._imageDomainSubstitutionList.length];

        return src.replace(this._imageDomainSubstitutionFrom, toDomain);

      };

      // Call this after the last page is added
      DocumentManager.prototype.allPagesAdded = function () {
        if (this._allPagesAddedCalled) {
          throw "can only call allPagesAdded once";
        }

        this.viewportManager.enable();

        this._updatePageBoundingRects();

        this.setInitialViewManager(this.defaultViewMode);
        this.fireEvent('allPagesAdded');
      };

      // whether or not it is an embed doc.
      DocumentManager.prototype.setEmbeddedDoc = function(isEmbed) {
        this._isEmbed = (isEmbed === 'True');
      };

      // This sets the width of the current page.
      // It also sets the default width of any page that is added
      // When a new page is added, it will be set to the width
      //
      // NOTE: If we have a ZoomManager we probably won't call this directly
      DocumentManager.prototype.setPageWidths = function (width) {
        this._pageWidths = width;
        for(var p in this.pages) {
          if (this.pages.hasOwnProperty(p)) {
            this.pages[p].setWidth(this._pageWidths);
          }
        }
        this._updatePageBoundingRects();
      };

      /////////////////////////
      // Delegate for fontLoader
      ///////////////////////////
      //
      DocumentManager.prototype.addFont = function (id, shortstyle, family, fallback, weight, style) {
        this._fontLoader.addFont(id, shortstyle, family, fallback, weight, style);
      };

      /* deprecated */
      DocumentManager.prototype.setNumFonts = function (numFonts) {
        this._fontLoader.setNumFonts(numFonts);
      };


      DocumentManager.prototype.initStyles = function () {
        this._fontLoader.initStyles();
      };


      //
      // Delegated to View Manager
      //
      DocumentManager.prototype.gotoPage = function(pageId, options) {
        var pageIsFloat = !isInt(pageId);
        var frac = null;

        if(pageIsFloat) {
          frac = +(pageId % 1).toFixed(2);
          pageId = Math.floor(pageId);
        }

        // Abort if we try to go to an illegal page.
        if (pageId < this.minimumPageNumber() ||
            pageId > this.maximumPageNumber()) {
          return;
        }

        if(!options) {
          options = {};
        }

        if(pageIsFloat && options.frac == undefined)
          options.frac = frac;

        var direction = options.direction || 0;


        var page = this.pages[pageId];
        if (page === undefined && this._isPaidDocument) {
            pageId = this.getClosestPageNumber(pageId,direction);
            page = this.pages[pageId];
        }

        if (this.mobile) {
          if (this.pages[pageId]) {
            this.pages[pageId].setWidth(this._pageWidths);
          }
        }
        this._updateExpectedFirstPage(pageId);
        this._currentViewManager.gotoPage(this._expectedFirstPageNum, options);
      };

      DocumentManager.prototype.gotoPreviousPage = function() {
        var step = this._currentViewManager._pagingStep();
        if (this._currentViewManager.isTopPageInView()) {
          this.gotoPage(this._expectedFirstPageNum - step, {'direction' : -1});
        } else {
          this.gotoPage(this._expectedFirstPageNum, {'direction' : -1});
        }
      };

      DocumentManager.prototype.gotoNextPage = function() {
        var step = this._currentViewManager._pagingStep();
        this.gotoPage(this._expectedFirstPageNum + step, {'direction' : 1});
      };

      DocumentManager.prototype.enterFullscreen = function() {
        this._currentViewManager.enterFullscreen();
      };

      DocumentManager.prototype.exitFullscreen = function() {
        this._currentViewManager.exitFullscreen();
      };

      DocumentManager.prototype.isFullscreen = function() {
        return this._currentViewManager.isFullscreen;
      };


      // {entered|exited}Fullscreen exist on DocumentManager so they can be used from the UI. However,
      // they must be fired from the ViewManager.  So we have these private functions.

      DocumentManager.prototype._fireEnteredFullscreen = function() {
        this.fireEvent('enteredFullscreen');
      };

      DocumentManager.prototype._fireExitedFullscreen = function() {
        this.fireEvent('exitedFullscreen');
      };

      DocumentManager.prototype.viewMode = function() {
        if (this._currentViewManager) {
            return this._currentViewManager.name();
        }
        return null;
      };

      DocumentManager.prototype.zoom = function(multiplier) {
        this._currentViewManager.zoom(multiplier);
      };

      DocumentManager.prototype.resetZoom = function() {
        this._currentViewManager.resetZoom();
      };

      DocumentManager.prototype.setImageDomainSubstitution = function (fromDomain, toList) {
        this._imageDomainSubstitutionFrom = fromDomain;
        this._imageDomainSubstitutionList = toList;
      };

      DocumentManager.prototype.disableViewManagerResizeWidth = function() {
          ViewManager.prototype._checkBodyWidth = function() {};
      };

      DocumentManager.prototype.disable = function() {
          if ( !this.disabled ) {
              this.disabled = true;
              this.viewportManager.disable();
          }
      };

      DocumentManager.prototype.doDynamicBlurring = function (pageId) {
        var page, promo, doTextShadow;

        if (!this.removeInsteadOfBlurring()) {
          page = $('#' + pageId);
          // From http://evanhahn.com/how-to-disable-copy-paste-on-your-website/
          page.on('dragstart, selectstart, contextmenu', function (evt) {
            evt.preventDefault();
          });
          page.find('*').andSelf().attr('unselectable', 'on');

          doTextShadow = Modernizr && Modernizr.textshadow &&
            $.browser &&
            // Blurring seems to slow down scrolling in browsers that aren't Chrome/Firefox.
            (($.browser.webkit && !$.browser.safari) || $.browser.mozilla || $.browser.opera) &&
            // "Firefox 3.0 false-positives this test, but there is no known fix to that."
            // http://modernizr.com/docs/#s2
            !($.browser.mozilla === true && parseFloat($.browser.version) < 4 &&
            parseFloat($.browser.version) >= 3);
          if (!($.browser)) {
            console.log("Hi there, it seems as though you've upgraded jQuery and browser detection is no longer working in 4gen.js")
          }

          $(document).ready(function () {
            // Wait until the document is ready to run this code
            // so that the blur promo will be there for us to grab.
            promo = $($('#page_blur_promo_template').html())
              .removeAttr("id")
              .appendTo('#' + pageId).css('zIndex', 8).show();

            promo.find('.gap').html('Page ' + pageId.split('_').pop() +
              ' is not shown in this preview.');
            if (!doTextShadow) {
              // In addition to not supporting text-shadow, some IEs may have
              // trouble with text transparency, which is also critical for our blur:
              // http://stackoverflow.com/questions/2790181/color-transparent-not-working
              // http://quirksmode.org/css/text/#t12
              // Anyway, a semi-opaque overlay is our fallback for browsers that
              // don't support text-shadow.
              promo.find('.page-blur-promo-overlay').height('100%').width('100%').css('zIndex', 7).show();
            }
          });

          if (doTextShadow) {
            page.find('.text_layer').css({
              'color': 'transparent',
              'text-shadow': '0px 0px 70px black'
            });

            page.find(".text_layer [style]").css({
              "color": "transparent"
            });

            page.find(".image_layer").imagesLoaded(function() {
              page.find(".image_layer img").each(function() {
                if (this.height > 250 && this.width > 250) {
                  $(this).css({'opacity': 0.04});
                }
              });
            });
          }
        }
      };

      DocumentManager.setJQuery = function(jQuery) {
        $ = jQuery;
      };

      DocumentManager.ScrollViewManager = ScrollViewManager;
      DocumentManager.SlideViewManager = SlideViewManager;
      DocumentManager.BookViewManager = BookViewManager;

      return DocumentManager;
    })();

  window.DocumentManager = DocumentManager;

  /* vim: set ts=2 sw=2 expandtab */
};

/* only initialize 4gen once */
if(window.DocumentManager === undefined) {
    init_4gen();
}
;


/* ----------------------------------------------------------------------
   - public/javascripts/shared/i18n.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
// Instantiate the object
var I18n = I18n || {};

// Set default locale to english
I18n.defaultLocale = I18n.defaultLocale || "en_US";

// Set default handling of translation fallbacks to false
I18n.fallbacks = true;

// Set default separator
I18n.defaultSeparator = ".";

// Set current locale to null
I18n.locale = I18n.locale || null;

// Set the placeholder format. Accepts `{{placeholder}}` and `%{placeholder}`.
I18n.PLACEHOLDER = /(?:\{\{|%\{)(.*?)(?:\}\}?)/gm;

I18n.isValidNode = function(obj, node, undefined) {
    return obj[node] !== null && obj[node] !== undefined;
}

I18n.lookup = function(scope, options) {
  var options = options || {}
    , lookupInitialScope = scope
    , translations = this.prepareOptions(I18n.translations)
    , messages = translations[options.locale || I18n.currentLocale()]
    , options = this.prepareOptions(options)
    , currentScope
  ;
  if (!messages && options.redo)
  {
    return;
  }
  if (!messages){
    options.locale = I18n.defaultLocale
    options.redo = true
    return I18n.lookup(scope, options)
  }

  if (typeof(scope) == "object") {
    scope = scope.join(this.defaultSeparator);
  }

  if (options.scope) {
    scope = options.scope.toString() + this.defaultSeparator + scope;
  }

  scope = scope.split(this.defaultSeparator);

  while (scope.length > 0) {
    currentScope = scope.shift();
    messages = messages[currentScope];

    if (!messages) {
      if (I18n.fallbacks && !options.fallback) {
        messages = I18n.lookup(lookupInitialScope, this.prepareOptions({ locale: I18n.defaultLocale, fallback: true }, options));
      }
      break;
    }
  }

  if (!messages && this.isValidNode(options, "defaultValue")) {
    messages = options.defaultValue;
  }

  return messages;
};

// Merge serveral hash options, checking if value is set before
// overwriting any value. The precedence is from left to right.
//
//   I18n.prepareOptions({name: "John Doe"}, {name: "Mary Doe", role: "user"});
//   #=> {name: "John Doe", role: "user"}
//
I18n.prepareOptions = function() {
  var options = {}
    , opts
    , count = arguments.length
  ;

  for (var i = 0; i < count; i++) {
    opts = arguments[i];

    if (!opts) {
      continue;
    }

    for (var key in opts) {
      if (!this.isValidNode(options, key)) {
        options[key] = opts[key];
      }
    }
  }

  return options;
};

I18n.interpolate = function(message, options) {
  options = this.prepareOptions(options);
  var matches = message.match(this.PLACEHOLDER)
    , placeholder
    , value
    , name
  ;

  if (!matches) {
    return message;
  }

  for (var i = 0; placeholder = matches[i]; i++) {
    name = placeholder.replace(this.PLACEHOLDER, "$1");

    value = options[name];

    if (!this.isValidNode(options, name)) {
      value = "[missing " + placeholder + " value]";
    }

    regex = new RegExp(placeholder.replace(/\{/gm, "\\{").replace(/\}/gm, "\\}"));
    message = message.replace(regex, value);
  }

  return message;
};

I18n.translate = function(scope, options) {
  options = this.prepareOptions(options);
  var translation = this.lookup(scope, options);

  try {
    if (typeof(translation) == "object") {
      if (typeof(options.count) == "number") {
        return this.pluralize(options.count, scope, options);
      } else {
        return translation;
      }
    } else {
      return this.interpolate(translation, options);
    }
  } catch(err) {
    return this.missingTranslation(scope);
  }
};

I18n.localize = function(scope, value) {
  switch (scope) {
    case "currency":
      return this.toCurrency(value);
    case "number":
      scope = this.lookup("number.format");
      return this.toNumber(value, scope);
    case "percentage":
      return this.toPercentage(value);
    default:
      if (scope.match(/^(date|time)/)) {
        return this.toTime(scope, value);
      } else {
        return value.toString();
      }
  }
};

I18n.parseDate = function(date) {
  var matches, convertedDate;

  // we have a date, so just return it.
  if (typeof(date) == "object") {
    return date;
  };

  // it matches the following formats:
  //   yyyy-mm-dd
  //   yyyy-mm-dd[ T]hh:mm::ss
  //   yyyy-mm-dd[ T]hh:mm::ss
  //   yyyy-mm-dd[ T]hh:mm::ssZ
  //   yyyy-mm-dd[ T]hh:mm::ss+0000
  //
  matches = date.toString().match(/(\d{4})-(\d{2})-(\d{2})(?:[ T](\d{2}):(\d{2}):(\d{2}))?(Z|\+0000)?/);

  if (matches) {
    for (var i = 1; i <= 6; i++) {
      matches[i] = parseInt(matches[i], 10) || 0;
    }

    // month starts on 0
    matches[2] -= 1;

    if (matches[7]) {
      convertedDate = new Date(Date.UTC(matches[1], matches[2], matches[3], matches[4], matches[5], matches[6]));
    } else {
      convertedDate = new Date(matches[1], matches[2], matches[3], matches[4], matches[5], matches[6]);
    }
  } else if (typeof(date) == "number") {
    // UNIX timestamp
    convertedDate = new Date();
    convertedDate.setTime(date);
  } else if (date.match(/\d+ \d+:\d+:\d+ [+-]\d+ \d+/)) {
    // a valid javascript format with timezone info
    convertedDate = new Date();
    convertedDate.setTime(Date.parse(date))
  } else {
    // an arbitrary javascript string
    convertedDate = new Date();
    convertedDate.setTime(Date.parse(date));
  }

  return convertedDate;
};

I18n.toTime = function(scope, d) {
  var date = this.parseDate(d)
    , format = this.lookup(scope)
  ;

  if (date.toString().match(/invalid/i)) {
    return date.toString();
  }

  if (!format) {
    return date.toString();
  }

  return this.strftime(date, format);
};

I18n.strftime = function(date, format) {
  var options = this.lookup("date");

  if (!options) {
    return date.toString();
  }

  options.meridian = options.meridian || ["AM", "PM"];

  var weekDay = date.getDay()
    , day = date.getDate()
    , year = date.getFullYear()
    , month = date.getMonth() + 1
    , hour = date.getHours()
    , hour12 = hour
    , meridian = hour > 11 ? 1 : 0
    , secs = date.getSeconds()
    , mins = date.getMinutes()
    , offset = date.getTimezoneOffset()
    , absOffsetHours = Math.floor(Math.abs(offset / 60))
    , absOffsetMinutes = Math.abs(offset) - (absOffsetHours * 60)
    , timezoneoffset = (offset > 0 ? "-" : "+") + (absOffsetHours.toString().length < 2 ? "0" + absOffsetHours : absOffsetHours) + (absOffsetMinutes.toString().length < 2 ? "0" + absOffsetMinutes : absOffsetMinutes)
  ;

  if (hour12 > 12) {
    hour12 = hour12 - 12;
  } else if (hour12 === 0) {
    hour12 = 12;
  }

  var padding = function(n) {
    var s = "0" + n.toString();
    return s.substr(s.length - 2);
  };

  var f = format;
  f = f.replace("%a", options.abbr_day_names[weekDay]);
  f = f.replace("%A", options.day_names[weekDay]);
  f = f.replace("%b", options.abbr_month_names[month]);
  f = f.replace("%B", options.month_names[month]);
  f = f.replace("%d", padding(day));
  f = f.replace("%e", day);
  f = f.replace("%-d", day);
  f = f.replace("%H", padding(hour));
  f = f.replace("%-H", hour);
  f = f.replace("%I", padding(hour12));
  f = f.replace("%-I", hour12);
  f = f.replace("%m", padding(month));
  f = f.replace("%-m", month);
  f = f.replace("%M", padding(mins));
  f = f.replace("%-M", mins);
  f = f.replace("%p", options.meridian[meridian]);
  f = f.replace("%S", padding(secs));
  f = f.replace("%-S", secs);
  f = f.replace("%w", weekDay);
  f = f.replace("%y", padding(year));
  f = f.replace("%-y", padding(year).replace(/^0+/, ""));
  f = f.replace("%Y", year);
  f = f.replace("%z", timezoneoffset);

  return f;
};

I18n.toNumber = function(number, options) {
  options = this.prepareOptions(
    options,
    this.lookup("number.format"),
    {precision: 3, separator: ".", delimiter: ",", strip_insignificant_zeros: false}
  );

  var negative = number < 0
    , string = Math.abs(number).toFixed(options.precision).toString()
    , parts = string.split(".")
    , precision
    , buffer = []
    , formattedNumber
  ;

  number = parts[0];
  precision = parts[1];

  while (number.length > 0) {
    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));
    number = number.substr(0, number.length -3);
  }

  formattedNumber = buffer.join(options.delimiter);

  if (options.precision > 0) {
    formattedNumber += options.separator + parts[1];
  }

  if (negative) {
    formattedNumber = "-" + formattedNumber;
  }

  if (options.strip_insignificant_zeros) {
    var regex = {
        separator: new RegExp(options.separator.replace(/\./, "\\.") + "$")
      , zeros: /0+$/
    };

    formattedNumber = formattedNumber
      .replace(regex.zeros, "")
      .replace(regex.separator, "")
    ;
  }

  return formattedNumber;
};

I18n.toCurrency = function(number, options) {
  options = this.prepareOptions(
    options,
    this.lookup("number.currency.format"),
    this.lookup("number.format"),
    {unit: "$", precision: 2, format: "%u%n", delimiter: ",", separator: "."}
  );

  number = this.toNumber(number, options);
  number = options.format
    .replace("%u", options.unit)
    .replace("%n", number)
  ;

  return number;
};

I18n.toHumanSize = function(number, options) {
  var kb = 1024
    , size = number
    , iterations = 0
    , unit
    , precision
  ;

  while (size >= kb && iterations < 4) {
    size = size / kb;
    iterations += 1;
  }

  if (iterations === 0) {
    unit = this.t("number.human.storage_units.units.byte", {count: size});
    precision = 0;
  } else {
    unit = this.t("number.human.storage_units.units." + [null, "kb", "mb", "gb", "tb"][iterations]);
    precision = (size - Math.floor(size) === 0) ? 0 : 1;
  }

  options = this.prepareOptions(
    options,
    {precision: precision, format: "%n%u", delimiter: ""}
  );

  number = this.toNumber(size, options);
  number = options.format
    .replace("%u", unit)
    .replace("%n", number)
  ;

  return number;
};

I18n.toPercentage = function(number, options) {
  options = this.prepareOptions(
    options,
    this.lookup("number.percentage.format"),
    this.lookup("number.format"),
    {precision: 3, separator: ".", delimiter: ""}
  );

  number = this.toNumber(number, options);
  return number + "%";
};

I18n.pluralize = function(count, scope, options) {
  var translation;

  try {
    translation = this.lookup(scope, options);
  } catch (error) {}

  if (!translation) {
    return this.missingTranslation(scope);
  }

  var message;
  options = this.prepareOptions(options);
  options.count = count.toString();

  switch(Math.abs(count)) {
    case 0:
      message = this.isValidNode(translation, "zero") ? translation.zero :
                this.isValidNode(translation, "none") ? translation.none :
                this.isValidNode(translation, "other") ? translation.other :
                this.missingTranslation(scope, "zero");
      break;
    case 1:
      message = this.isValidNode(translation, "one") ? translation.one : this.missingTranslation(scope, "one");
      break;
    default:
      message = this.isValidNode(translation, "other") ? translation.other : this.missingTranslation(scope, "other");
  }

  return this.interpolate(message, options);
};

I18n.missingTranslation = function() {
  var message = '[missing "' + this.currentLocale()
    , count = arguments.length
  ;

  for (var i = 0; i < count; i++) {
    message += "." + arguments[i];
  }

  message += '" translation]';

  return message;
};

I18n.currentLocale = function() {
  return (I18n.locale || I18n.defaultLocale);
};

// shortcuts
I18n.t = I18n.translate;
I18n.l = I18n.localize;
I18n.p = I18n.pluralize;


/* ----------------------------------------------------------------------
   - public/javascripts/shared/translations.js (last modified: 2016-07-14 16:14:56 +0000)
   ---------------------------------------------------------------------- */
var I18n = I18n || {};
I18n.translations = {"en_US":{"js":{"save_for_later":"Save for later","saved_for_later":"Saved for later","save":"Save","saved":"Saved","remove":"Remove","delete":"Delete","saved_documents":"Saved Documents","search_is_disabled":"Search is disabled...","search_books_presentations":"Search books, presentations, business, academics...","search_within_document":"Search within document","hi_there_were_logging_you_in":"Hi there! We're logging you in now.","this_document_could_not_be_deleted":"This document could not be deleted at this time.  Please contact support@scribd.com.","enter_a_name_for_your_new_collection":"Enter a name for your new collection...","public_locked_collection":"(Only you can add to this collection, but others can view it)","public_moderated_collection":"(Others can add to this collection, but you approve or reject additions)","private_collection":"(Only you can add to this collection, and only you will be able to view it)","not_created_any_collections":"You have not created any %{private_text} collections yet.","search_this_profile":"Search this profile...","search_for_your_course":"Search for your course...","search_my_content":"Search my content...","share_what_youre_reading":"Share what you're reading...","readcast_complete":"Readcast Complete!","are_you_sure_you_want_to_delete":"Are you sure you want to delete this item?","add_a_reply":"Add a reply...","download":"Download","email_addresses_or_scribd_usernames":"email addresses or Scribd usernames","email_addresses_of_recipients":"email addresses of recipients","successfully_sent_this_document":"Successfully sent this document!","no_search_result_is_found":"No search result is found","result":"Result","of":"of","search_history":"Search history","are_you_sure_you_want_to_delete_":"Are you sure you want to delete these documents?  This CANNOT be undone!","show_bulk_editor":"Show Bulk Editor","hide_bulk_editor":"Show Bulk Editor","search_people":"Search People","next":"Next","previous":"Previous","edit":"Edit","set_as":"Set As","category":"Category","published":"Published","add_to_collections":"Add to Collections","title":"Title","description":"Description","private":"Private","public":"Public","cancel_changes":"Cancel changes","save_changes":"Save changes","advanced_edit":"Advanced Edit","select_a_category":"Select a Category...","subcategory":"Subcategory","chrome":{"search_placeholder":"Search books, presentations, business, academics"},"login":{"join_today":"Join Today","archive_unlimited_access":"Unlimited access to this and millions of other documents from users from around the world.","is_invalid":"Sorry, %{name} is invalid","is_available":"%{name} is availabile!","is_unavailable":"Sorry, %{name} is taken already","reset_email_sent":"Thanks! An email will be sent to %{email} with instructions to reset your password.","invalid_email":"There is no account registered to mail '%{email}'. Enter the email address that you used to register your account in the box below. We will send you an email with a link to reset your password."},"newhome":{"cells":{"published":"Published","followers":"Followers","following":"Following","reads":"Reads","documents":"Documents"}},"newdoc":{"you_liked_this":"You liked this","you_and_one_other_liked_this":"You and 1 other person liked this","you_and_x_others_liked_this":"You and %{count} other people liked this","result_not_available_in_this_preview":"Result not available in this preview"},"help_me":"I am filled with bees!"},"helpers":{"trial":{"start_your_free_trial":"Start your free trial","start_your_free_two_months":"Start your free two months","start_your_free_month":"Start your free month","start_your_free_14_days":"Start your free 14 days","start_your_free_week":"Start your free week","two_months":"two months","one_month":"one month","two_weeks":"two weeks","one_week":"one week","trial_days_day":"%{trial_days} day","trial_days_days":"%{trial_days} days","start_your_free_year":"Start your free year","one_year":"one year"}}},"ar_AR":{"js":{"search_history":"\u0625\u0628\u062d\u062b \u0641\u064a \u0627\u0644\u062a\u0627\u0631\u064a\u062e \u0627\u0644\u0645\u0627\u0636\u064a","successfully_sent_this_document":"\u062a\u0645 \u0625\u0631\u0633\u0627\u0644 \u0647\u0630\u0627 \u0627\u0644\u0645\u0644\u0641 \u0628\u0646\u062c\u0627\u062d!","search_books_presentations":"\u0625\u0628\u062d\u062b \u0641\u064a \u0627\u0644\u0643\u062a\u0628\u060c \u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0639\u0631\u0636\u060c \u0645\u0644\u0641\u0627\u062a\u00a0\u062a\u062c\u0627\u0631\u0629\u060c \u0645\u0644\u0641\u0627\u062a \u0623\u0643\u0627\u062f\u064a\u0645\u064a\u0629 \u060c \u0625\u0644\u062e.......","public_locked_collection":"(\u0623\u0646\u062a \u0641\u0642\u0637 \u0645\u0646 \u064a\u0645\u0643\u0646\u0647 \u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0644\u0647\u0630\u0647 \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0629\u060c\u00a0\u0644\u0643\u0646 \u064a\u0645\u0643\u0646 \u0644\u0644\u0622\u062e\u0631\u064a\u0646\u00a0\u0645\u0634\u0627\u0647\u062f\u062a\u0647\u0627)","add_a_reply":"\u0623\u0636\u0641 \u0631\u062f\u0627\u064b...","hide_bulk_editor":"\u0625\u0638\u0647\u0631 \u0645\u062d\u0631\u0631 \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0629","readcast_complete":"\u062a\u0645 \u0627\u0633\u062a\u0643\u0645\u0627\u0644 Readcast!","search_this_profile":"\u0625\u0628\u062d\u062b \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u062d\u0633\u0627\u0628...","no_search_result_is_found":"\u0644\u0645 \u064a\u062a\u0645 \u0627\u0644\u0639\u062b\u0648\u0631 \u0639\u0644\u0649 \u0646\u062a\u0627\u0626\u062c \u0644\u0647\u0630\u0627 \u0627\u0644\u0628\u062d\u062b","are_you_sure_you_want_to_delete_":"\u0647\u0644 \u0623\u0646\u062a \u0645\u062a\u0623\u0643\u062f \u0623\u0646\u0643 \u062a\u0631\u064a\u062f \u062d\u0630\u0641 \u0647\u0630\u0647 \u0627\u0644\u0645\u0644\u0641\u0627\u062a\u061f \u0647\u0630\u0627 \u0627\u0644\u0623\u0645\u0631 \u0644\u0627 \u064a\u0645\u0643\u0646 \u0627\u0644\u0631\u062c\u0648\u0639 \u0641\u064a\u0647!","of":"\u0645\u0646","hi_there_were_logging_you_in":"\u0645\u0631\u062d\u0628\u0627\u064b.\u00a0 \u062c\u0627\u0631\u064a \u0625\u062f\u062e\u0627\u0644\u0643 \u0627\u0644\u0622\u0646...","are_you_sure_you_want_to_delete":"\u0623\u0646\u062a \u0641\u0642\u0637 \u0645\u0646 \u064a\u0645\u0643\u0646\u0647 \u0627\u0644\u0625\u0636\u0627\u0641\u0629","share_what_youre_reading":"\u0634\u0627\u0631\u0643 \u0645\u0627 \u062a\u0642\u0631\u0623\u0647...","enter_a_name_for_your_new_collection":"\u0623\u062f\u062e\u0644 \u0625\u0633\u0645\u0627\u064b \u0644\u0645\u062c\u0645\u0648\u0639\u062a\u0643 \u0627\u0644\u062c\u062f\u064a\u062f\u0629...","search_is_disabled":"\u0625\u0645\u0643\u0627\u0646\u064a\u0629 \u0627\u0644\u0628\u062d\u062b \u063a\u064a\u0631 \u0641\u0639\u0651\u0627\u0644\u0629...","show_bulk_editor":"\u0625\u0638\u0647\u0627\u0631 \u0645\u062d\u0631\u0631 \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0629","email_addresses_of_recipients":"\u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0628\u0631\u064a\u062f \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a \u0644\u0644\u0645\u062a\u0644\u0642\u064a\u0646","search_my_content":"\u0625\u0628\u062d\u062b \u0641\u064a \u0645\u0644\u0641\u0627\u062a\u064a....","email_addresses_or_scribd_usernames":"\u0639\u0646\u0627\u0648\u064a\u0646 \u0627\u0644\u0628\u0631\u064a\u062f \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a \u0623\u0648 \u0623\u0633\u0645\u0627\u0621 \u0645\u0633\u062a\u062e\u062f\u0645\u064a Scribd","search_within_document":"\u0625\u0628\u062d\u062b \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0645\u0644\u0641...","download":"\u062a\u062d\u0645\u064a\u0644","public_moderated_collection":"(\u064a\u0645\u0643\u0646 \u0644\u0644\u0622\u062e\u0631\u064a\u0646 \u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0644\u0647\u0630\u0647 \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0629\u060c \u0644\u0643\u0646\u0643 \u0623\u0646\u062a \u0645\u0646 \u064a\u0631\u0641\u0636 \u0623\u0648 \u064a\u0648\u0627\u0641\u0642 \u0639\u0644\u0649 \u0645\u0627 \u062a\u0645 \u0625\u0636\u0627\u0641\u062a\u0647)","this_document_could_not_be_deleted":"\u0639\u0641\u0648\u0627\u064b\u060c \u0644\u0627 \u064a\u0645\u0643\u0646 \u062d\u0630\u0641 \u0647\u0630\u0627 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0622\u0646.\u00a0 \u0627\u0644\u0631\u062c\u0627\u0621 \u0645\u062e\u0627\u0637\u0628\u0629 support@scribd.com","result":"\u0646\u062a\u064a\u062c\u0629","private_collection":"(\u0623\u0646\u062a \u0641\u0642\u0637 \u0645\u0646 \u064a\u0645\u0643\u0646\u0647 \u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0644\u0647\u0630\u0647 \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0629 \u0623\u0648 \u0645\u0634\u0627\u0647\u062f\u062a\u0647\u0627 \u0623\u0648 \u0645\u0639\u0627\u064a\u0646\u062a\u0647\u0627)","search_people":"\u0627\u0644\u0628\u062d\u062b \u0639\u0646 \u0623\u0634\u062e\u0627\u0635","help_me":"\u0644\u062f\u064a\u0651\u064e \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0627\u062c\u062a\u0645\u0627\u0639\u0627\u062a!"}},"de_DE":{"js":{"search_history":"Suchverlauf","successfully_sent_this_document":"Dokument erfolgreich gesendet!","search_books_presentations":"Suche nach B\u00fcchern, Pr\u00e4sentationen, Wirtschaft, Wissenschaft...","public_locked_collection":"(Nur Du kannst dieser Sammlung Elemente hinzuf\u00fcgen, aber andere k\u00f6nnen diese Sammlung ansehen)","add_a_reply":"Eine Antwort hinzuf\u00fcgen...","hide_bulk_editor":"Bulk-Editor anzeigen","readcast_complete":"Readcast abgeschlossen!","search_this_profile":"Dieses Profil durchsuchen...","no_search_result_is_found":"Kein Suchergebnis gefunden","are_you_sure_you_want_to_delete_":"Bist Du sicher, dass Du das Dokument l\u00f6schen m\u00f6chtest? Dieser Vorgang kann NICHT r\u00fcckg\u00e4ngig gemacht werden!","of":"von","hi_there_were_logging_you_in":"Hallo! Wir melden Dich jetzt an.","are_you_sure_you_want_to_delete":"Bist Du sicher, dass Du dieses Element l\u00f6schen m\u00f6chtest?","share_what_youre_reading":"Aktuellen Beitrag teilen...","enter_a_name_for_your_new_collection":"Gib einen Namen f\u00fcr Deine neue Sammlung ein...","search_is_disabled":"Suche ist deaktiviert ...","show_bulk_editor":"Bulk-Editor anzeigen","email_addresses_of_recipients":"E-Mail-Adressen der Empf\u00e4nger","search_my_content":"Meine Inhalte durchsuchen...","email_addresses_or_scribd_usernames":"E-Mail-Adressen oder Scribd-Benutzernamen","search_within_document":"Suche innerhalb des Dokuments","download":"Herunterladen","public_moderated_collection":"(Andere k\u00f6nnen dieser Sammlung Elemente hinzuf\u00fcgen, aber Elemente m\u00fcssen von Dir genehmigt oder abgelehnt werden)","this_document_could_not_be_deleted":"Das Dokument konnte nicht gel\u00f6scht werden. Bitte kontaktiere: support@scribd.com.","result":"Ergebnis","private_collection":"(Nur Du kannst dieser Sammlung Elemente hinzuf\u00fcgen, und nur Du kannst diese Sammlung ansehen)","search_people":"Leute suchen","help_me":"Ich bin mit Bienen gef\u00fcllt!"}},"es_LA":{"js":{"search_history":"Buscar historial","successfully_sent_this_document":"\u00a1Documento enviado correctamente!","search_books_presentations":"Buscar libros, presentaciones, negocios, publicaciones\u2026","public_locked_collection":"(Solo usted puede agregar a esta colecci\u00f3n, y otros podr\u00e1n verla)","add_a_reply":"Responder...","hide_bulk_editor":"Mostrar editor por lotes","readcast_complete":"\u00a1Readcast completo!","search_this_profile":"Buscar este perfil...","no_search_result_is_found":"No se encontraron resultados","are_you_sure_you_want_to_delete_":"\u00bfEst\u00e1 seguro de que desea eliminar estos documentos? Esta acci\u00f3n no se puede deshacer.","of":"de","hi_there_were_logging_you_in":"\u00a1Bienvenido! Su sesi\u00f3n se est\u00e1 iniciando...","are_you_sure_you_want_to_delete":"\u00bfEst\u00e1 seguro de que desea eliminar este objeto?","share_what_youre_reading":"Compartir lo que est\u00e1 leyendo...","enter_a_name_for_your_new_collection":"Ingrese un nombre para su nueva colecci\u00f3n","search_is_disabled":"La b\u00fasqueda est\u00e1 deshabilitada\u2026","show_bulk_editor":"Mostrar editor por lotes","email_addresses_of_recipients":"direcci\u00f3n de correo electr\u00f3nico de los destinatarios","search_my_content":"Buscar en mi contenido\u2026","email_addresses_or_scribd_usernames":"direcciones de correo electr\u00f3nico o nombres de usuario de Scribd","search_within_document":"Buscar dentro de documento","download":"Descarga","public_moderated_collection":"(Otros pueden agregar a esta colecci\u00f3n, pero usted tendr\u00e1 que aprobar o rechazar los elementos agregados)","this_document_could_not_be_deleted":"Este documento no puede ser borrado. P\u00f3ngase en contacto con support@scribd.com.","result":"Resultado","private_collection":"(Solo usted puede agregar a esta colecci\u00f3n, y nadie m\u00e1s podr\u00e1 verla)","search_people":"Buscar personas","help_me":"\u00a1Las jirafas nos atacan, repito!","login":{"join_today":"\u00danase ahora","archive_unlimited_access":"Acceso ilimitado a este y millones de documentos m\u00e1s de otros usuarios al rededor del mundo"}},"helpers":{"trial":{"start_your_free_month":"Comience su mes de prueba gratis","start_your_free_week":"Comience su semana gratis","start_your_free_14_days":"Comience sus 2 semanas gratis","start_your_free_trial":"Empiece su prueba gratis.","start_your_free_two_months":"Empiece sus dos meses gratis","two_months":"dos meses","one_month":"un mes","two_weeks":"dos semanas","one_week":"una semana","trial_days_day":"%{trial_days} d\u00eda","trial_days_days":"%{trial_days} d\u00edas","start_your_free_year":"Empiece su a\u00f1o gratis","one_year":"un a\u00f1o"}}},"fr_FR":{"js":{"search_history":"Historique de recherche","successfully_sent_this_document":"Document envoy\u00e9 avec succ\u00e8s !","search_books_presentations":"Rechercher des livres, des expos\u00e9s, des documents commerciaux, scolaires...","public_locked_collection":"(Vous seul pouvez effectuer un ajout \u00e0 cette collection, mais d'autres utilisateurs pourront le voir)","add_a_reply":"Ajouter une r\u00e9ponse...","hide_bulk_editor":"Afficher l'\u00e9diteur de masse","readcast_complete":"Readcast termin\u00e9 !","search_this_profile":"Rechercher ce profil...","no_search_result_is_found":"Aucun r\u00e9sultat de recherche n'a \u00e9t\u00e9 trouv\u00e9","are_you_sure_you_want_to_delete_":"\u00cates-vous s\u00fbr de vouloir supprimer ces documents ? Cette action ne peut \u00eatre annul\u00e9e !","of":"de","hi_there_were_logging_you_in":"Bonjour ! La connexion est actuellement en cours.","are_you_sure_you_want_to_delete":"\u00cates-vous s\u00fbr de vouloir supprimer cet \u00e9l\u00e9ment ?","share_what_youre_reading":"Partagez ce que vous lisez...","enter_a_name_for_your_new_collection":"Saisissez un nom pour votre nouvelle collection ...","search_is_disabled":"La recherche est d\u00e9sactiv\u00e9e...","show_bulk_editor":"Afficher l'\u00e9diteur de masse","email_addresses_of_recipients":"adresses e-mail des destinataires","search_my_content":"Rechercher mon contenu...","email_addresses_or_scribd_usernames":"adresses e-mail ou noms d'utilisateur Scribd","search_within_document":"Rechercher dans le document","download":"T\u00e9l\u00e9charger","public_moderated_collection":"(D'autres utilisateurs peuvent effectuer un ajout \u00e0 cette collection, mais vous pourrez approuver ou rejeter les ajouts)","this_document_could_not_be_deleted":"Ce document ne peut \u00eatre supprim\u00e9 actuellement. Merci de contacter support@scribd.com.","result":"R\u00e9sultat","private_collection":"(Vous seul pouvez effectuer un ajout \u00e0 cette collection, et vous seul serez en mesure de le voir)","search_people":"Recherche Personnes","help_me":" Je suis plein d'abeilles\u00a0!"}},"he_IL":{"js":{"search_history":"\u05d4\u05d9\u05e1\u05d8\u05d5\u05e8\u05d9\u05d9\u05ea \u05d7\u05d9\u05e4\u05d5\u05e9","successfully_sent_this_document":"\u05de\u05e1\u05de\u05da \u05d6\u05d4 \u05e0\u05e9\u05dc\u05d7 \u05d1\u05d4\u05e6\u05dc\u05d7\u05d4!","search_books_presentations":"\u05d7\u05e4\u05e9 \u05e1\u05e4\u05e8\u05d9\u05dd, \u05de\u05e6\u05d2\u05d5\u05ea, \u05e2\u05e1\u05e7\u05d9\u05dd, \u05de\u05d7\u05e7\u05e8\u05d9\u05dd \u05d0\u05e7\u05d3\u05de\u05d9\u05d9\u05dd...","public_locked_collection":"(\u05e8\u05e7 \u05d0\u05ea\u05d4 \u05d9\u05db\u05d5\u05dc \u05dc\u05d4\u05d5\u05e1\u05d9\u05e3 \u05dc\u05d0\u05d5\u05e1\u05e3 \u05d4\u05d6\u05d4, \u05d0\u05d1\u05dc \u05d0\u05d7\u05e8\u05d9\u05dd \u05d9\u05db\u05d5\u05dc\u05d9\u05dd \u05dc\u05e8\u05d0\u05d5\u05ea \u05d0\u05d5\u05ea\u05d5)","add_a_reply":"\u05d4\u05d5\u05e1\u05e3 \u05ea\u05e9\u05d5\u05d1\u05d4...","hide_bulk_editor":"\u05d4\u05e6\u05d2 \u05e2\u05d5\u05e8\u05da \u05d1\u05e6\u05d5\u05d1\u05e8","readcast_complete":"Readcast \u05d4\u05d5\u05e9\u05dc\u05dd!\n\n\n","search_this_profile":"\u05d7\u05e4\u05e9 \u05d1\u05e4\u05e8\u05d5\u05e4\u05d9\u05dc \u05d6\u05d4...","no_search_result_is_found":"\u05dc\u05d0 \u05e0\u05de\u05e6\u05d0\u05d5 \u05ea\u05d5\u05e6\u05d0\u05d5\u05ea \u05d7\u05d9\u05e4\u05d5\u05e9","are_you_sure_you_want_to_delete_":"\u05d1\u05d8\u05d5\u05d7 \u05e9\u05d0\u05ea\u05d4 \u05e8\u05d5\u05e6\u05d4 \u05dc\u05de\u05d7\u05d5\u05e7 \u05d0\u05ea \u05d4\u05de\u05e1\u05de\u05db\u05d9\u05dd \u05d4\u05d0\u05dc\u05d4? \u05dc\u05d0 \u05e0\u05d9\u05ea\u05df \u05dc\u05d1\u05d8\u05dc \u05e4\u05e2\u05d5\u05dc\u05d4 \u05d6\u05d5!","of":"\u05de\u05ea\u05d5\u05da","hi_there_were_logging_you_in":"\u05d4\u05d9! \u05d0\u05e0\u05d7\u05e0\u05d5 \u05de\u05db\u05e0\u05d9\u05e1\u05d9\u05dd \u05d0\u05d5\u05ea\u05da \u05e2\u05db\u05e9\u05d9\u05d5.","are_you_sure_you_want_to_delete":"\u05d1\u05d8\u05d5\u05d7 \u05e9\u05d0\u05ea\u05d4 \u05e8\u05d5\u05e6\u05d4 \u05dc\u05de\u05d7\u05d5\u05e7 \u05e4\u05e8\u05d9\u05d8 \u05d6\u05d4?","share_what_youre_reading":"\u05e9\u05ea\u05e3 \u05d0\u05ea \u05de\u05d4 \u05e9\u05d0\u05ea\u05d4 \u05e7\u05d5\u05e8\u05d0...","enter_a_name_for_your_new_collection":"\u05d4\u05d6\u05df \u05e9\u05dd \u05dc\u05d0\u05d5\u05e1\u05e3 \u05d4\u05d7\u05d3\u05e9 \u05e9\u05dc\u05da...","search_is_disabled":"\u05d7\u05d9\u05e4\u05d5\u05e9 \u05de\u05d5\u05e9\u05d1\u05ea ...","show_bulk_editor":"\u05d4\u05e6\u05d2 \u05e2\u05d5\u05e8\u05da \u05d1\u05e6\u05d5\u05d1\u05e8","email_addresses_of_recipients":"\u05db\u05ea\u05d5\u05d1\u05d5\u05ea \u05d3\u05d5\u05d0\"\u05dc \u05e9\u05dc \u05e0\u05de\u05e2\u05e0\u05d9\u05dd","search_my_content":"\u05d7\u05e4\u05e9 \u05d1\u05ea\u05d5\u05db\u05df \u05e9\u05dc\u05d9...","email_addresses_or_scribd_usernames":" \u05db\u05ea\u05d5\u05d1\u05d5\u05ea \u05d3\u05d5\u05d0\"\u05dc \u05e9\u05dc \u05e9\u05de\u05d5\u05ea \u05de\u05e9\u05ea\u05de\u05e9 \u05e9\u05dc Scribd\n","search_within_document":"\u05d7\u05e4\u05e9 \u05d1\u05ea\u05d5\u05da \u05de\u05e1\u05de\u05da","download":"\u05d4\u05d5\u05e8\u05d3\u05d4","public_moderated_collection":"(\u05d0\u05d7\u05e8\u05d9\u05dd \u05d9\u05db\u05d5\u05dc\u05d9\u05dd \u05dc\u05d4\u05d5\u05e1\u05d9\u05e3 \u05dc\u05d0\u05d5\u05e1\u05e3 \u05d4\u05d6\u05d4, \u05d0\u05d1\u05dc \u05d0\u05ea\u05d4 \u05de\u05d0\u05e9\u05e8 \u05d0\u05d5 \u05d3\u05d5\u05d7\u05d4 \u05ea\u05d5\u05e1\u05e4\u05d5\u05ea)","this_document_could_not_be_deleted":"\u05dc\u05d0 \u05e0\u05d9\u05ea\u05df \u05dc\u05de\u05d7\u05d5\u05e7 \u05d0\u05ea \u05d4\u05de\u05e1\u05de\u05da \u05d1\u05de\u05d5\u05e2\u05d3 \u05d6\u05d4. \u05e4\u05e0\u05d4 \u05d0\u05dc support@scribd.com.\n\n","result":"\u05ea\u05d5\u05e6\u05d0\u05d4","private_collection":"(\u05e8\u05e7 \u05d0\u05ea\u05d4 \u05d9\u05db\u05d5\u05dc \u05dc\u05d4\u05d5\u05e1\u05d9\u05e3 \u05dc\u05d0\u05d5\u05e1\u05e3 \u05d4\u05d6\u05d4, \u05d5\u05e8\u05e7 \u05d0\u05ea\u05d4 \u05ea\u05d5\u05db\u05dc \u05dc\u05e8\u05d0\u05d5\u05ea \u05d0\u05d5\u05ea\u05d5)","search_people":"\u05d7\u05d9\u05e4\u05d5\u05e9 \u05d0\u05e0\u05e9\u05d9\u05dd","help_me":"\u05d0\u05e0\u05d9 \u05de\u05dc\u05d0 \u05d1\u05d3\u05d1\u05d5\u05e8\u05d9\u05dd!"}},"id_ID":{"js":{"search_history":"Riwayat pencarian","successfully_sent_this_document":"Berhasil mengirim dokumen ini!","search_books_presentations":"Cari buku, presentasi, bisnis, akademik....","public_locked_collection":"(Hanya Anda yang dapat menambah ke koleksi ini, tetapi orang lain dapat melihatnya)","add_a_reply":"Tambahkan balasan ...","hide_bulk_editor":"Tampilkan Editor Massal","readcast_complete":"Readcast Selesai!","search_this_profile":"Cari profil ini...","no_search_result_is_found":"Tidak ada hasil pencarian ditemukan","are_you_sure_you_want_to_delete_":"Anda yakin ingin menghapus dokumen-dokumen ini? Ini TIDAK BISA dibatalkan!","of":"dari","hi_there_were_logging_you_in":"Hai! Kami sedang membantu Anda log masuk sekarang.","are_you_sure_you_want_to_delete":"Anda yakin ingin menghapus item ini?","share_what_youre_reading":"Bagikan apa yang sedang Anda baca...","enter_a_name_for_your_new_collection":"Masukkan nama untuk koleksi baru Anda ...","search_is_disabled":"Pencarian dinonaktifkan...","show_bulk_editor":"Tampilkan Editor Massal","email_addresses_of_recipients":"alamat email penerima","search_my_content":"Cari konten saya ...","email_addresses_or_scribd_usernames":"alamat email atau nama pengguna Scribd","search_within_document":"Cari dalam dokumen","download":"Unduh","public_moderated_collection":"(Orang lain dapat menambah ke koleksi ini, tetapi Anda yang akan menyetujui atau menolak tambahan)","this_document_could_not_be_deleted":"Dokumen ini tidak dapat dihapus pada saat ini. Harap menghubungi support@scribd.com","result":"Hasil","private_collection":"(Hanya Anda yang dapat menambah ke koleksi ini, dan hanya Anda yang dapat melihatnya)","search_people":"Cari Orang","help_me":"Saya memiliki banyak ide!"}},"ja_JP":{"js":{"search_history":"\u691c\u7d22\u5c65\u6b74","successfully_sent_this_document":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u9001\u4ed8\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002","search_books_presentations":"\u30d6\u30c3\u30af\u3001\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u4f01\u696d\u3001\u7814\u7a76\u6d3b\u52d5\u3092\u691c\u7d22...","public_locked_collection":"(\u3053\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3067\u304d\u308b\u306e\u306f\u3042\u306a\u305f\u3060\u3051\u3067\u3059\u304c\u3001\u4ed6\u306e\u4eba\u3082\u95b2\u89a7\u3067\u304d\u307e\u3059)","add_a_reply":"\u8fd4\u4fe1\u3092\u8ffd\u52a0...","hide_bulk_editor":"Bulk Editor \u3092\u8868\u793a\n\n\n\n\n","readcast_complete":"Readcast \u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002","search_this_profile":"\u3053\u306e\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u691c\u7d22...","no_search_result_is_found":"\u8a72\u5f53\u3059\u308b\u5185\u5bb9\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f","are_you_sure_you_want_to_delete_":"\u3053\u306e\u64cd\u4f5c\u306f\u53d6\u308a\u6d88\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u672c\u5f53\u306b\u3053\u308c\u3089\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6d88\u53bb\u3057\u3066\u3082\u3088\u308d\u3057\u3044\u3067\u3059\u304b? ","of":"\u4e2d","hi_there_were_logging_you_in":"\u3053\u3093\u306b\u3061\u306f!  \u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u307e\u3059\u3002","are_you_sure_you_want_to_delete":"\u3053\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u6d88\u53bb\u3057\u3066\u3082\u3088\u308d\u3057\u3044\u3067\u3059\u304b?","share_what_youre_reading":"\u73fe\u5728\u95b2\u89a7\u4e2d\u306e\u5185\u5bb9\u3092\u5171\u6709\u3059\u308b...","enter_a_name_for_your_new_collection":"\u65b0\u898f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u540d\u79f0\u3092\u5165\u529b\u3057\u307e\u3059...\n\n\n\n","search_is_disabled":"\u691c\u7d22\u304c\u7121\u52b9\u5316\u3055\u308c\u3066\u3044\u307e\u3059...","show_bulk_editor":"Bulk Editor \u3092\u8868\u793a\n\n\n\n\n","email_addresses_of_recipients":"\u53d7\u4fe1\u8005\u306e\u30e1\u30fc\u30eb \u30a2\u30c9\u30ec\u30b9","search_my_content":"\u81ea\u5206\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u691c\u7d22...","email_addresses_or_scribd_usernames":"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u307e\u305f\u306f Scribd \u30e6\u30fc\u30b6\u30fc\u540d","search_within_document":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u3092\u691c\u7d22\u3059\u308b","download":"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9","public_moderated_collection":"(\u4ed6\u306e\u4eba\u3082\u3053\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3067\u304d\u307e\u3059\u304c\u3001\u3042\u306a\u305f\u306f\u305d\u308c\u3092\u627f\u8a8d\u307e\u305f\u306f\u62d2\u5426\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059)","this_document_could_not_be_deleted":"\u73fe\u5728\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6d88\u53bb\u3067\u304d\u307e\u305b\u3093\u3002support@scribd.com \u307e\u3067\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n","result":"\u7d50\u679c","private_collection":"(\u3042\u306a\u305f\u3060\u3051\u304c\u3001\u3053\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3057\u305f\u308a\u95b2\u89a7\u3057\u305f\u308a\u3067\u304d\u307e\u3059)","search_people":"\u4eba\u3092\u691c\u7d22","help_me":"\u79c1\u306e\u982d\u306e\u4e2d\u306f\u30a2\u30a4\u30c7\u30a2\u3067\u3044\u3063\u3071\u3044\u3067\u3059\uff01"}},"pl_PL":{"js":{"search_history":"Historia wyszukiwania","successfully_sent_this_document":"Dokument zosta\u0142 wys\u0142any pomy\u015blnie!","search_books_presentations":"Wyszukiwanie ksi\u0105\u017cek, prezentacji, firm, naukowc\u00f3w...","public_locked_collection":"(Tylko Ty mo\u017cesz dodawa\u0107 do tej kolekcji, ale inni mog\u0105 j\u0105 przegl\u0105da\u0107)","add_a_reply":"Dodaj odpowied\u017a...","hide_bulk_editor":"Poka\u017c masowy edytor","readcast_complete":"Readcast zako\u0144czony!","search_this_profile":"Przeszukaj ten profil...","no_search_result_is_found":"Brak wynik\u00f3w wyszukiwania","are_you_sure_you_want_to_delete_":"Czy na pewno chcesz usun\u0105\u0107 te dokumenty? Tego NIE MO\u017bNA cofn\u0105\u0107!","of":"z","hi_there_were_logging_you_in":"Witaj! Trwa logowanie.","are_you_sure_you_want_to_delete":"Czy na pewno chcesz usun\u0105\u0107 ten obiekt?","share_what_youre_reading":"Podziel si\u0119 tym, co czytasz...","enter_a_name_for_your_new_collection":"Wprowad\u017a nazw\u0119 nowej kolekcji...","search_is_disabled":"Wyszukiwanie jest wy\u0142\u0105czone...","show_bulk_editor":"Poka\u017c masowy edytor","email_addresses_of_recipients":"adresy e-mail odbiorc\u00f3w","search_my_content":"Przeszukaj zawarto\u015b\u0107...","email_addresses_or_scribd_usernames":"adresy e-mail lub nazwy u\u017cytkownik\u00f3w Scribd","search_within_document":"Szukaj w dokumencie","download":"Pobierz","public_moderated_collection":"(Inni mog\u0105 dodawa\u0107 do tej kolekcji, ale Ty zatwierdzasz lub odrzucasz dodawane pozycje)","this_document_could_not_be_deleted":"Ten dokument nie mo\u017ce by\u0107 teraz usuni\u0119ty. Prosimy o kontakt na adres support@scribd.com.","result":"Wynik","private_collection":"(Tylko Ty mo\u017cesz dodawa\u0107 do tej kolekcji i tylko Ty mo\u017cesz j\u0105 przegl\u0105da\u0107)","search_people":"Szukaj znajomych","help_me":"I am filled with bees!"}},"pt_BR":{"js":{"search_history":"Historia de Buscas","successfully_sent_this_document":"Este documento foi enviado com sucesso!","search_books_presentations":"Pesquise por livros, apresenta\u00e7\u00f5es, neg\u00f3cios, acad\u00eamicos...","public_locked_collection":"(S\u00f3 voc\u00ea pode fazer adi\u00e7\u00f5es a esta cole\u00e7\u00e3o, mas outros usu\u00e1rios podem visualiz\u00e1-la)","add_a_reply":"Deixar uma resposta...","hide_bulk_editor":"Exibir editor de lote","readcast_complete":"Readcast conclu\u00eddo!","search_this_profile":"Pesquisar este perfil...","no_search_result_is_found":"N\u00e3o foram encontrados resultados para sua busca","are_you_sure_you_want_to_delete_":"Tem certeza que deseja excluir estes documentos?","of":"de","hi_there_were_logging_you_in":"Ol\u00e1! Seu acesso est\u00e1 sendo realizando.","are_you_sure_you_want_to_delete":"Tem certeza que deseja excluir este item?","share_what_youre_reading":"Compartilhar o que voc\u00ea est\u00e1 lendo...","enter_a_name_for_your_new_collection":"Insira um nome para sua nova cole\u00e7\u00e3o...","search_is_disabled":"A pesquisa est\u00e1 desativada...","show_bulk_editor":"Exibir editor de lote","email_addresses_of_recipients":"dire\u00e7\u00f5es de e-mail dos recipientes","search_my_content":"Pesquisar no meu conte\u00fado...","email_addresses_or_scribd_usernames":"endere\u00e7os de e-mail ou nomes de usu\u00e1rio no Scribd","search_within_document":"Buscar dentro do documento","download":"Download","public_moderated_collection":"(Outros usu\u00e1rios podem fazer adi\u00e7\u00f5es a esta cole\u00e7\u00e3o, mas voc\u00ea pode aprovar ou rejeit\u00e1-las)","this_document_could_not_be_deleted":"O documento n\u00e3o p\u00f4de ser enviado no momento. Entre em contato atrav\u00e9s do e-mail support@scribd.com.","result":"Resultado","private_collection":"(S\u00f3 voc\u00ea pode fazer adi\u00e7\u00f5es a esta cole\u00e7\u00e3o, e somente voc\u00ea poder\u00e1 visualiz\u00e1-la)","search_people":"Busque Pessoas","help_me":"Estou cheio de abelhas!"},"helpers":null},"ru_RU":{"js":{"search_history":"\u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u043e\u0438\u0441\u043a\u0430","successfully_sent_this_document":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d!","search_books_presentations":"\u0418\u0441\u043a\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0434\u0435\u043b\u043e\u0432\u0443\u044e \u0438 \u043d\u0430\u0443\u0447\u043d\u0443\u044e \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0443...","public_locked_collection":"(\u0442\u043e\u043b\u044c\u043a\u043e \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u044d\u0442\u0443 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e, \u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0433\u0443\u0442 \u0435\u0435 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c)","add_a_reply":"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 ...","hide_bulk_editor":"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u0439 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440","readcast_complete":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f Readcast \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430!","search_this_profile":"\u0418\u0441\u043a\u0430\u0442\u044c \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u0435 ...","no_search_result_is_found":"\u041f\u043e\u0438\u0441\u043a \u043d\u0435 \u0434\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","are_you_sure_you_want_to_delete_":"\u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b? \u042d\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u041d\u0415\u041b\u042c\u0417\u042f \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c!","of":"\u0438\u0437","hi_there_were_logging_you_in":"\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u043c! \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443.","are_you_sure_you_want_to_delete":"\u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442?","share_what_youre_reading":"\u041f\u043e\u0434\u0435\u043b\u0438\u0442\u0435\u0441\u044c \u0442\u0435\u043c, \u0447\u0442\u043e \u0412\u044b \u0447\u0438\u0442\u0430\u0435\u0442\u0435...","enter_a_name_for_your_new_collection":"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 ...\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 ...","search_is_disabled":"\u041f\u043e\u0438\u0441\u043a \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d...","show_bulk_editor":"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u0439 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440","email_addresses_of_recipients":"\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u0435\u0439","search_my_content":"\u0418\u0441\u043a\u0430\u0442\u044c \u0432 \u043c\u043e\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c...","email_addresses_or_scribd_usernames":"\u0430\u0434\u0440\u0435\u0441\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u0438\u043b\u0438 \u0438\u043c\u0435\u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 Scribd","search_within_document":"\u0418\u0441\u043a\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435","download":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c","public_moderated_collection":"(\u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u044d\u0442\u0443 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e, \u043d\u043e \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0434\u043e\u0431\u0440\u0438\u0442\u044c \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f)","this_document_could_not_be_deleted":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0435\u0439\u0447\u0430\u0441 \u0443\u0434\u0430\u043b\u0435\u043d. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: support@scribd.com.","result":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","private_collection":"(\u0442\u043e\u043b\u044c\u043a\u043e \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u044d\u0442\u0443 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0412\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0435\u0435)","search_people":"\u041f\u043e\u0438\u0441\u043a \u043b\u044e\u0434\u0435\u0439","help_me":"\u0423 \u043c\u0435\u043d\u044f \u0432 \u0433\u043e\u043b\u043e\u0432\u0435 \u043a\u0443\u0447\u0430 \u043c\u044b\u0441\u043b\u0435\u0439!"}},"tr_TR":{"js":{"search_history":"Arama ge\u00e7mi\u015fi","successfully_sent_this_document":"Bu belge ba\u015far\u0131yla g\u00f6nderildi!","search_books_presentations":"Kitap, sunum, i\u015fletme, akademik yay\u0131n ara...","public_locked_collection":"(Bu koleksiyona yaln\u0131zca siz ekleme yapabilirsiniz ancak koleksiyonu ba\u015fkalar\u0131 da g\u00f6r\u00fcnt\u00fcleyebilir)","add_a_reply":"Bir yan\u0131t ekle...","hide_bulk_editor":"Toplu D\u00fczenleyiciyi G\u00f6ster","readcast_complete":"Readcast Tamamland\u0131!","search_this_profile":"Bu profili ara...","no_search_result_is_found":"Sonu\u00e7 bulunamad\u0131","are_you_sure_you_want_to_delete_":"Bu\u00a0belgeleri silmek istedi\u011finizden emin misiniz? Bu i\u015flem geri ALINAMAZ!","of":"/","hi_there_were_logging_you_in":"Merhaba! \u015eimdi giri\u015finizi yap\u0131yoruz.","are_you_sure_you_want_to_delete":"Bu \u00f6\u011feyi silmek istedi\u011finizden emin misiniz?","share_what_youre_reading":"Okudu\u011funuzu payla\u015f\u0131n...","enter_a_name_for_your_new_collection":"Yeni koleksiyonunuz i\u00e7in bir ad girin...","search_is_disabled":"Arama devre d\u0131\u015f\u0131 b\u0131rak\u0131ld\u0131...","show_bulk_editor":"Toplu D\u00fczenleyiciyi G\u00f6ster","email_addresses_of_recipients":"Al\u0131c\u0131lar\u0131n e-posta adresleri","search_my_content":"\u0130\u00e7eri\u011fimi ara...","email_addresses_or_scribd_usernames":"E-posta adresleri veya Scribd kullan\u0131c\u0131 adlar\u0131","search_within_document":"Belge i\u00e7inde ara...","download":"\u0130ndir","public_moderated_collection":"(Bu koleksiyona ba\u015fkalar\u0131 ekleme yapabilir ancak eklemeleri siz onaylar ya da reddedersiniz)","this_document_could_not_be_deleted":"Bu belge \u015fu anda silinemiyor. L\u00fctfen support@scribd.com\u00a0ile ileti\u015fime ge\u00e7in.","result":"Sonu\u00e7","private_collection":"(Bu koleksiyona yaln\u0131zca siz ekleme yapabilir ve koleksiyonu yaln\u0131zca siz g\u00f6r\u00fcnt\u00fcleyebilirsiniz)","search_people":"Ki\u015fileri Ara","help_me":"D\u00fc\u015f\u00fcnceler zihnimi kemiriyor!"}},"vi_VN":{"js":{"search_history":"L\u1ecbch s\u1eed t\u00ecm ki\u1ebfm","successfully_sent_this_document":"G\u1eedi th\u00e0nh c\u00f4ng t\u00e0i li\u1ec7u n\u00e0y!","search_books_presentations":"T\u00ecm ki\u1ebfm s\u00e1ch, ba\u0309n thuy\u1ebft tr\u00ecnh, s\u00e1ch kinh doanh, s\u00e1ch h\u1ecdc thu\u00e2\u0323t...","public_locked_collection":"(Ch\u1ec9 b\u1ea1n m\u01a1\u0301i c\u00f3 th\u1ec3 th\u00eam v\u00e0o b\u1ed9 s\u01b0u t\u1eadp n\u00e0y, nh\u01b0ng ng\u01b0\u1eddi kh\u00e1c c\u00f3 th\u1ec3 xem n\u00f3)","add_a_reply":"Th\u00eam tra\u0309 l\u01a1\u0300i...","readcast_complete":"Readcast Ho\u00e0n t\u1ea5t!","search_this_profile":"T\u00ecm ki\u1ebfm h\u1ed3 s\u01a1 n\u00e0y...","no_search_result_is_found":"Kh\u00f4ng ti\u0300m th\u00e2\u0301y k\u1ebft qu\u1ea3 t\u00ecm ki\u1ebfm","are_you_sure_you_want_to_delete_":"Ba\u0323n ch\u0103\u0301c ch\u0103\u0301n l\u00e0 mu\u00f4\u0301n xo\u0301a ca\u0301c ta\u0300i li\u00ea\u0323u na\u0300y? Vi\u00ea\u0323c na\u0300y KH\u00d4NG TH\u00ca\u0309 hoa\u0300n ta\u0301c \u0111\u01b0\u01a1\u0323c.","of":"c\u1ee7a","hi_there_were_logging_you_in":"Xin cha\u0300o! Ch\u00fang t\u00f4i \u0111ang \u0111\u0103ng nh\u1eadp cho ba\u0323n.","are_you_sure_you_want_to_delete":"Ba\u0323n ch\u0103\u0301c ch\u0103\u0301n l\u00e0 mu\u00f4\u0301n xo\u0301a mu\u0323c na\u0300y?","share_what_youre_reading":"Chia s\u1ebb nh\u1eefng g\u00ec b\u1ea1n \u0111ang \u0111\u1ecdc...","enter_a_name_for_your_new_collection":"Nh\u1eadp t\u00ean cho b\u1ed9 s\u01b0u t\u1eadp m\u1edbi c\u1ee7a b\u1ea1n...","search_is_disabled":"T\u00ecm ki\u1ebfm bi\u0323 v\u00f4 hi\u1ec7u h\u00f3a...","email_addresses_of_recipients":"\u0111\u1ecba ch\u1ec9 th\u01b0 \u0111i\u1ec7n t\u1eed c\u1ee7a ng\u01b0\u1eddi nh\u1eadn","search_my_content":"T\u00ecm ki\u1ebfm n\u1ed9i dung c\u1ee7a t\u00f4i...","email_addresses_or_scribd_usernames":"\u0111\u1ecba ch\u1ec9 th\u01b0 \u0111i\u1ec7n t\u1eed ho\u1eb7c t\u00ean ng\u01b0\u1eddi d\u00f9ng Scribd","search_within_document":"T\u00ecm ki\u00ea\u0301m trong t\u00e0i li\u1ec7u","download":"T\u1ea3i v\u1ec1","public_moderated_collection":"(Ng\u01b0\u1eddi kh\u00e1c c\u00f3 th\u1ec3 th\u00eam v\u00e0o b\u1ed9 s\u01b0u t\u1eadp n\u00e0y, nh\u01b0ng b\u1ea1n co\u0301 quy\u00ea\u0300n ch\u1ea5p nh\u1eadn ho\u1eb7c t\u1eeb ch\u1ed1i c\u00e1c b\u1ed5 sung)","this_document_could_not_be_deleted":"Kh\u00f4ng th\u1ec3 x\u00f3a ta\u0300i li\u00ea\u0323u na\u0300y v\u00e0o lu\u0301c n\u00e0y. Xin vui l\u00f2ng li\u00ean h\u1ec7 v\u1edbi support@scribd.com.","result":"K\u1ebft qu\u1ea3","private_collection":"(Chi\u0309 b\u1ea1n m\u01a1\u0301i c\u00f3 th\u1ec3 th\u00eam v\u00e0o b\u1ed9 s\u01b0u t\u1eadp n\u00e0y, v\u00e0 ch\u1ec9 b\u1ea1n m\u01a1\u0301i xem \u0111\u01b0\u01a1\u0323c)","search_people":"T\u00ecm ki\u1ebfm m\u1ecdi ng\u01b0\u1eddi","help_me":"T\u00f4i l\u00e0m vi\u1ec7c r\u1ea5t ch\u0103m ch\u1ec9!"}},"en":{"helpers":null},"zh_CN":{"helpers":null},"ar":{"helpers":null},"az":{"helpers":null},"bg":{"helpers":null},"bs":{"helpers":null},"ca":{"helpers":null},"cs":{"helpers":null},"csb":{"helpers":null},"cy":{"helpers":null},"da":{"helpers":null},"de":{"helpers":null},"de_AT":{"helpers":null},"de_CH":{"helpers":null},"el":{"helpers":null},"en_AU":{"helpers":null},"en_GB":{"helpers":null},"en_IN":{"helpers":null},"eo":{"helpers":null},"es_AR":{"helpers":null},"es_CL":{"helpers":null},"es_CO":{"helpers":null},"es_MX":{"helpers":null},"et":{"helpers":null},"eu":{"helpers":null},"fa":{"helpers":null},"fi":{"helpers":null},"fr":{"helpers":null},"fr_CA":{"helpers":null},"fr_CH":{"helpers":null},"fur":{"helpers":null},"gsw_CH":{"helpers":null},"he":{"helpers":null},"hi":{"helpers":null},"hi_IN":{"helpers":null},"hu":{"helpers":null},"id":{"helpers":null},"is":{"helpers":null},"it":{"helpers":null},"ja":{"helpers":null},"kn":{"helpers":null},"ko":{"helpers":null},"lo":{"helpers":null},"lv":{"helpers":null},"mn":{"helpers":null},"nb":{"helpers":null},"nl":{"helpers":null},"pl":{"helpers":null},"pt_PT":{"helpers":null},"ro":{"helpers":null},"ru":{"helpers":null},"sk":{"helpers":null},"sv_SE":{"helpers":null},"sw":{"helpers":null},"th":{"helpers":null},"tr":{"helpers":null},"uk":{"helpers":null},"zh_TW":{"helpers":null}};




/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-18 17:23:52 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - public/javascripts/shared/embed_code.coffee (last modified: 2016-07-08 22:43:33 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var EmbedCodeGenerator,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.Embed || (Scribd.Embed = {});

  EmbedCodeGenerator = (function() {
    EmbedCodeGenerator.prototype.default_options = {
      minWidth: 400,
      minHeight: 400,
      maxWidth: 1600,
      maxHeight: 1600,
      width: 400,
      height: 600,
      page: 1,
      mode: "scroll",
      auto_width: true,
      auto_height: false,
      show_title: true,
      show_recommendations: true,
      show_upsell: true
    };

    function EmbedCodeGenerator(options) {
      this.options = $.extend({
        object_id: "doc_" + Math.floor(Math.random() * 99999)
      }, this.default_options, options);
      if (this.options.auto_width || this.options.width === "100%") {
        this.options.width = "100%";
      } else if (parseInt(options.width) < this.options.minWidth) {
        this.options.width = this.options.minWidth;
      }
      if (this.options.auto_height) {
        this.options.height = this.default_options.height;
      } else if (parseInt(options.height) < this.options.min_height) {
        this.options.height = this.options.min_height;
      }
    }

    EmbedCodeGenerator.prototype.make_title = function(options) {
      var link_styles, out, styles, title, title_truncated, user_title, user_title_truncated;
      out = [];
      title_truncated = _.escape(Scribd.truncate($.trim(options.title), 110));
      if (options.user_title != null) {
        user_title_truncated = _.escape(Scribd.truncate($.trim(options.user_title), 110));
        user_title = _.escape(options.user_title);
      }
      if (options.show_title) {
        title = _.escape(options.title);
        styles = " style=\"\nmargin: 12px auto 6px auto;\nfont-family: Helvetica,Arial,Sans-serif;\nfont-style: normal;\nfont-variant: normal;\nfont-weight: normal;\nfont-size: 14px;\nline-height: normal;\nfont-size-adjust: none;\nfont-stretch: normal;\n-x-system-font: none;\ndisplay: block;\"";
        link_styles = " style=\"text-decoration: underline;\" ";
        out.push("<p " + styles + ">\n  <a title=\"View " + title + " on Scribd\" href=\"" + options.doc_url + "#from_embed\" " + link_styles + ">" + title_truncated + "</a>");
        if (options.user_title != null) {
          out.push(" by\n<a title=\"View " + user_title + "'s profile on Scribd\" href=\"" + options.user_url + "#from_embed\" " + link_styles + ">" + user_title_truncated + "</a>\non Scribd");
        }
        out.push("</p>");
      }
      return out;
    };

    EmbedCodeGenerator.prototype.make_protocol_relative = function(url) {
      return url.replace(/^http:\/\//, '//');
    };

    return EmbedCodeGenerator;

  })();

  Scribd.Embed.HTML5CodeGenerator = (function(superClass) {
    extend(HTML5CodeGenerator, superClass);

    function HTML5CodeGenerator() {
      return HTML5CodeGenerator.__super__.constructor.apply(this, arguments);
    }

    HTML5CodeGenerator.prototype.embed_url = function() {
      var params, url;
      url = this.make_protocol_relative("https://sbx.scribd.com/embeds/" + this.options.doc_id + "/content");
      params = {
        start_page: this.options.page,
        view_mode: this.options.mode
      };
      if (this.options.access_key && ("" + this.options.access_key).length) {
        params.access_key = this.options.access_key;
      }
      params.show_recommendations = this.options.show_recommendations;
      params.show_upsell = this.options.show_upsell;
      return url + "?" + $.param(params);
    };

    HTML5CodeGenerator.prototype.render = function(custom_options) {
      var add_height_script, auto_height, embed_url, out;
      if (custom_options) {
        this.options = $.extend(this.options, custom_options);
      }
      add_height_script = false;
      if (this.options.auto_height && this.options.aspect_ratio) {
        if (this.options.auto_width) {
          add_height_script = true;
        } else {
          this.options.height = Math.round((1 / this.options.aspect_ratio) * this.options.width) + 60;
        }
      }
      out = this.make_title(this.options);
      embed_url = this.embed_url();
      auto_height = !!this.options.auto_height;
      out.push("<iframe class=\"scribd_iframe_embed\" src=\"" + embed_url + "\" data-auto-height=\"" + auto_height + "\" data-aspect-ratio=\"" + this.options.aspect_ratio + "\" scrolling=\"no\" id=\"" + this.options.object_id + "\" width=\"" + this.options.width + "\" height=\"" + this.options.height + "\" frameborder=\"0\"></iframe>");
      if (add_height_script) {
        out.push("<script type=\"text/javascript\">(function() { var scribd = document.createElement(\"script\"); scribd.type = \"text/javascript\"; scribd.async = true; scribd.src = \"" + (this.make_protocol_relative('https://sbx.scribd.com/')) + "javascripts/embed_code/inject.js\"; var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(scribd, s); })();</script>");
      }
      return out.join("").replace(/\n/g, " ");
    };

    return HTML5CodeGenerator;

  })(EmbedCodeGenerator);

  Scribd.Embed.FlashCodeGenerator = (function(superClass) {
    extend(FlashCodeGenerator, superClass);

    function FlashCodeGenerator() {
      return FlashCodeGenerator.__super__.constructor.apply(this, arguments);
    }

    FlashCodeGenerator.prototype.render = function(custom_options) {
      var out;
      if (custom_options) {
        this.options = $.extend(this.options, custom_options);
      }
      out = this.make_title(this.options);
      out.push("<object id=\"" + this.options.object_id + "\" name=\"" + this.options.object_id + "\" height=\"" + this.options.height + "\" width=\"" + this.options.width + "\" type=\"application/x-shockwave-flash\" data=\"//d-f.scribdassets.com/ScribdViewer.swf\" style=\"outline:none;\" ><param name=\"movie\" value=\"//d-f.scribdassets.com/ScribdViewer.swf\"> <param name=\"wmode\" value=\"opaque\"> <param name=\"bgcolor\" value=\"#ffffff\"> <param name=\"allowFullScreen\" value=\"true\"> <param name=\"allowScriptAccess\" value=\"always\"> <param name=\"FlashVars\" value=\"document_id=" + this.options.doc_id + "&access_key=" + this.options.access_key + "&page=" + this.options.page + "&viewMode=" + this.options.mode + "\"> <embed id=\"" + this.options.object_id + "\" name=\"" + this.options.object_id + "\" src=\"//d-f.scribdassets.com/ScribdViewer.swf?document_id=" + this.options.doc_id + "&access_key=" + this.options.access_key + "&page=" + this.options.page + "&viewMode=" + this.options.mode + "\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" height=\"" + this.options.height + "\" width=\"" + this.options.width + "\" wmode=\"opaque\" bgcolor=\"#ffffff\"></embed> </object>");
      return out.join("").replace(/\n/g, " ");
    };

    return FlashCodeGenerator;

  })(EmbedCodeGenerator);

  Scribd.Embed.WordpressCodeGenerator = (function(superClass) {
    extend(WordpressCodeGenerator, superClass);

    function WordpressCodeGenerator() {
      return WordpressCodeGenerator.__super__.constructor.apply(this, arguments);
    }

    WordpressCodeGenerator.prototype.render = function(custom_options) {
      if (custom_options) {
        this.options = $.extend(this.options, custom_options);
      }
      return "[scribd id=" + this.options.doc_id + " key=" + this.options.access_key + " mode=" + this.options.mode + "]";
    };

    return WordpressCodeGenerator;

  })(EmbedCodeGenerator);

}).call(this);


/* ----------------------------------------------------------------------
   - public/javascripts/jquery_global/base.coffee (last modified: 2016-07-08 22:43:33 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Promise, attributes, css, query, styleTag, styles,
    slice = [].slice;

  if (_) {
    _.templateSettings = {
      escape: /\{\{(?![&])(.+?)\}\}/g,
      interpolate: /\{\{&(.+?)\}\}/g,
      evaluate: /\{\[(?![&])(.+?)\]\}/g
    };
  }

  ;

  try {
    if (parent.catch_iframe_error != null) {
      window.onerror = parent.catch_iframe_error;
    }
    $(function() {
      if (parent.frame_ready != null) {
        return parent.frame_ready();
      }
    });
  } catch (undefined) {}

  ;

  $(function() {
    try {
      if (Scribd.ie) {
        return $(document.body).addClass("ie ie" + Scribd.ie);
      }
    } catch (undefined) {}
  });

  try {
    query = $.deparam(location.search.slice(1));
    if (query.noanimate != null) {
      attributes = ['-webkit-transition', '-moz-transition', '-ms-transition', 'transition'];
      styles = attributes.map(function(attr) {
        return attr + ": none !important";
      });
      css = "* { " + (styles.join('; ')) + " }";
      styleTag = document.createElement('style');
      styleTag.type = 'text/css';
      if (styleTag.styleSheet != null) {
        styleTag.styleSheet.cssText = css;
      } else {
        styleTag.appendChild(document.createTextNode(css));
      }
      document.head.appendChild(styleTag);
      $.fx.off = true;
      Scribd.noanimate = true;
    }
  } catch (undefined) {}

  Scribd.jsblock = $.Deferred();

  Scribd.initFBElement = function(el) {
    if (window.FB) {
      return FB.XFBML.parse(el);
    } else {
      return setTimeout(function() {
        return Scribd.initFBElement(el);
      }, 300);
    }
  };

  Scribd.truncate = function(str, len) {
    if (len == null) {
      len = 60;
    }
    return str.replace(new RegExp("^(.{" + (len - 3) + "})[\\s\\S]*$"), function(_, m) {
      return m.replace(/\s+$/, '') + '...';
    });
  };

  Scribd.logging_enabled = true || window.location.href.match(/#.*log/i);

  Scribd.ensure_reload_on_back_button = function() {
    if (window.location.hash.indexOf("rel") !== -1) {
      window.location.hash = window.location.hash.replace("rel", "");
      window.location.reload();
    }
    return window.location.hash = window.location.hash + "rel";
  };

  Scribd.log = function(msg, obj, logger) {
    var ref;
    if (logger == null) {
      logger = "log";
    }
    if (Scribd.logging_enabled && ((ref = window.console) != null ? ref[logger] : void 0)) {
      console[logger](msg);
      if (obj) {
        return console[logger](obj);
      }
    }
  };

  Scribd.log_perceived_page_load_time = function(category, opts) {
    var action, elapsed_time, namespace, namespace_suffix, time;
    if (opts == null) {
      opts = {};
    }
    time = opts.time || +new Date();
    action = opts.action || "Metrics";
    namespace_suffix = "perceived_load_time:" + (Scribd.named_current_user() ? "logged_in" : "logged_out");
    namespace = !opts.prefix ? namespace_suffix : opts.prefix + ":" + namespace_suffix;
    if (window.performance && window.performance.timing) {
      elapsed_time = time - window.performance.timing.fetchStart;
      return $(document.body).track({
        category: category,
        action: action,
        label: namespace,
        params: {
          elapsed_time: elapsed_time
        },
        interactive: false
      });
    }
  };

  Scribd.log_error = function(msg, obj) {
    return Scribd.log(msg, obj, "error");
  };

  Scribd.has_flash = function() {
    var e, error1, fo;
    try {
      fo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
      if (fo) {
        return true;
      }
    } catch (error1) {
      e = error1;
      if (navigator.mimeTypes["application/x-shockwave-flash"] !== void 0) {
        return true;
      }
    }
    return false;
  };

  Scribd.with_login = function(source, next_url, fn) {
    if (next_url == null) {
      next_url = null;
    }
    if (fn == null) {
      fn = null;
    }
    if (!fn) {
      fn = next_url;
      next_url = void 0;
    }
    if (!fn) {
      fn = source;
      source = void 0;
    }
    if (Scribd.logged_in) {
      return typeof fn === "function" ? fn() : void 0;
    }
    return Scribd.SignIn.open(source, next_url);
  };

  Scribd.after_login = function(source, callback) {
    var lb;
    if (Scribd.logged_in) {
      return callback();
    }
    lb = Scribd.SignIn.open(source);
    lb.login_promise().done(callback);
    return lb;
  };

  Scribd.parse_parameters = function(string) {
    var first, j, k, len1, out, part, ref, ref1, v;
    first = string.charAt(0);
    if (first === "#" || first === "?") {
      string = string.substr(1);
    }
    out = {};
    ref = string.split("&");
    for (j = 0, len1 = ref.length; j < len1; j++) {
      part = ref[j];
      if (part === "") {
        continue;
      }
      ref1 = part.split("="), k = ref1[0], v = ref1[1];
      out[decodeURIComponent(k).replace(/\+/g, ' ')] = v != null ? decodeURIComponent(v).replace(/\+/g, ' ') : true;
    }
    return out;
  };

  Scribd.add_url_parameter = function(url, key, value) {
    var fragment, i, rx;
    i = url.indexOf('#');
    fragment = "";
    if (i >= 0) {
      fragment = url.substr(i);
      url = url.substr(0, i);
    }
    rx = new RegExp("&?" + key + "=[^&]*", "g");
    url = url.replace(rx, "");
    if (url.indexOf('?') >= 0) {
      if (/[?]$/.test(url)) {
        url += key + "=" + value;
      } else {
        url += "&" + key + "=" + value;
      }
    } else {
      url += "?" + key + "=" + value;
    }
    return url + fragment;
  };

  Scribd.add_url_parameters = function(url, params) {
    var key, value;
    for (key in params) {
      value = params[key];
      url = Scribd.add_url_parameter(url, key, params[key]);
    }
    return url;
  };

  Scribd.with_local_storage = (function() {
    var local_storage_supported;
    local_storage_supported = function() {
      var error, error1, storage, testKey;
      testKey = 'test';
      storage = window.sessionStorage;
      try {
        storage.setItem(testKey, '1');
        storage.removeItem(testKey);
        return true;
      } catch (error1) {
        error = error1;
        return false;
      }
    };
    return function(fn) {
      if (local_storage_supported()) {
        return fn(window.localStorage);
      }
    };
  })();

  Scribd.with_named_current_user = function(fn) {
    return typeof fn === "function" ? fn(Scribd.named_current_user()) : void 0;
  };

  Scribd.set_named_current_user = function(user) {
    return Scribd.current_user = user;
  };

  Scribd.named_current_user = function() {
    if (Scribd.current_user && !Scribd.current_user.anonymous) {
      return Scribd.current_user;
    }
  };

  Scribd.with_anonymous_current_user = function(fn) {
    var user;
    if (user = Scribd.anonymous_current_user()) {
      return typeof fn === "function" ? fn(user) : void 0;
    }
  };

  Scribd.anonymous_current_user = function() {
    if (Scribd.current_user && Scribd.current_user.anonymous) {
      return Scribd.current_user;
    }
  };

  Scribd.named_current_user_sync = Scribd.named_current_user;

  Scribd.anonymous_current_user_sync = Scribd.anonymous_current_user;

  Scribd.UrlFor = {
    document: function(id) {
      return "/doc/" + id;
    }
  };

  Scribd.CSRF = {
    get_csrf_params: function() {
      this.ensure_token_initialized();
      return this.csrf_params;
    },
    get_csrf_name: function() {
      this.ensure_token_initialized();
      return this.param;
    },
    get_csrf_value: function() {
      this.ensure_token_initialized();
      return this.token;
    },
    get_csrf_debug: function() {
      return this.debug_str;
    },
    with_token: function(params) {
      if (params == null) {
        params = {};
      }
      if ($.type(params) === "string") {
        return params + "&" + $.param(this.get_csrf_params());
      } else {
        return $.extend(params, this.get_csrf_params());
      }
    },
    ensure_token_initialized: function() {
      var url_params;
      if (!this.token_initialized) {
        this.debug_str = "";
        this.param = $("meta[name=csrf-param]").attr("content");
        this.token = $("meta[name=csrf-token]").attr("content");
        if (!this.token) {
          this.debug_str += "1";
        }
        if (!this.token) {
          url_params = {
            href: window.location.href
          };
          $.ajax({
            type: "POST",
            url: "https://sbx.scribd.com/csrf_token" + ("?" + ($.param(url_params))),
            async: false,
            cache: false,
            skip_csrf: true,
            success: (function(_this) {
              return function(res, status) {
                if (res.csrf_token) {
                  _this.token = res.csrf_token;
                  return _this.debug_str += "3";
                } else {
                  return _this.debug_str += "-2-" + (encodeURIComponent(JSON.stringify(res))) + "-" + status + "-" + window.location.href + "-";
                }
              };
            })(this),
            error: (function(_this) {
              return function(res, status_str, error_thrown) {
                return _this.debug_str += "-4-" + res.status + "-" + (encodeURIComponent(status_str)) + "-" + (encodeURIComponent(error_thrown)) + "-" + window.location.href + "-";
              };
            })(this)
          });
        }
        if (!this.token) {
          this.debug_str += "5";
        }
        this.csrf_params = {};
        if ((this.param != null) && (this.token != null)) {
          this.csrf_params[this.param] = this.token;
        }
        return this.token_initialized = true;
      }
    }
  };

  $.ajaxPrefilter(function(options, originalOptions, xhr) {
    var csrf_val, failed_string, force_csrf;
    xhr.setRequestHeader("X-Tried-CSRF", "1");
    force_csrf = false;
    if (options.crossDomain && options.url.match(/^https?:\/\/[^.]+.scribd.com\//)) {
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      options.xhrFields = {
        withCredentials: true
      };
      force_csrf = true;
    }
    if ((!options.crossDomain || force_csrf) && options.type && options.type.toLowerCase() !== "get" && !originalOptions.skip_csrf) {
      csrf_val = Scribd.CSRF.get_csrf_value();
      if (csrf_val) {
        return xhr.setRequestHeader('X-CSRF-Token', csrf_val);
      } else {
        xhr.setRequestHeader('X-CSRF-Failed', "5");
        return xhr.setRequestHeader("X-CSRF-Debug", Scribd.CSRF.get_csrf_debug());
      }
    } else {
      failed_string = "";
      if (options.crossDomain) {
        failed_string += "1";
      }
      if (!options.type) {
        failed_string += "2";
      }
      if (options.type && options.type.toLowerCase() === "get") {
        failed_string += "3";
      }
      if (originalOptions.skip_csrf) {
        failed_string += "4";
      }
      return xhr.setRequestHeader('X-CSRF-Failed', failed_string);
    }
  });

  Scribd.JSONCookie = (function() {
    function JSONCookie(name1, jar) {
      var old_cookie;
      this.name = name1;
      this.jar = jar || new CookieJar({
        path: "/",
        expires: ""
      });
      old_cookie = this.jar.get(name) || {};
      if (typeof old_cookie === "string") {
        old_cookie = $.parseJSON(old_cookie);
      }
      this.store = _.clone(old_cookie);
    }

    JSONCookie.prototype.set = function(k, v) {
      return this.store[k] = v;
    };

    JSONCookie.prototype.unset = function(k) {
      return delete this.store[k];
    };

    JSONCookie.prototype.get = function(k) {
      return this.store[k];
    };

    JSONCookie.prototype.save = function() {
      return this.jar.put(this.name, JSON.stringify(this.store));
    };

    return JSONCookie;

  })();

  $.easing.ease_in_out_cubic = function(x, t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t + b;
    } else {
      return c / 2 * ((t -= 2) * t * t + 2) + b;
    }
  };

  $.fn.tap = function(fn) {
    fn.call(this, this);
    return this;
  };

  $.fn.absolutize = function() {
    return this.each(function() {
      var element, height, left, offsets, top, width;
      element = jQuery(this);
      if (element.css("position") === "absolute") {
        return element;
      }
      offsets = element.position();
      top = offsets.top;
      left = offsets.left;
      width = element[0].clientWidth;
      height = element[0].clientHeight;
      element._originalLeft = left - parseFloat(element.css("left") || 0);
      element._originalTop = top - parseFloat(element.css("top") || 0);
      element._originalWidth = element.css("width");
      element._originalHeight = element.css("height");
      element.css("position", "absolute");
      element.css("top", top + "px");
      element.css("left", left + "px");
      element.css("width", width + "px");
      element.css("height", height + "px");
      return element;
    });
  };

  $.fn.viewportOffset = function(fn) {
    var offset, win;
    offset = $(this).offset();
    win = $.fn.viewportOffset.win;
    if (offset) {
      return {
        left: offset.left - win.scrollLeft(),
        top: offset.top - win.scrollTop()
      };
    }
  };

  $.fn.viewportOffset.win = $(window);

  $.fn.has_expandable_text = function(callback) {
    this.on("click", ".truncated_more, .truncated_less", function(e) {
      var elm;
      elm = $(e.currentTarget).closest(".truncated_text").find(".truncated_short").toggle().end().find(".truncated_long").toggle();
      return typeof callback === "function" ? callback(elm) : void 0;
    });
    return this;
  };

  $.fn.event_promise = function(event_name) {
    var promise;
    promise = $.Deferred();
    this.one(event_name, function() {
      return promise.resolve();
    });
    return promise;
  };

  $.easing.smoothstep = function(t) {
    return t * t * t * (t * (t * 6 - 15) + 10);
  };

  $.fn.dispatch = function(event_name, event_table, context) {
    if (event_name === "click") {
      event_name = "click contextmenu";
    }
    this.on(event_name, function(e) {
      var _target, callback, cls, real_target, res, target;
      target = $(e.target);
      for (cls in event_table) {
        callback = event_table[cls];
        real_target = null;
        if (target.hasClass(cls) || (real_target = target.closest("." + cls)).length !== 0) {
          _target = real_target || target;
          if (_target.hasClass("disabled")) {
            return false;
          }
          if (!_target.data("track")) {
            _target.data("track", cls);
          }
          _target.track({
            action: event_name.split(" ")[0]
          });
          _target.trigger("scribd:track_rats_ga");
          if (e.type === "contextmenu") {
            return;
          }
          res = callback != null ? callback.call(context, _target, e) : void 0;
          if (res !== "continue") {
            return false;
          }
        }
      }
      return null;
    });
    return this;
  };

  $.fn.restrict_money = function() {
    var decimal, money, number;
    number = /\d/;
    decimal = /\./;
    money = /^\d*(\.\d{0,2})?/;
    this.keypress(function(e) {
      var c, has_decimal, val;
      if (e.keyCode >= 32) {
        c = String.fromCharCode(e.keyCode);
        val = $(this).val();
        has_decimal = val.match(decimal);
        if (c === ".") {
          if (has_decimal) {
            return false;
          }
        } else {
          if (!c.match(number)) {
            return false;
          }
        }
        return true;
      }
    });
    this.change(function(e) {
      var $el, correct, ref;
      $el = $(this);
      correct = (ref = $el.val().match(money)) != null ? ref[0] : void 0;
      if ($el.val() !== correct) {
        return $el.val(correct);
      }
    });
    return this;
  };

  $.fn.restrict_numeric = function(opts) {
    return this.on("keypress", function(e) {
      var character, code;
      code = e.which;
      character = String.fromCharCode(code);
      if (e.ctrlKey || e.metaKey) {
        return;
      }
      switch (code) {
        case 46:
          if (opts.allow_period !== false) {
            return;
          }
          break;
        case 9:
        case 8:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 27:
        case 13:
          return;
      }
      if (!character.match(/[0-9]/g)) {
        return false;
      }
    });
  };

  $.fn.flash = function(color, duration) {
    var animate_ms, highlight_bg, original_bg;
    highlight_bg = color || "#FFFF9C";
    animate_ms = duration || 1500;
    if (!this.data('original_bg')) {
      this.data('original_bg', this.css("background-color"));
    }
    original_bg = this.data('original_bg');
    return this.stop(false, true).css('backgroundColor', highlight_bg).animate({
      backgroundColor: original_bg
    }, animate_ms);
  };

  $.fn.placeholder_text = function(default_text) {
    var el, fn1, j, len1;
    fn1 = function(el) {
      var inactive_text;
      el = $(el);
      inactive_text = default_text || el.data("default_text");
      if (!el.val() || el.val() === inactive_text) {
        return el.val(inactive_text).addClass("inactive");
      }
    };
    for (j = 0, len1 = this.length; j < len1; j++) {
      el = this[j];
      fn1(el);
    }
    this.on("focus", function(e) {
      var inactive_text;
      el = $(this);
      inactive_text = default_text || el.data("default_text");
      if (el.val() === inactive_text && el.is(".inactive")) {
        el.val("");
      }
      el.removeClass("inactive");
      return typeof on_focus === "function" ? on_focus(el) : void 0;
    });
    this.on("blur", function() {
      el = $(this);
      if (!el.val()) {
        return el.val(default_text || el.data("default_text")).addClass("inactive");
      }
    });
    return this;
  };

  $.fn.select_on_focus = function() {
    return this.on("focus", function() {
      $(this).select();
      this.onmouseup = (function(_this) {
        return function() {
          _this.onmouseup = null;
          return false;
        };
      })(this);
      return false;
    });
  };

  $.fn.input_character_countdown = function(fn) {
    var $el, character_count;
    $el = $(this);
    character_count = $el.prop("maxlength");
    return $el.on("input propertychange", (function(_this) {
      return function(e) {
        var $ev_el;
        $ev_el = $(e.target);
        return typeof fn === "function" ? fn({
          current_character_count: $ev_el.val().length,
          max_character_count: character_count,
          remaining: character_count - $ev_el.val().length
        }) : void 0;
      };
    })(this));
  };

  $.fn.parallax_background = function(range, delta, enabled) {
    var $el, on_scroll, win;
    if (range == null) {
      range = 390;
    }
    if (delta == null) {
      delta = 150;
    }
    if (enabled == null) {
      enabled = false;
    }
    if (!enabled) {
      return;
    }
    if (!(typeof Modernizr !== "undefined" && Modernizr !== null ? Modernizr.csstransforms : void 0)) {
      return;
    }
    $el = this;
    win = $(window);
    if ($el.on_scroll) {
      win.off($el.on_scroll);
    }
    on_scroll = (function(_this) {
      return function() {
        var offset, p, top;
        top = win.scrollTop();
        p = Math.min(1, top / range);
        offset = Math.floor(delta * p);
        css = {};
        css[Modernizr.prefixed("Transform")] = "translate3d(0," + offset + "px, 0)";
        return $el.css(css);
      };
    })(this);
    $el.on_scroll = on_scroll;
    on_scroll();
    return win.on("resize scroll", on_scroll);
  };

  $.fn.parallax_folds = function() {
    var offsets, parallax_folds, rate, update_offsets, win;
    return;
    rate = 3;
    parallax_folds = this.find(".parallax_fold");
    win = $(window);
    offsets = null;
    update_offsets = function() {
      var f, offset;
      return offsets = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = parallax_folds.length; j < len1; j++) {
          f = parallax_folds[j];
          f = $(f);
          f.css("transform", "");
          offset = f.outerHeight() > win.height() ? f.offset().top + f.outerHeight() - win.height() : f.offset().top;
          results.push([f, offset, f.find(".leader_fadeout")]);
        }
        return results;
      })();
    };
    win.on("scroll", (function(_this) {
      return function() {
        var f, fade_out, j, len1, offset, ref, scroll_top, top, win_height;
        win_height = win.height();
        scroll_top = win.scrollTop();
        if (!offsets) {
          update_offsets();
        }
        for (j = 0, len1 = offsets.length; j < len1; j++) {
          ref = offsets[j], f = ref[0], top = ref[1], fade_out = ref[2];
          offset = Math.max(0, scroll_top - top);
          f.css("transform", "translate3d(0," + (Math.floor(offset / 3)) + "px,0)");
          fade_out.css("opacity", Math.max(0, 1 - offset / f.height()));
        }
        return void 0;
      };
    })(this));
    return win.on("resize", (function(_this) {
      return function() {
        return offsets = null;
      };
    })(this));
  };

  Scribd.vertically_center = function($container) {
    var el, el_h, j, len1, parent, parent_h, ref, results, top;
    ref = $container.find(".centered");
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      el = ref[j];
      el = $(el);
      parent = el.closest(".content_layer");
      parent_h = parent.height();
      el_h = el.outerHeight();
      top = Math.floor((parent_h - el_h) / 2);
      results.push(el.css("marginTop", top + "px"));
    }
    return results;
  };

  Scribd.fully_visible = function(el) {
    var rect;
    rect = el.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= $(window).height() && rect.right <= $(window).width();
  };

  $.fn.scrolled_into_viewport = function(fn) {
    var $el, check_visibility, throttled_fn;
    $el = this;
    throttled_fn = _.throttle((function(_this) {
      return function() {
        return check_visibility($el);
      };
    })(this));
    $el.data("scrolled_into_viewport_callback", throttled_fn);
    check_visibility = function(jq_el) {
      var el, j, len1, results;
      results = [];
      for (j = 0, len1 = jq_el.length; j < len1; j++) {
        el = jq_el[j];
        if (Scribd.fully_visible(el)) {
          results.push(fn(el));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    check_visibility($el);
    return $(window).on("scroll", throttled_fn);
  };

  ;

  window.jkstrp = function(f, name) {
    return $(function() {
      return f();
    });
  };

  ;

  Scribd.escape_regexp = function(str) {
    return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  };

  Scribd.escape_html = function(str) {
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };

  Scribd.strip_html = function(str) {
    var container;
    container = document.createElement('div');
    container.innerHTML = str;
    return container.textContent || container.innerText;
  };

  Scribd.get_referrer_and_keywords = function(r) {
    var keywords, m, param, referrer;
    if (r == null) {
      r = document.referrer;
    }
    referrer = r.split('/')[2] || "none";
    keywords = null;
    param = (function() {
      switch (referrer) {
        case "www.google.com":
        case "www.bing.com":
          return "q";
        case "search.yahoo.com":
          return "p";
      }
    })();
    if (m = r.match(new RegExp('[^\w]' + param + '=([^&]*)'))) {
      keywords = m[1];
    }
    return [referrer, keywords];
  };

  Scribd.template = _.memoize(function(name) {
    var lazy_tpl;
    lazy_tpl = null;
    return function(attrs) {
      var tpl_string;
      if (lazy_tpl == null) {
        tpl_string = $("#tpl_" + name).html();
        if (!tpl_string) {
          throw "Failed to find template named #tpl_" + name;
        }
        lazy_tpl = _.template(tpl_string);
      }
      return lazy_tpl(attrs);
    };
  });

  Scribd.Events = typeof Backbone !== "undefined" && Backbone !== null ? Backbone.Events : void 0;

  Scribd.Promise = Promise = typeof jQuery !== "undefined" && jQuery !== null ? jQuery.Deferred : void 0;

  Scribd.no_default = function(handler) {
    return function() {
      var args, event;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      event = _.first(args);
      if (event != null) {
        event.preventDefault();
      }
      return handler.apply(this, args);
    };
  };

  Scribd.load_image = function(url) {
    var img, promise;
    promise = new Promise;
    img = new Image;
    img.onload = function() {
      return promise.resolve(this);
    };
    img.onerror = function() {
      return promise.reject(this);
    };
    img.src = url;
    return promise;
  };

  Scribd.nway_test_pick_choice = function(choices) {
    var desired_weight, flat_choices, last_choice, sorted_choices, this_weight, total_weight;
    flat_choices = _.pairs(choices);
    sorted_choices = _.sortBy(flat_choices, function(a) {
      return a[0];
    });
    if (_.isEmpty(sorted_choices)) {
      return;
    }
    total_weight = _.reduce(sorted_choices, function(memo, a) {
      var weight;
      weight = a[1].weight;
      return weight + memo;
    }, 0);
    desired_weight = _.random(0, total_weight - 1);
    last_choice = null;
    while (desired_weight >= 0) {
      last_choice = sorted_choices.shift();
      this_weight = last_choice[1].weight;
      desired_weight -= this_weight;
    }
    if (!last_choice) {
      return;
    }
    return {
      "id": last_choice[0],
      "name": last_choice[1]["name"],
      "weight": last_choice[1]["weight"]
    };
  };

  Scribd.nway_test_force_group = function(test_name, force_choice) {
    var choice, choice_id, cookie_jar, id, nway_tests, ref, ref1, test;
    test = typeof Scribd !== "undefined" && Scribd !== null ? (ref = Scribd.NwayTestsWithWeights) != null ? ref[test_name] : void 0 : void 0;
    if (!test) {
      console.warn("trying to force test " + test_name + ", but it doesn't exist");
      return;
    }
    cookie_jar = new CookieJar({
      path: '/',
      expires: 60 * 60 * 24 * 365 * 2
    });
    nway_tests = cookie_jar.get("nwt");
    if (!nway_tests) {
      nway_tests = {};
    }
    ref1 = test.choices;
    for (id in ref1) {
      choice = ref1[id];
      if (choice.name !== force_choice) {
        continue;
      }
      choice_id = parseInt(id, 10);
      if (nway_tests["nw" + test.id] === choice_id) {
        return;
      }
      nway_tests["nw" + test.id] = choice_id;
      cookie_jar.put("nwt", nway_tests);
      $rat('nway_assignments', {
        test: {
          id: test.id,
          name: test_name,
          choices: test.choices
        },
        choice: {
          id: choice_id,
          name: choice.name,
          weight: choice.weight
        }
      });
      $rat.root().flushEvents();
      $(document.body).track({
        category: "NwayAssignments",
        action: test_name,
        label: choice.name,
        interactive: false
      });
      return;
    }
    return console.warn("tried to force test " + test_name + ", but couldn't find choice " + force_choice);
  };

  Scribd.nway_test_choice_value = function(test_name) {
    var choice, choice_object, cookie_jar, nway_tests, previously_assigned_nway_test, ref, test;
    query = $.deparam(location.search.slice(1));
    if (query.nway_test_name === test_name && (query.nway_test_value != null)) {
      if (!isNaN(query.nway_test_value)) {
        return Number(query.nway_test_value);
      } else {
        return query.nway_test_value;
      }
    }
    test = typeof Scribd !== "undefined" && Scribd !== null ? (ref = Scribd.NwayTestsWithWeights) != null ? ref[test_name] : void 0 : void 0;
    if (!test) {
      return;
    }
    cookie_jar = new CookieJar({
      path: '/',
      expires: 60 * 60 * 24 * 365 * 2
    });
    nway_tests = cookie_jar.get("nwt");
    if (!nway_tests) {
      nway_tests = {};
    }
    previously_assigned_nway_test = nway_tests["nw" + test.id];
    if (previously_assigned_nway_test) {
      choice_object = test.choices[previously_assigned_nway_test];
      Scribd.jsblock.done((function(_this) {
        return function() {
          return $(document.body).track({
            category: "NwayRead",
            action: test_name,
            label: (choice_object != null ? choice_object.name : void 0) || "unknown",
            interactive: false
          });
        };
      })(this));
      if (!choice_object) {
        return;
      }
      return choice_object.name;
    } else {
      choice = Scribd.nway_test_pick_choice(test.choices);
      if (!choice) {
        return;
      }
      nway_tests["nw" + test.id] = parseInt(choice.id);
      cookie_jar.put("nwt", nway_tests);
      Scribd.jsblock.done((function(_this) {
        return function() {
          $rat('nway_assignments', {
            test: {
              id: test.id,
              name: test_name,
              choices: test.choices
            },
            choice: choice
          });
          $rat.root().flushEvents();
          return $(document.body).track({
            category: "NwayAssignments",
            action: test_name,
            label: choice.name
          });
        };
      })(this));
      return choice.name;
    }
  };

  Scribd.default_free_trial_days = function() {
    return 14;
  };

  Scribd.trial_cta = function(trial_days, default_cta) {
    if (trial_days == null) {
      trial_days = Scribd.default_free_trial_days();
    }
    if (default_cta == null) {
      default_cta = I18n.t("helpers.trial.start_your_free_trial");
    }
    switch (trial_days) {
      case 360:
        return I18n.t("helpers.trial.start_your_free_year");
      case 60:
        return I18n.t("helpers.trial.start_your_free_two_months");
      case 30:
        return I18n.t("helpers.trial.start_your_free_month");
      case 14:
        return I18n.t("helpers.trial.start_your_free_14_days");
      case 7:
        return I18n.t("helpers.trial.start_your_free_week");
      default:
        return default_cta;
    }
  };

  Scribd.trial_duration_text = function(trial_days) {
    if (trial_days == null) {
      trial_days = Scribd.default_free_trial_days();
    }
    switch (trial_days) {
      case 360:
        return I18n.t("helpers.trial.one_year");
      case 60:
        return I18n.t("helpers.trial.two_months");
      case 30:
        return I18n.t("helpers.trial.one_month");
      case 14:
        return I18n.t("helpers.trial.two_weeks");
      case 7:
        return I18n.t("helpers.trial.one_week");
      case 1:
        return I18n.t("helpers.trial.trial_days_day", {
          trial_days: trial_days
        });
      default:
        return I18n.t("helpers.trial.trial_days_days", {
          trial_days: trial_days
        });
    }
  };

  Date.utcEpoch = function() {
    return Math.floor(Date.utcNow() / 1000);
  };

  Date.utcNow = function() {
    var now;
    now = new Date();
    return now.getTime() + now.getTimezoneOffset() * 60000;
  };

  if (!window.Date.now) {
    window.Date.now = function() {
      return new Date().getTime();
    };
  }

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  Scribd.Set = (function() {
    function Set(elements, eq_fn) {
      this.elements = elements;
      this.eq_fn = eq_fn;
      this.elements = this.elements || [];
    }

    Set.prototype.push = function(element) {
      if (!this.included(element)) {
        this.elements.push(element);
      }
      return this;
    };

    Set.prototype.count = function() {
      return this.elements.length;
    };

    Set.prototype.included = function(element) {
      return this.index(element) > -1;
    };

    Set.prototype.index = function(element) {
      var el, index, j, len1, ref;
      ref = this.elements;
      for (index = j = 0, len1 = ref.length; j < len1; index = ++j) {
        el = ref[index];
        if (this.eq_fn(element, el)) {
          return index;
        }
      }
      return -1;
    };

    Set.prototype.toggle = function(element) {
      if (this.included(element)) {
        this.elements.splice(this.index(element), 1);
      } else {
        this.push(element);
      }
      return this;
    };

    return Set;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - public/javascripts/jquery_global/tracker.coffee (last modified: 2016-05-09 22:37:19 +0000)
   ---------------------------------------------------------------------- */

/*
 *
 *   For a guide to tracking, see: https://scribdjira.atlassian.net/wiki/display/DEVD/Tracking+Guide
 *
 */

(function() {
  var split_ga_category,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  Scribd.Tracker = (function() {
    function Tracker(container, opts1) {
      this.opts = opts1 != null ? opts1 : {};
      this.container = $(container);
      this.captured_events = [];
      this.setup_events();
    }

    Tracker.prototype.create_rathole = function() {
      if (this.rathole && this.rathole.length) {
        return this.rathole;
      }
      if ($(".rathole").length) {
        return this.rathole = $(".rathole");
      }
      $("body").append("<div class='rathole' style='z-index:999999;position:fixed;bottom: 0; height:1px'></div>");
      return this.rathole = $(".rathole");
    };

    Tracker.prototype.setup_events = function() {
      if (this.opts.test) {
        $(document).on("scribd:rats_event", (function(_this) {
          return function(e, evnt, value) {
            var data;
            _this.create_rathole();
            data = value;
            data.label = evnt;
            _this.captured_events.push(data);
            if (_this.rathole != null) {
              return _this.rathole.text(JSON.stringify(_this.captured_events));
            } else {
              return console.log("no rathole for some raisin");
            }
          };
        })(this));
      }
      this.container.on("scribd:track", (function(_this) {
        return function(e, data) {
          var target;
          if (data == null) {
            data = {};
          }
          e.stopPropagation();
          target = $(e.target);
          target.data("scribd_tracked", true);
          return _this.send(_this.element_data(target, e, data));
        };
      })(this));
      this.container.on("scribd:track_rats_ga", (function(_this) {
        return function(e) {
          var target;
          target = $(e.target);
          return _this.send_rats.apply(_this, _this.element_rats(target, e));
        };
      })(this));
      this.container.on("scribd:track_rats", (function(_this) {
        return function(e, event_name, data) {
          var target;
          if (event_name == null) {
            event_name = "";
          }
          if (data == null) {
            data = {};
          }
          target = $(e.target);
          return _this.track_rats(target, event_name, data);
        };
      })(this));
      this.container.on("ajax:send", "form[data-track]", (function(_this) {
        return function(e) {
          var $form, data;
          $form = $(e.currentTarget);
          data = _this.element_data($form, e);
          data.action = "submit";
          return _this.send(data);
        };
      })(this));
      return this.container.on("click contextmenu", "[data-track]", (function(_this) {
        return function(e) {
          var link, skip_link_forward, target;
          if ($(e.currentTarget).data("scribd_tracked")) {
            return;
          }
          if ($(e.currentTarget).is("form[data-track]")) {
            return;
          }
          target = $(e.currentTarget);
          if ("" !== target.data("track")) {
            _this.send(_this.element_data(target, e));
          }
          _this.send_rats.apply(_this, _this.element_rats(target, e));
          if (e.metaKey) {
            return;
          }
          link = $(e.target).closest("a");
          if (!link.length) {
            return;
          }
          if (!link.attr("href")) {
            return;
          }
          if (link.data("remote")) {
            return;
          }
          if (e.type === "contextmenu") {
            return;
          }
          if (link.attr("target") === "_blank") {
            return;
          }
          skip_link_forward = false;
          link.trigger("scribd:should_skip_link_delay", [
            (function() {
              return skip_link_forward = true;
            }), e
          ]);
          if (skip_link_forward) {
            return;
          }
          setTimeout((function() {
            return window.location = link.attr("href");
          }), 100);
          return e.stopPropagation();
        };
      })(this));
    };

    Tracker.prototype.element_rats = function(el, e) {
      var action, category, data, label, rats_name, rats_value, ref, t;
      data = [el.data("track_rats_value") || {}].concat(slice.call((function() {
          var i, len, ref, results;
          ref = el.parents("[data-track_rats_value]");
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            t = ref[i];
            results.push($(t).data("track_rats_value") || {});
          }
          return results;
        })()));
      data.reverse();
      rats_value = $.extend.apply($, [{}].concat(slice.call(data)));
      rats_name = el.closest("[data-track_rats]").data("track_rats");
      if (el.data("override_rats_name")) {
        rats_name = el.data("override_rats_name");
      }
      if ($.isEmptyObject(rats_value)) {
        return [];
      }
      if ((e != null ? e.type : void 0) === "contextmenu") {
        rats_value.event_name = "contextmenu";
      }
      if (!rats_name) {
        ref = this.element_data(el, e), category = ref.category, action = ref.action, label = ref.label;
        if (!label || label === "") {
          label = el.closest("[data-track]").data("track");
        }
        rats_name = "" + category + (action ? "_" + action : "") + (label ? "_" + label : "");
      }
      return [rats_name, rats_value];
    };

    Tracker.prototype.element_data = function(el, e, _data) {
      var $el, data, namespace, parent, ref, ref1;
      if (_data == null) {
        _data = {};
      }
      $el = $(el);
      ref = this.namespace($el), parent = ref[0], namespace = ref[1];
      data = {
        action: _data.action || (e != null ? e.type : void 0),
        category: _data.category || parent,
        label: _data.label || "",
        value: Scribd.named_current_user_sync() ? 1 : 0,
        interactive: (ref1 = _data.interactive) != null ? ref1 : true
      };
      if (data.action === "scribd:track") {
        console.info("scribd_tracker: got event 'scribd:track', did you forget to set a track_category or action?");
      }
      if ($el.data("track")) {
        data.label = $el.data("track");
      }
      if (_data.params != null) {
        data.params = _data.params;
      }
      if (namespace.length && data.label) {
        data.label = namespace + ":" + data.label;
      } else if (namespace.length) {
        data.label = namespace;
      }
      if ($el.data("track_params")) {
        data.params = _data.params != null ? _.extend(_data.params, $el.data("track_params")) : $el.data("track_params");
      }
      if (_.isString(data.params)) {
        data.params = {
          action: data.params
        };
      }
      return data;
    };

    Tracker.prototype.namespace = function(target) {
      var location;
      if (target == null) {
        target = this.container;
      }
      location = this.location_data(target);
      return [location.shift(), location.join(":")];
    };

    Tracker.prototype.location_data = function(target) {
      var current, el, location;
      if (target == null) {
        target = this.container;
      }
      location = (function() {
        var i, len, ref, results;
        ref = target.parents("[data-track_category]");
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          el = ref[i];
          current = $(el);
          if (_.isEmpty(current.data("track_category"))) {
            continue;
          }
          results.push(current.data("track_category"));
        }
        return results;
      })();
      location = _.flatten(location);
      location = _.compact(location);
      if (target.data("track_category")) {
        location.unshift(target.data("track_category"));
      }
      return location.reverse();
    };

    Tracker.prototype.send = function(data) {
      var action, category, datas, e, error, interactive, key, label, rats_tracker, ref, val, value;
      action = data.action, category = data.category, label = data.label, value = data.value, interactive = data.interactive;
      if (data.params) {
        datas = (function() {
          var ref, results;
          ref = data.params;
          results = [];
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            val = ref[key];
            results.push(key + ":" + val);
          }
          return results;
        })();
        if (datas.length) {
          label += " " + datas.join(", ");
        }
        label = _.str.trim(label);
      }
      if (!category) {
        return console.error("scribd_tracker: no category provided");
      } else {
        rats_tracker = new Scribd.RatsTracker("ga_" + category, {}, {
          flush: false
        });
        rats_tracker.send({
          action: action,
          label: label
        });
        if (Scribd.logging_enabled) {
          console.log("%cga", "background-image: -webkit-gradient( linear, left top, right top, color-stop(0.0, red), color-stop(0.3, purple), color-stop(0.6, blue), color-stop(1.0, green));\ncolor:transparent;\nfont-weight: bold;\nfont-size: 150%;\n-webkit-background-clip: text;", [category, action, label, value, interactive]);
        }
        try {
          _gaq.push(['_trackEvent', category, action, label, value, interactive]);
          ga('send', 'event', category, action, label, value, interactive);
          if ((ref = Scribd.named_current_user_sync()) != null ? ref.pmp_subscriber : void 0) {
            return ga('pmp_users.send', 'event', category, action, label, value, interactive);
          }
        } catch (error) {
          e = error;
          return Scribd.log("couldn't log last event with GA");
        }
      }
    };

    Tracker.prototype.send_rats = function(rats_name, rats_value) {
      if (!(rats_name && rats_value)) {
        return;
      }
      $rat(rats_name, rats_value);
      return $rat.root().flushEvents();
    };

    Tracker.prototype.track_rats = function(target, event_name, data) {
      var element_data, key, location, value;
      if (data == null) {
        data = {};
      }
      location = this.location_data(target);
      element_data = {
        location: location,
        page: location.shift()
      };
      for (key in element_data) {
        value = element_data[key];
        if (!_.isEmpty(value)) {
          if (data[key] == null) {
            data[key] = value;
          }
        }
      }
      $rat(event_name, data);
      return $rat.root().flushEvents();
    };

    return Tracker;

  })();

  Scribd.RatsTracker = (function() {
    RatsTracker.type = "rats_tracker";

    function RatsTracker(category1, default_data, opts1) {
      this.category = category1;
      this.default_data = default_data != null ? default_data : {};
      this.opts = opts1 != null ? opts1 : {};
    }

    RatsTracker.prototype.send = function(value, label) {
      if (label == null) {
        label = this.category;
      }
      $rat(label, _.extend(this.default_data, value));
      if (this.opts.flush !== false) {
        return $rat.root().flushEvents();
      }
    };

    return RatsTracker;

  })();

  Scribd.track_optimizely = function(event_name) {
    window["optimizely"] || (window["optimizely"] = []);
    Scribd.log("Optimizely trackEvent: " + event_name);
    return window.optimizely.push(["trackEvent", event_name]);
  };


  /*
   *
   *  Below here lives all the old tracking methods (pre May 2015) that used to exist. All should be
   *  traded up to the Scribd.Tracker implementation which you can learn more about here
   *  https://scribdjira.atlassian.net/wiki/display/DEVD/Tracking+Guide
   *
   */

  split_ga_category = Scribd._split_ga_category = function(category) {
    var m, prefix;
    prefix = "";
    if (m = category.match(/^(.*):(.+)$/)) {
      prefix = m[2] + "_";
      category = m[1];
    }
    return [category, prefix];
  };

  Scribd.track_rat_ga_event = function(category, action, value) {
    if (typeof $rat === "function") {
      $rat(category + "." + action, value);
    }
    return typeof $rat !== "undefined" && $rat !== null ? $rat.root().flushEvents() : void 0;
  };

  Scribd.track_event = function(category, action, label, value, interactive) {
    console.info("scribd_tracking: track_event has been deprecated", arguments);
    Scribd.tracker || (Scribd.tracker = new Scribd.Tracker(document));
    return Scribd.tracker.send({
      category: category,
      action: action,
      label: label,
      value: value,
      interactive: interactive
    });
  };

  window.trackEvent = Scribd.track_event;

  Scribd.is_tracker = function(thing) {
    return typeof thing === "function" && thing.is_tracker;
  };

  Scribd.make_tracker = function(category, tracker_opts) {
    if (tracker_opts == null) {
      tracker_opts = {};
    }
    console.info("scribd_tracking: 'make_tracker' is deprecated", arguments);
    return function() {
      return console.info("scribd_tracking: 'make_tracker' is deprecated", arguments);
    };
  };

  $.fn.delegate_tracking = function(event, category_or_tracker) {
    return console.info("delegate_tracking has been deprecated", arguments);
  };

  $.fn.track = function(opts) {
    return this.trigger("scribd:track", [opts]);
  };

  $.fn.track_rats = function(event_name, data) {
    return this.trigger("scribd:track_rats", [event_name, data]);
  };

}).call(this);


/* ----------------------------------------------------------------------
   - public/javascripts/jquery_global/lightbox.coffee (last modified: 2016-07-18 17:23:52 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.Lightbox = (function() {
    Lightbox.prototype.offset_top = 80;

    Lightbox.current_open = null;

    Lightbox.stacked = false;

    Lightbox.initialize = function() {
      return $((function(_this) {
        return function() {
          var icon;
          _this.lightboxes = $("#lightboxes");
          $(document).keydown(function(e) {
            if (e.keyCode !== 27) {
              return;
            }
            if (_this.current_open && _this.current_open.user_closable() && !_this.stacked) {
              _this.close();
              return e.preventDefault();
            }
          });
          _this.lightboxes.on("click", ".close_button, .close_link, .close_lb_btn", function() {
            if (!_this.stacked) {
              return _this.close();
            }
          });
          _this.lightboxes.on("click", function(e) {
            var target;
            target = $(e.target);
            if (target.closest(".lightbox").length) {
              return;
            }
            if (!target.closest(document.body).length) {
              return;
            }
            if (_this.current_open && _this.current_open.user_closable() && !_this.stacked) {
              return _this.close();
            }
          });
          icon = "https://sbx.scribd.com/images/petunia/spinner/spinner_60.gif?1447116782";
          _this.create("loading_lb", {
            content: '<div class="scribd_spinner" data-size="60">'
          });
          $(document).trigger('ScribdLightboxInitialized');
          return typeof Scribd.init_spinners === "function" ? Scribd.init_spinners() : void 0;
        };
      })(this));
    };

    Lightbox.fade_in_overlay = function(opacity, color) {
      if (opacity == null) {
        opacity = 0.5;
      }
      if (color == null) {
        color = "";
      }
      clearTimeout(Lightbox._fade_out_overlay_timeout);
      if (!Lightbox.overlay) {
        Lightbox.overlay = $('<div id="overlay"></div>').hide().appendTo("body").on("click", function() {
          if (Lightbox.current_open && Lightbox.current_open.user_closable()) {
            Lightbox.close();
            return false;
          }
        });
        if ($.browser.webkit) {
          Lightbox.overlay.addClass("chrome_fix");
        }
      }
      Lightbox.overlay.css("background-color", color).show();
      opacity = +opacity;
      return _.defer(function() {
        return Lightbox.overlay.css({
          filter: "alpha(opacity=" + (opacity * 100) + ")",
          opacity: opacity
        });
      });
    };

    Lightbox.fade_out_overlay = function() {
      Lightbox.overlay.css({
        filter: "alpha(opacity=0)",
        opacity: 0,
        "background-color": ""
      });
      return Lightbox._fade_out_overlay_timeout = _.delay(function() {
        return Lightbox.overlay.hide();
      }, 1000);
    };

    Lightbox.create = function(id, options) {
      var existing, lightbox, wrapper;
      if (options == null) {
        options = {};
      }
      existing = $("#" + id);
      if (existing && existing.length) {
        existing.remove();
      }
      options = $.extend({
        close: false
      }, options);
      lightbox = $("<div class=\"lightbox " + (options["class"] || '') + "\" id=\"" + id + "\">\n  <div class=\"wrapper\">\n    <div class=\"content\"></div>\n  </div>\n</div>").hide();
      wrapper = lightbox.find(".wrapper");
      if (options.title) {
        $('<div class="title"></div>').text(options.title).prependTo(wrapper);
      }
      if (options.close) {
        wrapper.prepend('<div class="close_button sprite close"></div>');
      }
      this.lightboxes.append(lightbox);
      if (options.style) {
        lightbox.css(options.style);
      }
      if (options.content) {
        lightbox.find(".content").html(options.content);
      }
      return lightbox;
    };

    Lightbox.open = function() {
      var T, args, html, id, lb, lb_elm, ref;
      id = arguments[0], T = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (T == null) {
        T = Scribd.Lightbox;
      }
      if (this !== Scribd.Lightbox) {
        return (ref = Scribd.Lightbox).open.apply(ref, [id, this].concat(slice.call(args)));
      }
      if (T._is_react_factory) {
        return this.open_react(id, T);
      }
      lb_elm = $("#" + id);
      if (!lb_elm.length) {
        throw "failed to find lightbox: " + id;
      }
      if (lb_elm.is("script")) {
        html = lb_elm.data("template") || lb_elm.html();
        lb_elm = $(html).replaceAll(lb_elm);
        Scribd.init_spinners(lb_elm);
      }
      lb = lb_elm.data("lightbox_obj");
      if (!lb) {
        lb = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(T, [lb_elm].concat(slice.call(args)), function(){});
      }
      lb.id = id;
      lb.show();
      return lb;
    };

    Lightbox.open_react = function(id, component) {
      var el, lightbox, ref;
      el = this.lightboxes.find("#" + id);
      if (!el.length) {
        el = $('<div class="react_lightbox" />').attr("id", id).appendTo(this.lightboxes);
      }
      component = ReactDOM.render(component, el[0]);
      lightbox = (ref = component.state) != null ? ref.lightbox : void 0;
      if (!lightbox) {
        lightbox = new Scribd.Lightbox(component.container(), false);
        component.setState({
          lightbox: lightbox
        });
        if (typeof component.componentLightboxInitialized === "function") {
          component.componentLightboxInitialized();
        }
      }
      lightbox.show();
      return component;
    };

    Lightbox.close = function(fade_out) {
      var old;
      if (fade_out == null) {
        fade_out = true;
      }
      if (!this.current_open) {
        return;
      }
      if (fade_out) {
        this.fade_out_overlay();
      }
      if (old = this.current_open) {
        this.current_open = null;
        old.hide();
        old.container.track({
          action: "click",
          params: "close"
        });
        old.container.trigger("Scribd:lightbox:closed");
        return $(document.body).removeClass("lightbox_open fix_viewport");
      }
    };

    Lightbox.open_from_object = function() {
      var T, args, id, object, ref;
      id = arguments[0], object = arguments[1], T = arguments[2], args = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      if (T == null) {
        T = null;
      }
      if (this !== Scribd.Lightbox) {
        return (ref = Scribd.Lightbox).open_from_object.apply(ref, [id, object, this].concat(slice.call(args)));
      }
      if (id) {
        $("#" + id).remove();
      }
      if ($.type(object) === "string" || object instanceof $) {
        id = $(object).appendTo(this.lightboxes).attr("id") || id;
      } else {
        this.create(id, $.extend({
          close: true
        }, object));
      }
      return this.open.apply(this, [id, T].concat(slice.call(args)));
    };

    Lightbox.remote_open = function(id, url, params, T) {
      var on_error, opts, type;
      if (params == null) {
        params = {};
      }
      if (T == null) {
        T = null;
      }
      if (this !== Scribd.Lightbox) {
        return Scribd.Lightbox.remote_open(id, url, params, this);
      }
      type = "POST";
      if ($.isPlainObject(id)) {
        opts = id;
        id = opts.id, url = opts.url, on_error = opts.on_error;
        T = opts.T || T;
        type = opts.method || type;
        params = opts.params || params;
      }
      if (opts != null ? opts.show_loading : void 0) {
        if (typeof opts.show_loading === "function") {
          opts.show_loading();
        }
      } else {
        this.show_loading();
      }
      return $.ajax({
        url: url,
        data: params,
        type: type,
        dataType: (opts != null ? opts.dataType : void 0) || "html",
        error: on_error,
        success: (function(_this) {
          return function(data) {
            var instance_opts, lb;
            if ($.isPlainObject(data)) {
              instance_opts = data.opts;
            }
            if (data != null ? data.content : void 0) {
              data = data.content;
            } else if (data != null ? data.props : void 0) {
              data = data.props;
            }
            lb = Scribd.Lightbox.open_from_object(id, $(data), T, instance_opts);
            if (opts != null) {
              if (typeof opts.after_open === "function") {
                opts.after_open(lb);
              }
            }
            return typeof Scribd.init_spinners === "function" ? Scribd.init_spinners() : void 0;
          };
        })(this),
        error: (function(_this) {
          return function(xhr, status, err) {
            $(document.body).track({
              category: "errors",
              action: "lightbox",
              label: id + " " + status + ":" + err
            });
            Scribd.Lightbox.close();
            return opts != null ? typeof opts.on_error === "function" ? opts.on_error() : void 0 : void 0;
          };
        })(this)
      });
    };

    Lightbox.show_loading = function() {
      return this.open('loading_lb');
    };

    function Lightbox(container, append) {
      if (append == null) {
        append = true;
      }
      this.set_title = bind(this.set_title, this);
      this.container = $(container).on("scribd:lightbox_reshape", (function(_this) {
        return function() {
          return _this.set_position();
        };
      })(this));
      this.container.data("lightbox_obj", this);
      if (append) {
        if (!this.container.closest(Scribd.Lightbox.lightboxes).length) {
          this.container.appendTo(Scribd.Lightbox.lightboxes);
        }
      }
    }

    Lightbox.prototype.user_closable = function() {
      return this.container.find(".close_button, .close_lb_btn").length > 0;
    };

    Lightbox.prototype.set_title = function(title) {
      var $title;
      $title = this.container.find(".title");
      if (!$title.length) {
        $title = this.container.find(".content").before('<div class="title"></div>').prev(".title");
      }
      return $title.text(title);
    };

    Lightbox.prototype.hide = function(replaced_with_lb) {
      this.show_flash(false);
      return this.container.hide();
    };

    Lightbox.prototype.close = function(fade_out) {
      if (fade_out == null) {
        fade_out = true;
      }
      if (Scribd.Lightbox.current_open === this) {
        return Scribd.Lightbox.close(fade_out);
      }
    };

    Lightbox.prototype.transition = function(old_lb, done) {
      if (old_lb != null) {
        old_lb.hide(this);
      }
      this.container.fadeIn("fast");
      return typeof done === "function" ? done() : void 0;
    };

    Lightbox.prototype.show_flash = function(msg, type, clear_in) {
      if (msg == null) {
        msg = false;
      }
      if (type == null) {
        type = '';
      }
      if (clear_in == null) {
        clear_in = 3000;
      }
      this.flash = this.container.find('.inline_flash');
      if (msg === false) {
        this.flash.stop().slideUp();
        return;
      }
      this.flash.text(msg).removeClass("error success").addClass(type).slideDown();
      if (clear_in) {
        return setTimeout((function(_this) {
          return function() {
            return _this.flash.slideUp(function() {
              return $(this).hide();
            });
          };
        })(this), clear_in);
      }
    };

    Lightbox.prototype.show = function() {
      var bgcolor, old_lb, opacity;
      if (Scribd.Lightbox.current_open === this) {
        return;
      }
      bgcolor = this.container.data("overlay_color");
      opacity = this.container.data("overlay_opacity");
      $(document.body).addClass("lightbox_open").toggleClass("fix_viewport", this.container.is(".fix_viewport"));
      Scribd.Lightbox.fade_in_overlay(opacity, bgcolor || "");
      this.set_position();
      old_lb = Scribd.Lightbox.current_open;
      Scribd.Lightbox.current_open = this;
      this.transition(old_lb, (function(_this) {
        return function() {
          return old_lb != null ? old_lb.container.trigger("Scribd:lightbox:closed") : void 0;
        };
      })(this));
      return this.after_show();
    };

    Lightbox.prototype.show_responsive = function() {
      return $(document.body).is(".responsive") && $(window).width() <= 600;
    };

    Lightbox.prototype.set_position = function() {
      var css, responsive, top, win;
      responsive = this.show_responsive();
      this.container.toggleClass("responsive", responsive);
      if (responsive) {
        return this.container.css({
          margin: "0",
          position: "static",
          width: "100%"
        });
      } else {
        win = $(window);
        top = this.container.is(".vertically_centered") ? Math.max(10, Math.floor((win.height() - this.container.outerHeight()) / 2)) : this.offset_top;
        css = {
          top: top
        };
        if (!this.container.hasClass("auto_center")) {
          css.left = "50%";
          css.marginLeft = -(this.container.width() / 2);
        }
        return this.container.css(css);
      }
    };

    Lightbox.prototype.after_show = function() {};

    return Lightbox;

  })();

  Scribd.StackedLightbox = (function(superClass) {
    extend(StackedLightbox, superClass);

    StackedLightbox.instances = [];

    StackedLightbox.show_overlay = function() {
      StackedLightbox.overlay || (StackedLightbox.overlay = StackedLightbox.add_overlay());
      StackedLightbox.overlay.show().css("opacity", "0.5");
      return Scribd.Lightbox.stacked = true;
    };

    StackedLightbox.hide_overlay = function() {
      StackedLightbox.overlay.css("opacity", "0").hide();
      return _.defer(function() {
        if (!StackedLightbox.instances.length) {
          return Scribd.Lightbox.stacked = false;
        }
      });
    };

    StackedLightbox.add_overlay = function() {
      StackedLightbox.overlay = $('<div class="stacked_overlay"></div>').prependTo("#lightboxes").hide().click(function() {
        var ref;
        return (ref = Scribd.StackedLightbox.instances[Scribd.StackedLightbox.instances.length - 1]) != null ? ref.close() : void 0;
      });
      return StackedLightbox.overlay;
    };

    function StackedLightbox(container1, opts1) {
      this.container = container1;
      this.opts = opts1;
      this.close = bind(this.close, this);
      StackedLightbox.__super__.constructor.apply(this, arguments);
      this.container.addClass("stacked_lightbox");
      Scribd.StackedLightbox.instances.push(this);
      this.setup_events();
    }

    StackedLightbox.prototype.open = function() {
      this.container.fadeIn("fast");
      Scribd.StackedLightbox.show_overlay();
      return this.set_position();
    };

    StackedLightbox.prototype.show = function() {
      return this.open();
    };

    StackedLightbox.prototype.close = function() {
      this.container.fadeOut("fast");
      Scribd.StackedLightbox.hide_overlay();
      if (!Scribd.StackedLightbox.instances.length) {
        $(document).off("keydown.stacked_lightbox_close");
      }
      return Scribd.StackedLightbox.instances.pop();
    };

    StackedLightbox.prototype.setup_events = function() {
      $(document).on("keydown.stacked_lightbox_close", (function(_this) {
        return function(e) {
          if (e.keyCode === 27) {
            return _this.close();
          }
        };
      })(this));
      return this.container.dispatch("click", {
        close_button: this.close
      });
    };

    StackedLightbox.prototype.another_lightbox_is_open = function() {
      return Scribd.Lightbox.current_open || $("#lightboxes .overlay:visible, #lightboxes .stacked_overlay:visible").length;
    };

    return StackedLightbox;

  })(Scribd.Lightbox);

}).call(this);


/* ----------------------------------------------------------------------
   - public/javascripts/newhome/sliding.coffee (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.PageDots = (function() {
    PageDots.prototype.dot_size = 12;

    PageDots.prototype.template = "<div class=\"page_picker\">\n  <div class=\"fill\"></div>\n  <div class=\"dots\"></div>\n</div>";

    PageDots.prototype.update_fill = function() {
      return this.fill.stop().animate({
        left: ((this.current_page - 1) * this.dot_size * this.per_page) + "px",
        width: (this.per_page * this.dot_size) + "px"
      }, "fast");
    };

    PageDots.prototype.goto_page = function(current_page) {
      this.current_page = current_page;
      return this.update_fill();
    };

    PageDots.prototype.is_first = function() {
      return this.current_page === 1;
    };

    PageDots.prototype.is_last = function() {
      return this.current_page === this.total_pages;
    };

    function PageDots(total_pages, per_page) {
      this.total_pages = total_pages;
      this.per_page = per_page != null ? per_page : 1;
      this.container = $(this.template).css({
        width: (this.total_pages * this.dot_size * this.per_page) + "px"
      });
      this.fill = this.container.find(".fill");
      this.current_page = 1;
      this.update_fill();
    }

    return PageDots;

  })();

  Scribd.UI.SlidingList = (function() {
    SlidingList.prototype.speed = "fast";

    SlidingList.prototype.PageDots = Scribd.UI.PageDots;

    SlidingList.prototype.calculate_pages = function() {
      var child, inner_width, j, len, ref;
      this.calculate_height();
      inner_width = 0;
      ref = this.sliding.children();
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        inner_width += $(child).outerWidth(true);
      }
      this.sliding.width(inner_width);
      this.page_width = this.sliding.parent().width();
      return this.num_pages = Math.ceil(inner_width / this.page_width);
    };

    SlidingList.prototype.calculate_height = function() {
      return this.list_content.height(this.sliding.find(".document_cell:first").outerHeight(true));
    };

    function SlidingList(container) {
      this.container = $(container);
      this.container.data("list", this);
      this.sliding = this.container.find(".sliding_content");
      this.list_content = this.container.find(".list_content");
      this.page = 1;
      this.calculate_pages();
      if (this.num_pages > 1 && this.PageDots) {
        this.dots = new this.PageDots(this.num_pages);
        this.container.find(".list_dots").append(this.dots.container);
      }
      this.goto_page(1);
    }

    SlidingList.prototype.page_left = function() {
      return this.goto_page((this.page - 2 + this.num_pages) % this.num_pages + 1);
    };

    SlidingList.prototype.page_right = function() {
      return this.goto_page(this.page % this.num_pages + 1);
    };

    SlidingList.prototype.page_offset = function(page) {
      return this.page_width * (page - 1);
    };

    SlidingList.prototype.goto_page = function(i) {
      var page, ref;
      page = Math.max(1, Math.min(this.num_pages, i));
      this.sliding.animate({
        marginLeft: -this.page_offset(page)
      }, this.speed);
      if ((ref = this.dots) != null) {
        ref.goto_page(page);
      }
      this.page = page;
      return this.container.toggleClass("on_first_page", page === 1).toggleClass("on_last_page", page === this.num_pages);
    };

    return SlidingList;

  })();

}).call(this);




/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2015-11-10 00:53:08 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/embeds/document_list.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.UI.DocumentList = (function(superClass) {
    extend(DocumentList, superClass);

    DocumentList.setup_lists = function(elms) {
      var j, l, len, list, recalc;
      if (this.lists) {
        for (j = 0, len = elms.length; j < len; j++) {
          list = elms[j];
          l = new this($(list));
          l.recalculate();
          this.lists.push(l);
        }
        return this.lists;
      }
      this.lists = (function() {
        var k, len1, results;
        results = [];
        for (k = 0, len1 = elms.length; k < len1; k++) {
          list = elms[k];
          results.push(new this($(list)));
        }
        return results;
      }).call(this);
      recalc = _.debounce((function(_this) {
        return function() {
          var k, len1, ref, results;
          ref = _this.lists;
          results = [];
          for (k = 0, len1 = ref.length; k < len1; k++) {
            list = ref[k];
            results.push(list.recalculate());
          }
          return results;
        };
      })(this), 100);
      $(window).on("resize", recalc);
      $(document.body).on("Scribd:recalculate", recalc);
      recalc();
      return this.lists;
    };

    DocumentList.prototype.items_per_page = 3;

    DocumentList.prototype.PageDots = false;

    DocumentList.prototype.calculate_pages = function() {
      var child, item_width, j, len, ref, rem;
      this.calculate_height();
      this.inner_width = 0;
      ref = this.sliding.children();
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        this.inner_width += $(child).outerWidth(true);
      }
      this.sliding.width(this.inner_width);
      this.outer_width = this.list_content.width();
      item_width = this.sliding.children(":first").outerWidth(true);
      this.page_width = item_width * this.items_per_page;
      rem = this.inner_width - this.outer_width;
      return this.num_pages = rem > 0 ? 1 + Math.ceil((this.inner_width - this.outer_width) / this.page_width) : 1;
    };

    DocumentList.prototype.recalculate = function() {
      this.calculate_pages();
      this.container.toggleClass("on_last_page", this.page === this.num_pages);
      return this.show_visible_images();
    };

    DocumentList.prototype.page_offset = function() {
      var offset;
      offset = DocumentList.__super__.page_offset.apply(this, arguments);
      return Math.min(offset, Math.max(this.inner_width - this.outer_width, 0));
    };

    DocumentList.prototype.goto_page = function() {
      DocumentList.__super__.goto_page.apply(this, arguments);
      return this.show_visible_images();
    };

    DocumentList.prototype.show_visible_images = function() {
      var cell, i, j, max_edge, offset, ref, ref1;
      if (this.cell_offsets) {
        max_edge = this.page_offset(this.page) + this.outer_width;
        for (i = j = ref = this.cell_offsets.length - 1; j >= 0; i = j += -1) {
          ref1 = this.cell_offsets[i], offset = ref1[0], cell = ref1[1];
          if (offset < max_edge) {
            this.show_image(cell);
            this.cell_offsets.pop();
          } else {
            break;
          }
        }
        if (!this.cell_offsets.length) {
          return delete this.cell_offsets;
        }
      }
    };

    DocumentList.prototype.show_image = function(cell) {
      var thumb, thumb_url;
      thumb = cell.find(".thumb");
      if (thumb_url = thumb.data("thumb_url")) {
        thumb.removeData("thumb_url");
        if (window.location.hash.match(/\bdebug_images\b/)) {
          thumb.css({
            backgroundColor: "red"
          });
          return setTimeout(function() {
            return thumb.css({
              backgroundImage: "url('" + thumb_url + "')"
            });
          }, 500);
        } else {
          return thumb.css({
            backgroundImage: "url('" + thumb_url + "')"
          });
        }
      }
    };

    DocumentList.prototype.enable_images = function() {
      var cell;
      if (!this.container.data("lazy_images")) {
        return;
      }
      this.container.data("lazy_images", false);
      this.cell_offsets = (function() {
        var j, len, ref, results;
        ref = this.container.find(".document_cell");
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          cell = ref[j];
          results.push((function(cell) {
            cell = $(cell);
            return [cell.position().left, cell];
          })(cell));
        }
        return results;
      }).call(this);
      this.cell_offsets.reverse();
      return this.show_visible_images();
    };

    function DocumentList() {
      var scroll_handler, top, win;
      DocumentList.__super__.constructor.apply(this, arguments);
      if (this.container.data("lazy_images")) {
        top = this.container.offset().top;
        win = $(window);
        scroll_handler = (function(_this) {
          return function() {
            if (win.scrollTop() + win.height() > top) {
              _this.enable_images();
              return win.off("scroll resize", scroll_handler);
            }
          };
        })(this);
        win.on("scroll resize", scroll_handler);
        _.defer(scroll_handler);
      }
      this.container.dispatch("click", {
        page_left: (function(_this) {
          return function() {
            return _this.page_left();
          };
        })(this),
        page_right: (function(_this) {
          return function() {
            return _this.page_right();
          };
        })(this)
      });
    }

    return DocumentList;

  })(Scribd.UI.SlidingList);

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-08 22:43:32 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/embeds/content.coffee (last modified: 2016-01-21 00:24:17 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var base, click_event, iframe_click,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.Embeds || (Scribd.Embeds = {});

  (base = Scribd.Embeds).Content || (base.Content = {});

  click_event = function(selector, callback) {
    if (typeof TouchGestures !== "undefined") {
      return $.each(selector, function(i, el) {
        return TouchGestures.clickWithNoDelay(el, callback);
      });
    }
  };

  iframe_click = function(selector, callback) {
    var inside_iframe;
    inside_iframe = false;
    $(document.body).on('mouseenter', selector, function() {
      return inside_iframe = true;
    });
    $(document.body).on('mouseleave', selector, function() {
      return inside_iframe = false;
    });
    return $(window).blur(function() {
      if (inside_iframe) {
        return callback();
      }
    });
  };

  Scribd.Embeds.Content = (function() {
    Content.prototype.iframe = null;

    Content.prototype.docManager = null;

    Content.prototype.defaultWidth = null;

    Content.prototype.view_modes = ["scroll", "slideshow", "book"];

    Content.prototype.collapsed = false;

    function Content(options) {
      this.options = options;
      this.sizeDocument = bind(this.sizeDocument, this);
      this.pageNumberChange = bind(this.pageNumberChange, this);
      this.onIframeLoad = bind(this.onIframeLoad, this);
      this.updatePageNumberDisplay = bind(this.updatePageNumberDisplay, this);
      this.options.start_page = parseInt(this.options.start_page, 10);
      window.onIframeLoad = this.onIframeLoad;
      $(document).ready((function(_this) {
        return function(e) {
          if (_this.options.branded_logo) {
            $("#document_content").css("top", "35px");
          }
          $("ul .expandable_button").show();
          if (window.location.pathname.indexOf("fullscreen") === 1) {
            $("ul #fullscreen").hide();
          } else {
            $("ul #exit_fullscreen").hide();
          }
          return _this.sizeToolbar();
        };
      })(this));
    }

    Content.prototype.updatePageNumberDisplay = function() {
      var pageId, value, width;
      pageId = this.docManager.currentPageNum();
      value = void 0;
      if (this.docManager.viewMode() === "book") {
        if (pageId % 2 === 1) {
          pageId -= 1;
        }
        if (pageId === 0) {
          value = 1;
        } else if (pageId + 1 > this.docManager.maximumPageNumber()) {
          value = this.docManager.maximumPageNumber();
        } else {
          value = pageId + "-" + (pageId + 1);
        }
      } else {
        value = pageId;
      }
      if (value) {
        value = value.toString();
        $("#current_page").val(value);
        width = 18 + 7 * value.length;
        return $("#current_page").css("width", width + "px");
      }
    };

    Content.prototype.onIframeLoad = function() {
      var calcStemPosition, doc_id, resizedElement;
      this.iframe = window.frames.document_iframe;
      window.docManager = this.iframe.docManager;
      this.docManager = this.iframe.docManager;
      $(this.iframe).click(function(e) {
        return Scribd.Lightbox.close();
      });
      click_event([document], function(e) {
        if (!$(e).closest(".lightbox")) {
          return Scribd.Lightbox.close();
        }
      });
      if (this.options.from_jsapi) {
        this._socket = new easyXDM.Socket({
          onMessage: (function(_this) {
            return function(message, origin) {
              if (message) {
                message = message.split(":");
                if (message[0] === "page") {
                  return _this.docManager.gotoPage(parseInt(message[1], 10));
                } else if (message[0] === "zoom") {
                  _this.docManager._currentViewManager.resetZoom();
                  return _this.docManager._currentViewManager.zoom(message[1]);
                }
              }
            };
          })(this)
        });
      }
      if ($("[data-action=share]").length !== 0) {
        this.shareWidget = new Scribd.Embeds.Share();
      }
      if ($("[data-action=embed_code]").length !== 0) {
        this.embedCodeWidget = new Scribd.Embeds.EmbedCode(this.options.document);
      }
      this.docManager.options.extrasWidth = 0;
      this.iframe.$("#document_container").show();
      this.setViewMode(this.options.view_mode);
      this.setArrowStates();
      this.docManager.addEvent("expectedFirstPageChanged", (function(_this) {
        return function() {
          _this.updatePageNumberDisplay();
          if (_this._socket) {
            _this._socket.postMessage("page:" + _this.docManager.currentPageNum());
          }
          return _this.setArrowStates();
        };
      })(this));
      this.docManager.addEvent("zoomed", (function(_this) {
        return function() {
          if (_this._socket) {
            return _this._socket.postMessage("zoom:" + _this.docManager._currentViewManager._currentZoomMultiplier);
          }
        };
      })(this));
      this.updatePageNumberDisplay();
      $("#current_page").on("change", this.pageNumberChange);
      $("#pages form").submit(this.pageNumberChange);
      click_event($(".logo"), function(e) {
        return $(document.body).track_rats("embed:logo:click");
      });
      doc_id = this.options.document.id;
      click_event($("[data-action=download]"), function(e) {
        $(document.body).track_rats("embed:download:click");
        $.ajax("https://sbx.scribd.com/document_downloads/register_download_attempt", {
          type: "post",
          data: {
            doc_id: doc_id,
            next_screen: "embed_download",
            source: "embed"
          }
        });
        $("<iframe></iframe>").attr({
          src: this.href,
          style: "visibility: hidden; display: none;"
        }).appendTo($(document.body));
        return false;
      });
      iframe_click(".fb_sb iframe", function() {
        return $(document.body).track_rats("embed:share_facebook:click");
      });
      iframe_click(".gplus iframe", function() {
        return $(document.body).track_rats("embed:share_googleplus:click");
      });
      iframe_click(".twitter iframe", function() {
        return $(document.body).track_rats("embed:share_twitter:click");
      });
      $(document.body).on("click", ".html5_embed_code", function() {
        return $(document.body).track_rats("embed:embed_code:click");
      });
      click_event($("#current_page"), function(e) {
        return $(document.body).track_rats("embed:page_num_box:click");
      });
      $.each([$("[data-action=down]"), this.iframe.$("#right_hotspot")], (function(_this) {
        return function(i, selector) {
          return click_event(selector, function(e) {
            $(document.body).track_rats("embed:next_page:click");
            _this.docManager.gotoNextPage();
            Scribd.Lightbox.close();
            return e.preventDefault();
          });
        };
      })(this));
      $.each([$("[data-action=up]"), this.iframe.$("#left_hotspot")], (function(_this) {
        return function(i, selector) {
          return click_event(selector, function(e) {
            $(document.body).track_rats("embed:previous_page:click");
            _this.docManager.gotoPreviousPage();
            Scribd.Lightbox.close();
            return e.preventDefault();
          });
        };
      })(this));
      click_event($("[data-action=first_page]"), (function(_this) {
        return function(e) {
          $(document.body).track_rats("embed:first_page:click");
          _this.docManager.gotoPage(_this.docManager.minimumPageNumber());
          Scribd.Lightbox.close();
          return e.preventDefault();
        };
      })(this));
      click_event($("[data-action=last_page]"), (function(_this) {
        return function(e) {
          var page_num;
          $(document.body).track_rats("embed:last_page:click");
          page_num = _this.docManager.gotoPage(_this.docManager.maximumPageNumber());
          Scribd.Lightbox.close();
          return e.preventDefault();
        };
      })(this));
      click_event($("[data-action=zoom_in]"), (function(_this) {
        return function(e) {
          $(document.body).track_rats("embed:zoom_in:click");
          _this.docManager.zoom(1.25);
          return e.preventDefault();
        };
      })(this));
      click_event($("[data-action=zoom_out]"), (function(_this) {
        return function(e) {
          $(document.body).track_rats("embed:zoom_out:click");
          _this.docManager.zoom(.8);
          return e.preventDefault();
        };
      })(this));
      calcStemPosition = function(e) {
        var link, offset, target, width;
        target = $(e.target);
        link = target.is("a") ? target : target.closest("a");
        offset = link.offset();
        width = link.outerWidth();
        return {
          left: offset.left + Math.round(width / 2),
          top: offset.top + 12
        };
      };
      click_event($("[data-action=share]"), (function(_this) {
        return function(e) {
          $(document.body).track_rats("embed:share:click");
          $(".fb-like").children().css({
            "width": "70px",
            "height": "20px"
          }).children().css({
            "width": "70px",
            "height": "20px"
          });
          _this.shareWidget.toggle(calcStemPosition(e));
          return e.preventDefault();
        };
      })(this));
      click_event($("[data-action=embed_code]"), (function(_this) {
        return function(e) {
          $(document.body).track_rats("embed:embed_btn:click");
          _this.embedCodeWidget.toggle(calcStemPosition(e));
          return e.preventDefault();
        };
      })(this));
      click_event($("[data-action=fullscreen]"), function(e) {
        return $(document.body).track_rats("embed:fullscreen:click", {
          action: "enter"
        });
      });
      click_event($("[data-action=exit_fullscreen]"), function(e) {
        $(document.body).track_rats("embed:fullscreen:click", {
          action: "exit"
        });
        return history.go(-1);
      });
      $.each([$(document), $(this.iframe.document.body)], (function(_this) {
        return function(i, elem) {
          return elem.keydown(function(e) {
            var view_mode;
            view_mode = _this.docManager.viewMode();
            if (view_mode === "slideshow") {
              if (e.keyCode === 39) {
                return _this.docManager.gotoNextPage();
              } else if (e.keyCode === 37) {
                return _this.docManager.gotoPreviousPage();
              }
            }
          });
        };
      })(this));
      if (this.options.start_page && this.options.start_page !== 1) {
        _.defer((function(_this) {
          return function() {
            return _this.docManager.gotoPage(_this.options.start_page);
          };
        })(this));
      }
      if (this._socket) {
        this._socket.postMessage("docReady");
      }
      $(document.body).track_rats("embed:view", {
        rec_bar: $(".recommendations_container").length > 0,
        width: $(window).width(),
        height: $(window).height()
      });
      resizedElement = document.onresize ? document : window;
      $(resizedElement).on("resize", (function(_this) {
        return function(e) {
          var ref;
          _this.sizeToolbar();
          _this.sizeDocument();
          return (ref = _this.rec_docs) != null ? ref.size_recommendations_page() : void 0;
        };
      })(this));
      $(this.iframe).one("scroll", function() {
        return $(document.body).track_rats("embed:scroll");
      });
      $(this.iframe).on("scroll.end", (function(_this) {
        return function() {
          var current_page;
          current_page = parseInt($("#current_page").val(), 10);
          if (current_page === _this.docManager.maximumPageNumber()) {
            $(_this.iframe).off("scroll.end");
            return $(document.body).track_rats("embed:scroll_end");
          }
        };
      })(this));
      if ($(".recommendations_container").length) {
        return this.rec_docs = new Scribd.RecommendedDocuments($(".recommendations_container"), this.docManager);
      }
    };

    Content.prototype.pageNumberChange = function(e) {
      var page_num;
      e.stopPropagation();
      e.preventDefault();
      page_num = parseInt($("#current_page").val(), 10);
      if (!page_num) {
        return false;
      }
      page_num = Math.max(page_num, this.docManager.minimumPageNumber());
      page_num = Math.min(page_num, this.docManager.maximumPageNumber());
      this.docManager.gotoPage(page_num);
      return false;
    };

    Content.prototype.setArrowStates = function() {
      if (this.docManager.currentPageNum() === 1) {
        $("[data-action=up]").addClass("inactive");
        $("[data-action=first_page]").addClass("inactive");
      } else {
        $("[data-action=up]").removeClass("inactive");
        $("[data-action=first_page]").removeClass("inactive");
      }
      if (this.docManager.currentPageNum() === this.options.page_count) {
        $("[data-action=down]").addClass("inactive");
        return $("[data-action=last_page]").addClass("inactive");
      } else {
        $("[data-action=down]").removeClass("inactive");
        return $("[data-action=last_page]").removeClass("inactive");
      }
    };

    Content.prototype.setViewMode = function(view_mode) {
      this.view_mode = view_mode;
      return this.docManager.setViewManager(view_mode, (function(_this) {
        return function() {
          _this.sizeDocument();
          _this.docManager.zoom(1);
          if (view_mode === "slideshow" || view_mode === "book") {
            _this.iframe.$("#left_hotspot").show();
            return _this.iframe.$("#right_hotspot").show();
          } else {
            _this.iframe.$("#left_hotspot").hide();
            return _this.iframe.$("#right_hotspot").hide();
          }
        };
      })(this));
    };

    Content.prototype.sizeToolbar = function() {
      var COLLAPSE_THRESHOLD, EXPAND_THRESHOLD, collapsable, expandable, find_collapsable, find_collapsing_elements, find_expandable, space_remaining;
      COLLAPSE_THRESHOLD = 30;
      EXPAND_THRESHOLD = 100;
      space_remaining = (function(_this) {
        return function() {
          var gap, left, left_gap_x, right, right_gap_x;
          left = $("#buttons_left");
          right = $("#buttons_right");
          left_gap_x = left.offset().left + left.width();
          right_gap_x = right.offset().left;
          gap = right_gap_x - left_gap_x;
          if (_this.options.view_mode === "slideshow" || _this.options.view_mode === "book") {
            gap -= $("#pagination_container").width();
          }
          return gap;
        };
      })(this);
      find_collapsing_elements = function() {
        return [$('.logo'), $('.embed_code'), $('.share'), $('.download'), $('.buy_button'), $('.barnes_noble_buy_button'), $('.amazon_buy_button'), $('#pagination_container'), $('#pages')];
      };
      find_expandable = function() {
        var el, is_expandable, j, len, ref, results;
        is_expandable = function(el) {
          return el.length !== 0 && el.hasClass("collapsed");
        };
        ref = find_collapsing_elements();
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          el = ref[j];
          if (is_expandable(el)) {
            results.push(el);
          }
        }
        return results;
      };
      find_collapsable = function() {
        var el, is_collapsible, j, len, ref, results;
        is_collapsible = function(el) {
          return el.length !== 0 && !el.hasClass("collapsed");
        };
        ref = find_collapsing_elements();
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          el = ref[j];
          if (is_collapsible(el)) {
            results.push(el);
          }
        }
        return results;
      };
      while (space_remaining() < COLLAPSE_THRESHOLD) {
        collapsable = find_collapsable();
        if (collapsable.length > 0) {
          collapsable[0].addClass("collapsed");
        } else {
          break;
        }
      }
      while (space_remaining() > EXPAND_THRESHOLD) {
        expandable = find_expandable();
        if (expandable.length > 0) {
          expandable[expandable.length - 1].removeClass("collapsed");
        } else {
          break;
        }
      }
      return $(".padding_wrapper").css({
        padding: "0 " + ($("#buttons_left").width()) + "px"
      });
    };

    Content.prototype.sizeDocument = function() {
      var current_page, expected_height, marginHeightCompensate, marginWidthCompensate, page_height, page_width, ratio, target_width;
      marginWidthCompensate = $.browser.msie && ($.browser.version === "7.0" || $.browser.version === "6.0") ? 56 : 52;
      marginHeightCompensate = $.browser.msie ? 55 : 45;
      if (this.options.view_mode === "slideshow" || this.options.view_mode === "book") {
        target_width = void 0;
        current_page = this.docManager.pages[this.docManager.currentPageNum()];
        ratio = current_page.origHeight / current_page.origWidth;
        if (this.options.view_mode === "book") {
          ratio /= 2;
        }
        page_width = $(document).width();
        page_height = $("#document_content").height();
        expected_height = ratio * page_width;
        if (expected_height > page_height) {
          target_width = (1 / ratio) * (page_height - marginHeightCompensate);
        } else {
          target_width = page_width - marginWidthCompensate;
        }
        this.defaultWidth = target_width;
      } else {
        this.defaultWidth = $(document).width() - marginWidthCompensate;
      }
      this.docManager.setDefaultWidth(this.defaultWidth);
      if (this.view_mode === "scroll") {
        return this.docManager._currentViewManager.checkAndUpdateVisiblePages();
      }
    };

    return Content;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/embeds/_recommendations.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.RecommendationsNag = (function() {
    function RecommendationsNag(container, click_callback) {
      this.click_callback = click_callback;
      this.container = $(container);
      this.opened_nag = false;
      this.container.slideDown();
      this.container.on("click", ".sprite.close", (function(_this) {
        return function(e) {
          if (_this.container.hasClass("stick_to_top")) {
            _this.click_callback();
            _this.container.toggleClass("stick_to_top");
          } else {
            $(document.body).track_rats("embed:rec_bar_dismiss:click");
            _this.container.slideUp();
          }
          return false;
        };
      })(this));
      this.container.on("click", (function(_this) {
        return function(e) {
          _this.click_callback();
          _this.container.toggleClass("stick_to_top");
          return _this.container.parent().toggleClass("stick_to_top");
        };
      })(this));
    }

    return RecommendationsNag;

  })();

  Scribd.RecommendedDocuments = (function() {
    function RecommendedDocuments(container, docManager) {
      var Exception, anchor, error, i, j, k, len, len1, list, ref, ref1;
      this.docManager = docManager;
      this.size_recommendations_page = bind(this.size_recommendations_page, this);
      this.toggle_visibility = bind(this.toggle_visibility, this);
      if (Scribd.parse_parameters(document.location.search.replace("?", "")).show_recommendations === "false") {
        return;
      }
      this.container = $(container);
      this.page_el = this.container.find(".recommendations_page");
      this.size_recommendations_page();
      this.list_number = 0;
      this.container;
      try {
        this.parse_raw_js_data();
      } catch (error) {
        Exception = error;
        console.log("Error parsing js:" + Exception);
      }
      if (this.recommended_docs.length) {
        this.container.find('.sliding_content.related_documents').html(this.document_list_HTML(this.recommended_docs));
        this.container.find('.related_documents').show();
      } else if (!this.user_docs.length) {
        return;
      } else {
        this.container.find('.related_documents').hide();
      }
      if (this.user_docs.length) {
        this.container.find('.sliding_content.user_documents').html(this.document_list_HTML(this.user_docs));
        this.container.find('.user_documents').show();
      } else {
        this.container.find('.user_documents').hide();
      }
      this.container.on('click', '.document_cell', (function(_this) {
        return function(e) {
          var doc, doc_id, loc;
          doc = $(e.target).closest('[data-docid]');
          doc_id = doc.data("docid");
          if (doc.parents(".user_documents").length > 0) {
            loc = "uploader";
          } else {
            loc = "browse_more";
          }
          return $(document.body).track_rats("embed:rec_bar_content:click", {
            doc_id: doc_id,
            loc: loc
          });
        };
      })(this));
      this.lists = Scribd.UI.DocumentList.setup_lists(this.container.find(".document_list"));
      ref = this.lists;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        list = ref[i];
        this.setup_pagination(list, i);
      }
      this.resize_images();
      ref1 = this.container.find(".document_title a");
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        anchor = ref1[k];
        $(anchor).html($(anchor).text());
      }
      this.rec_nags = new Scribd.RecommendationsNag($(".recommendations_nag"), this.toggle_visibility);
      window.rec_nags = this.rec_nags;
    }

    RecommendedDocuments.prototype.toggle_visibility = function(hide) {
      var action;
      if (hide) {
        return this.page_el.slideDown()({
          complete: function() {
            return this.page_el.removeClass("stick_to_top");
          }
        });
      } else {
        if (this.container.find(".open_recommendations:visible").length > 0) {
          action = "hide";
        } else {
          action = "show";
        }
        $(document.body).track_rats("embed:rec_bar:click", {
          action: action
        });
        return this.page_el.slideToggle("400", (function(_this) {
          return function() {
            var i, j, len, list, ref, results;
            ref = _this.lists;
            results = [];
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
              list = ref[i];
              results.push(list.recalculate());
            }
            return results;
          };
        })(this));
      }
    };

    RecommendedDocuments.prototype.setup_pagination = function(list, index) {
      var pag_el;
      pag_el = $(this.container.find(".pagination").get(index));
      pag_el.on("click", ".previous", (function(_this) {
        return function(e) {
          e.preventDefault();
          return list.page_left();
        };
      })(this));
      return pag_el.on("click", ".next", (function(_this) {
        return function(e) {
          e.preventDefault();
          return list.page_right();
        };
      })(this));
    };

    RecommendedDocuments.prototype.parse_raw_js_data = function() {
      var recommended_docs, user_docs;
      this.recommended_docs = [];
      this.user_docs = [];
      recommended_docs = JSON.parse($('#recommended_documents_blob').html());
      user_docs = JSON.parse($('#user_documents_blob').html());
      _.each(recommended_docs, (function(_this) {
        return function(el) {
          el.type = "recommendation";
          return _this.recommended_docs.push(el);
        };
      })(this));
      return _.each(user_docs, (function(_this) {
        return function(el) {
          el.type = "user_related";
          return _this.user_docs.push(el);
        };
      })(this));
    };

    RecommendedDocuments.prototype.document_list_HTML = function(documents) {
      var doc, html, j, len;
      html = [];
      for (j = 0, len = documents.length; j < len; j++) {
        doc = documents[j];
        html.push(_.template(Scribd.RecommendedDocuments.document_template, doc));
      }
      return html.join("");
    };

    RecommendedDocuments.prototype.size_recommendations_page = function() {
      var fake_page, nag_offset, rec_doc_content;
      fake_page = $(".recommendations_container");
      nag_offset = $(".recommendations_nag").height();
      fake_page.css('max-height', $(window).height() - nag_offset);
      rec_doc_content = fake_page.find(".recommendations_page");
      rec_doc_content.height(Math.max(770, $(window).height()));
      return this.resize_images();
    };

    RecommendedDocuments.prototype.resize_images = function(width) {
      var doc, j, k, len, len1, ref, ref1;
      width = $(document).width();
      if (width > 600) {
        ref = this.container.find('.document_cell.thumb');
        for (j = 0, len = ref.length; j < len; j++) {
          doc = ref[j];
          doc = $(doc);
          doc.addClass("big_image");
          doc.removeClass("small_image");
          doc.css("background-url", doc.attr("data-large-img-url"));
        }
        return this.container.find(".document_cell.object_cell").removeClass("small");
      } else {
        ref1 = this.container.find('.document_cell .thumb');
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          doc = ref1[k];
          doc = $(doc);
          doc.addClass("small_image");
          doc.removeClass("big_image");
          doc.css("background-url", doc.attr("data-small-img-url"));
        }
        return this.container.find(".document_cell.object_cell").addClass("small");
      }
    };

    return RecommendedDocuments;

  })();

  Scribd.RecommendedDocuments.document_template = "<div class=\"document_cell object_cell\">\n  <a href=\"/doc/{{ document.id }}\" target=\"_blank\" data-track= \"document_type:{{type}}\">\n    <div data-docid= {{document.id}} class=\"thumb\" data-large-img-url=\"{{document.large_embed_image_url}}\" data-small-img-url=\"{{document.small_embed_image_url}}\" style=\"background-image: url({{document.large_embed_image_url}})\">\n      <div class=\"overlay\"></div>\n    </div>\n  </a>\n  <div class=\"below_cell_data\">\n    <div class=\"document_title2\"><a href=\"/doc/{{document.id}}\">{{ document.title }}</a></div>\n    <div class=\"document_author2\"><a href=\"{{document.word_user_url}}\">{{ document.word_user_name}}</a></div>\n  </div>\n</div>";

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

