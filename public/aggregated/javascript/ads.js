/************************************************************************
 * 'ads.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:09 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - public/javascripts/ads/base.coffee (last modified: 2016-03-15 18:30:15 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var parse_unit_size,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  if (window.Scribd == null) {
    window.Scribd = {};
  }

  if (Scribd.Ads == null) {
    Scribd.Ads = {};
  }

  Scribd.Ads.attributes = {};

  Scribd.Ads.queued_for_display = {};

  Scribd.Ads.units_displayed = {};

  parse_unit_size = function(name) {
    return name.match(/.*_(\d+)x(\d+)/).slice(1).map(function(d) {
      return parseInt(d, 10);
    });
  };

  Scribd.Ads.deferred = function() {
    return this._deferred || (this._deferred = $.Deferred((function(_this) {
      return function(d) {
        d.done(function() {
          return _this.gpt_loaded = true;
        });
        return d.fail(function() {
          return $(document.body).addClass("ads_disabled");
        });
      };
    })(this)));
  };

  Scribd.Ads.initialize = function(opts) {
    var attributes, i, k, len, ref, units, v;
    units = opts.units, attributes = opts.attributes, this.account_prefix = opts.account_prefix, this.debug_placeholders = opts.debug_placeholders;
    if (!googletag) {
      return;
    }
    this.setAdLayouts();
    this.adUnits = units;
    this.enabled = this.attributes.AdLayout[0] !== 0 && document.location.protocol !== "https";
    if (this.enabled && Scribd.nway_test_choice_value("doc_page_ads") === "disable") {
      this.enabled = false;
    }
    if (!this.enabled) {
      Scribd.log("ads are not enabled");
      return;
    }
    this.gpt_slots || (this.gpt_slots = []);
    this.gpt_slots_by_name || (this.gpt_slots_by_name = {});
    for (i = 0, len = attributes.length; i < len; i++) {
      ref = attributes[i], k = ref[0], v = ref[1];
      this.addAttribute(k, v);
    }
    this.addAttribute('UseTest', "" + (Math.floor(Math.random() * 10)));
    this.set_data_layer();
    return googletag.cmd.push((function(_this) {
      return function() {
        var attribute_name, attribute_value, e, el_id, error, full_name, name, ref1, ref2, size, size_mapping, slot;
        try {
          ref1 = _this.adUnits;
          for (name in ref1) {
            el_id = ref1[name];
            full_name = "" + _this.account_prefix + name;
            size = parse_unit_size(name);
            slot = googletag.defineSlot(full_name, size, el_id);
            if (size_mapping = typeof opts.size_mapping_for_unit === "function" ? opts.size_mapping_for_unit(name) : void 0) {
              slot.defineSizeMapping(size_mapping);
            }
            slot.addService(googletag.pubads());
            _this.gpt_slots.push(slot);
            _this.gpt_slots_by_name[name] = slot;
          }
          ref2 = _this.attributes;
          for (attribute_name in ref2) {
            attribute_value = ref2[attribute_name];
            attribute_value = attribute_value instanceof Array ? (function() {
              var j, len1, results;
              results = [];
              for (j = 0, len1 = attribute_value.length; j < len1; j++) {
                v = attribute_value[j];
                results.push("" + v);
              }
              return results;
            })() : "" + attribute_value;
            googletag.pubads().setTargeting(attribute_name, attribute_value);
          }
          googletag.pubads().collapseEmptyDivs();
          googletag.enableServices();
          return _this.deferred().resolve();
        } catch (error) {
          e = error;
          return typeof console !== "undefined" && console !== null ? console.error(e) : void 0;
        }
      };
    })(this));
  };

  Scribd.Ads.addAttribute = function(name, value) {
    var attributes, base, i, len, register_with_gpt, sub_value;
    if (!((name != null) && (value != null))) {
      throw "addAttribute called without name or value";
    }
    register_with_gpt = true;
    attributes = (base = this.attributes)[name] != null ? base[name] : base[name] = [];
    if (value instanceof Array) {
      register_with_gpt = false;
      for (i = 0, len = value.length; i < len; i++) {
        sub_value = value[i];
        if (indexOf.call(attributes, sub_value) >= 0) {
          continue;
        }
        register_with_gpt = true;
        attributes.push(sub_value);
      }
    } else {
      if (indexOf.call(attributes, value) >= 0) {
        register_with_gpt = false;
      } else {
        attributes.push(value);
      }
    }
    if (register_with_gpt && this.gpt_loaded) {
      googletag.pubads().setTargeting(name, attributes);
    }
    return register_with_gpt;
  };

  Scribd.Ads.addAttributeIfSmaller = function(name, value) {
    var attributes;
    if (attributes = this.attributes[name]) {
      if (attributes.length > 1) {
        throw "can't use Scribd.Ads.addAttributeIfSmaller for attribute, '" + name + "' with multiple values";
      } else {
        if (value < attributes[0]) {
          return this.attributes[name][0] = value;
        }
      }
    } else {
      return this.addAttribute(name, value);
    }
  };

  Scribd.Ads.addUnit = function(name, el_id, opts) {
    var node, size;
    if (opts == null) {
      opts = {};
    }
    if (!this.enabled) {
      return;
    }
    size = parse_unit_size(name);
    if (el_id == null) {
      el_id = name + "_container";
    }
    node = document.getElementById(el_id);
    node.style.width = size[0] + "px";
    node.style.height = size[1] + "px";
    this.queued_for_display[name] = true;
    return this.deferred().done((function(_this) {
      return function() {
        if (_this.units_displayed[name]) {
          if (typeof console !== "undefined" && console !== null) {
            console.error("We already tried to display the unit: " + name);
          }
        }
        delete _this.queued_for_display[name];
        _this.units_displayed[name] = true;
        if (_this.debug_placeholders) {
          return node.classList.add("ad_debug_placeholder");
        } else {
          googletag.display(el_id);
          if (opts.refresh) {
            return Scribd.Ads.RefreshUnit.create_if_allowed(name, el_id);
          }
        }
      };
    })(this));
  };

  Scribd.Ads.betweenUnitForPage = function(pageNum) {
    if (pageNum === 1) {
      return "Doc_Between_Top_FullBanner_468x60";
    } else if (pageNum === 2) {
      return "Doc_Between_Leaderboard_BTF_728x90_" + pageNum;
    } else if (pageNum % 2 === 1 && pageNum <= 21) {
      return "Doc_Between_Leaderboard_BTF_728x90_" + pageNum;
    }
  };

  Scribd.Ads.addBetweenPageUnit = function(page_num) {
    var container, h, inner_container, ref, unit_name, w;
    if (!this.enabled) {
      return;
    }
    if (navigator.userAgent.match(/iPad/i)) {
      return;
    }
    unit_name = this.betweenUnitForPage(page_num);
    if (!unit_name) {
      return;
    }
    container = document.getElementById("between_page_ads_" + page_num);
    inner_container = document.createElement("div");
    inner_container.id = "between_page_ads_inner_" + page_num;
    inner_container.style.position = "absolute";
    container.appendChild(inner_container);
    ref = parse_unit_size(unit_name), w = ref[0], h = ref[1];
    container.style.height = h + "px";
    container.style.width = w + "px";
    return this.addUnit(unit_name, inner_container.id);
  };

  Scribd.Ads.disable = function() {
    return this.deferred().reject();
  };

  Scribd.Ads.set_data_layer = function() {
    var attribute, fn, fn1, i, j, len, len1, obj, obj_to_push, ref, ref1, ref2, ref3, sub_obj, target_key, value;
    window.dataLayer = [];
    obj_to_push = {};
    ref = this.attributes;
    for (target_key in ref) {
      value = ref[target_key];
      obj = {};
      obj[target_key] = value[0];
      window.dataLayer.push(obj);
      if ((target_key === "IAB_A-L" || target_key === "IAB_M-Z") && value.length >= 2) {
        sub_obj = {};
        sub_obj[target_key + "_SUB"] = value[1];
        window.dataLayer.push(sub_obj);
      }
    }
    if (this.attributes["IAB_A-L"]) {
      ref1 = Scribd.Ads.attributes["IAB_A-L"];
      fn = function(attribute) {
        var key;
        key = "SC_121_" + attribute;
        obj = {};
        obj[key] = "yes";
        return dataLayer.push(obj);
      };
      for (i = 0, len = ref1.length; i < len; i++) {
        attribute = ref1[i];
        fn(attribute);
      }
    }
    if (this.attributes["IAB_M-Z"]) {
      ref2 = this.attributes["IAB_M-Z"];
      fn1 = function(attribute) {
        var key;
        key = "SC_121_" + attribute;
        obj = {};
        obj[key] = "yes";
        return dataLayer.push(obj);
      };
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        attribute = ref2[j];
        fn1(attribute);
      }
    }
    Scribd.geoModule(function(code) {
      return window.dataLayer.push({
        'country_code': code
      });
    });
    Scribd.with_named_current_user((function(_this) {
      return function() {
        var current_user, ref3;
        current_user = Scribd.named_current_user();
        if (current_user) {
          window.dataLayer.push({
            "secret_sauce": Scribd.named_current_user().secret_sauce
          });
        }
        if ((current_user != null ? current_user.active_archive_purchase : void 0) || ((ref3 = Scribd.current_doc) != null ? ref3.adfree_publisher : void 0)) {
          return window.dataLayer.push({
            'ads_free': true
          });
        }
      };
    })(this));
    if ((ref3 = Scribd.current_doc) != null ? ref3.author_name : void 0) {
      return window.dataLayer.push({
        "publisher_name": Scribd.current_doc.author_name.replace(/(\s+|\.)/g, "")
      });
    }
  };

  Scribd.Ads.setFacebookAttribute = function() {
    var id;
    if (id = FB.getUserID()) {
      return this.addAttribute('FBID', id);
    }
  };

  Scribd.Ads.size = function(unit_name, custom_size) {
    return 600;
  };

  _.bindAll.apply(_, [Scribd.Ads].concat(slice.call(_.functions(Scribd.Ads))));

}).call(this);


/* ----------------------------------------------------------------------
   - public/javascripts/ads/ad_layouts.coffee (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var track_sampled;

  track_sampled = function() {
    if (Math.random() <= 0.01) {
      return trackEvent.apply(null, arguments);
    }
  };

  Scribd.Ads.setAdLayouts = function() {
    var adLayout, ref1, ref2, ref3, ref4, ref5, ref6, ref7, specialCase;
    Scribd.Ads.setRefererType();
    specialCase = function(adLayout, whichCase) {
      Scribd.Ads.addAttributeIfSmaller('AdLayout', adLayout);
      return track_sampled("AdTargeting", "SpecialCase", whichCase, 0, false);
    };
    if ((ref1 = Scribd.current_doc) != null ? ref1.adfree_publisher : void 0) {
      specialCase(0, "AdFreePublisher");
    }
    if ((ref2 = Scribd.current_doc) != null ? ref2.adult_uploader : void 0) {
      specialCase(0, "AdultUploader");
    }
    if ((ref3 = Scribd._named_current_user) != null ? ref3.has_purchased : void 0) {
      specialCase(0, "UserPurchasedDocument");
    }
    if ((ref4 = Scribd.current_doc) != null ? ref4.is_owner : void 0) {
      specialCase(0, "UserViewingOwnDocument");
    }
    if ((ref5 = Scribd._named_current_user) != null ? ref5.uploaded_at_least_three : void 0) {
      specialCase(0, "UserUploadedThreeOrMore");
    }
    if ((ref6 = Scribd.current_doc) != null ? ref6.is_private : void 0) {
      specialCase(1, "UserViewingPrivateDoc");
    }
    if ((ref7 = Scribd.current_doc) != null ? ref7.can_purchase : void 0) {
      specialCase(1, "UserViewingUnpurchasedDoc");
    }
    if (adLayout = window.location.href.match(/[?#&]adLayout=(\d)(?:[?#&]|$)/i)) {
      adLayout = parseInt(adLayout[1], 10);
      Scribd.log("forcing ad layout " + adLayout);
      delete Scribd.Ads.attributes['AdLayout'];
      Scribd.Ads.addAttribute('AdLayout', adLayout);
    }
    return track_sampled("AdTargeting", "AdLayout", "" + Scribd.Ads.attributes["AdLayout"][0], 0, false);
  };

  Scribd.Ads.setByGeo = function(isSearchTraffic) {
    var adLayout, isLowAdCountry;
    Scribd.currentLocation = Scribd.geoModule("now");
    adLayout = 4;
    isLowAdCountry = {
      US: true,
      CA: true,
      AU: true,
      GB: true,
      FR: true,
      IT: true,
      DE: true,
      NL: true,
      BE: true,
      PT: true,
      CH: true,
      AT: true,
      SE: true,
      DK: true,
      IE: true,
      NO: true,
      FI: true
    }[Scribd.currentLocation];
    if (isSearchTraffic) {
      adLayout = (isLowAdCountry ? 3 : 4);
    } else {
      adLayout = (isLowAdCountry ? 1 : 3);
    }
    return Scribd.Ads.addAttributeIfSmaller("AdLayout", adLayout);
  };

  Scribd.Ads.setRefererType = function(ref) {
    var domain, domainMatches, domainPattern, query, queryMatches, queryPattern, referrerType, url, urlMatches, withoutSubdomainsPattern;
    if (!ref) {
      ref = document.referrer;
    }
    domainPattern = /^https?:\/\/([^\/]+)/i;
    queryPattern = /[?&][pq]=([^&]+)/i;
    withoutSubdomainsPattern = /^(?:[^.]+\.)?([^.]+)\.(?:(?:ac|com|edu|gc|gov|net|org|per|sch|co)\.?[^.]+)$/i;
    urlMatches = ref.match(domainPattern);
    referrerType = "";
    if (urlMatches) {
      url = urlMatches[1];
      domainMatches = url.match(withoutSubdomainsPattern);
      domain = "";
      if (domainMatches) {
        domain = domainMatches[1];
      }
      queryMatches = ref.match(queryPattern);
      if (queryMatches) {
        query = queryMatches[1];
        if (query.match(/scribd/i)) {
          referrerType = "branded search";
        } else {
          referrerType = "organic search";
        }
      } else {
        if (domain.match(/google|yahoo|ask|bing/i)) {
          referrerType = "unknown search";
        }
      }
      if (domain.match(/^ycombinator.com|hackerne.ws|reddit.com$/i)) {
        referrerType = "premium";
        if (domain !== "reddit") {
          domain = "hackernews";
        }
        Scribd.Ads.addAttributeIfSmaller("AdLayout", 1);
      }
      if (referrerType) {
        track_sampled("refererType", domain, referrerType, 0, false);
      }
    }
    return Scribd.Ads.setByGeo(!!referrerType.match(/search$/));
  };

}).call(this);


/* ----------------------------------------------------------------------
   - public/javascripts/ads/refresh_unit.coffee (last modified: 2016-02-25 22:34:49 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var getServerOption,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  getServerOption = function(name, defaultValue) {
    var ref, ref1;
    return (ref = typeof Scribd !== "undefined" && Scribd !== null ? (ref1 = Scribd.ServerOptions) != null ? ref1[name] : void 0 : void 0) != null ? ref : defaultValue;
  };

  Scribd.Ads.trackEngagement = false;

  Scribd.Ads.userIsActive = false;

  Scribd.Ads.inactivityTimer = null;

  Scribd.Ads.idleTimeBeforeInactive = getServerOption("ad_refresh_idle_time_before_inactive", 60);

  Scribd.Ads.refreshInterval = getServerOption("ad_refresh_interval", 60);

  Scribd.Ads.delayBeforeTrackingEngagement = getServerOption("ad_refresh_engagement_tracking_delay", 0);

  setTimeout((function() {
    return Scribd.Ads.trackEngagement = true;
  }), Scribd.Ads.delayBeforeTrackingEngagement * 1000);

  Scribd.Ads.onUserActivity = function() {
    Scribd.Ads.userIsActive = true;
    clearTimeout(Scribd.Ads.inactivityTimer);
    return Scribd.Ads.inactivityTimer = setTimeout(Scribd.Ads.onUserInactivity, Scribd.Ads.idleTimeBeforeInactive * 1000);
  };

  Scribd.Ads.onUserInactivity = function() {
    return Scribd.Ads.userIsActive = false;
  };

  Scribd.Ads.observingUserActivity = false;

  Scribd.Ads.observeUserActivity = _.once(function() {
    if (!Scribd.Ads.observingUserActivity) {
      Scribd.Ads.onUserActivity();
      $(document).mousemove(Scribd.Ads.onUserActivity);
      $(window).scroll(Scribd.Ads.onUserActivity);
      return Scribd.Ads.observingUserActivity = true;
    }
  });

  Scribd.Ads.RefreshUnit = (function() {
    var SPECIAL_COUNTRIES;

    SPECIAL_COUNTRIES = ['US', 'GB', 'FR', 'DE', 'JP'];

    RefreshUnit.create_if_allowed = function(name, el_id) {
      if (Scribd.Ads.attributes.AdLayout[0] === 1) {
        return Scribd.geoModule(function(code) {
          if (indexOf.call(SPECIAL_COUNTRIES, code) >= 0) {
            return new Scribd.Ads.RefreshUnit(name, el_id);
          }
        });
      } else if (Scribd.Ads.attributes.AdLayout[0] > 1) {
        return new Scribd.Ads.RefreshUnit(name, el_id);
      }
    };

    function RefreshUnit(name1, el_id1) {
      this.name = name1;
      this.el_id = el_id1;
      this.el = $("#" + this.el_id);
      this.slot = Scribd.Ads.gpt_slots_by_name[this.name];
      Scribd.Ads.observeUserActivity();
      if (!this.slot) {
        console.warn("Missing slot for " + this.name);
        return;
      }
      this.setup_refresh();
      this.listen_for_hover();
      Scribd.log("Created refresh unit: " + this.name);
    }

    RefreshUnit.prototype.setup_refresh = function() {
      this.times_refreshed = 0;
      this.timer = null;
      this.last_refreshed = null;
      return this.set_next_refresh();
    };

    RefreshUnit.prototype.listen_for_hover = function() {
      this.el.on("mouseenter", (function(_this) {
        return function() {
          return _this.is_over = true;
        };
      })(this));
      return this.el.on("mouseleave", (function(_this) {
        return function() {
          return _this.is_over = false;
        };
      })(this));
    };

    RefreshUnit.prototype.get_duration = function() {
      var ref;
      return (ref = this._duration) != null ? ref : Scribd.Ads.refreshInterval * 1000;
    };

    RefreshUnit.prototype.stop_refreshing = function() {
      if (this.timer) {
        clearTimeout(this.timer);
        return delete this.timer;
      }
    };

    RefreshUnit.prototype.set_next_refresh = function() {
      this.stop_refreshing();
      this.refresh_after = this.get_duration() + (+(new Date));
      return this.timer = setInterval((function(_this) {
        return function() {
          if (_this.refresh_after < +(new Date)) {
            _this.refresh();
            return _this.set_next_refresh();
          }
        };
      })(this), 2000);
    };

    RefreshUnit.prototype.refresh = function() {
      if (!(Scribd.Ads.userIsActive || !Scribd.Ads.trackEngagement)) {
        return;
      }
      if (this.is_over) {
        return;
      }
      Scribd.log("Refreshing unit: " + this.name);
      this.times_refreshed += 1;
      return googletag.pubads().refresh([this.slot]);
    };

    return RefreshUnit;

  })();

  Scribd.Ads.addRefreshUnit = function(name) {};

}).call(this);




/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

