/************************************************************************
 * 'audiobooks.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:11 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-05-24 20:14:50 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/base.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.ReadingProgress = {};

  Scribd.ReadingProgress.Base = (function() {
    Base.prototype.events = {
      focus: "focus.reading_progress",
      scroll: "scroll.reading_progress"
    };

    Base.prototype.default_opts = function() {
      return {
        throttle_get: 60000,
        throttle_post: 10000
      };
    };

    Base.prototype.enabled = function() {
      var ref, ref1;
      if (!((ref = Scribd.ServerOptions) != null ? ref.reading_progress_enabled : void 0)) {
        return false;
      }
      if (!Scribd.logged_in) {
        return false;
      }
      if ((ref1 = Scribd.current_doc) != null ? ref1.is_sheet_music : void 0) {
        return false;
      }
      return true;
    };

    function Base(opts) {
      var ref, ref1, ref2;
      this.opts = opts != null ? opts : {};
      if (!this.enabled()) {
        return;
      }
      this.opts = _.extend(this.default_opts(), this.opts);
      this.get_ms = ((ref = Scribd.ServerOptions) != null ? ref.reading_progress_throttle_get_milliseconds : void 0) || this.opts.throttle_get;
      this.post_ms = ((ref1 = Scribd.ServerOptions) != null ? ref1.reading_progress_throttle_post_milliseconds : void 0) || this.opts.throttle_post;
      this.url = (ref2 = Scribd.current_doc.reading_progress) != null ? ref2.update_url : void 0;
      this.doc_id = Scribd.current_doc.id;
      this.offset = null;
      this.offset_type = null;
      this.percentage = null;
      this.throttled_get_handler = _.throttle((function(_this) {
        return function() {
          return _this.get();
        };
      })(this), this.get_ms, {
        leading: true,
        trailing: false
      });
      this.throttled_post_handler = _.throttle((function(_this) {
        return function() {
          return _this.post();
        };
      })(this), this.post_ms, {
        leading: false,
        trailing: true
      });
      $(window).off(this.events.focus).on(this.events.focus, this.throttled_get_handler);
    }

    Base.prototype.update_external_progress = function(data) {
      if (!(data != null ? data.progress : void 0)) {
        return;
      }
      if (data.progress.from_current_device) {
        return;
      }
      if (data.progress.device_name === "browser") {
        return;
      }
      return $(window).trigger("scribd:external_reading_progress", data.progress);
    };

    Base.prototype.get = function() {
      return $.get(this.url, {
        doc_id: this.doc_id
      }, this.update_external_progress);
    };

    Base.prototype.post = function() {
      return $.post(this.url, {
        doc_id: this.doc_id,
        offset: this.offset,
        offset_type: this.offset_type,
        percentage: this.percentage
      }, this.update_external_progress);
    };

    return Base;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/audiobooks/audiobooks.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Findaway = (function() {
    function Findaway() {}

    Findaway.init = function(opts, ready_fn) {
      var done;
      if (opts == null) {
        opts = {};
      }
      if (ready_fn == null) {
        ready_fn = null;
      }
      this.account_id = opts.account_id, this.session_key = opts.session_key, this.debug = opts.debug;
      done = (function(_this) {
        return function() {
          return typeof ready_fn === "function" ? ready_fn({
            account: _this.account,
            player: _this.player,
            collection: _this.collection
          }) : void 0;
        };
      })(this);
      if (this.findaway_ready) {
        return done();
      }
      findaway.on("init:success", (function(_this) {
        return function() {
          _this.account = new findaway.Account(_this.account_id);
          _this.player = new findaway.Player(_this.account);
          _this.collection = new findaway.Collection(_this.account_id);
          _this.findaway_ready = true;
          return done();
        };
      })(this));
      findaway.on("init:error", (function(_this) {
        return function(err) {
          console.error("findaway init error");
          return $(document.body).track({
            category: "audiobooks",
            action: "error",
            label: err.toString()
          });
        };
      })(this));
      return findaway.init({
        session_key: this.session_key,
        debug: this.debug,
        useHTML5Audio: true,
        ajaxTimeout: 6000
      });
    };

    Findaway.with_findaway = function(fn) {
      var path;
      if (fn == null) {
        fn = null;
      }
      if (typeof findaway !== "undefined" && findaway !== null) {
        return typeof fn === "function" ? fn() : void 0;
      }
      path = "/aggregated/javascript/findaway.js";
      return $.getScript(path).done(function() {
        return findaway.on('dependencies:success', (function(_this) {
          return function() {
            soundManager.beginDelayedInit();
            return typeof fn === "function" ? fn() : void 0;
          };
        })(this));
      });
    };

    return Findaway;

  })();

  Scribd.Audiobooks = (function() {
    var assert_book;

    Audiobooks.listen_window_name = "scribdAudioPlayer";

    Audiobooks.listen_window_width = 718;

    Audiobooks.listen_window_height = 521;

    Audiobooks.open_popup = function(href) {
      var win;
      win = window.open(href, this.listen_window_name, "width=" + this.listen_window_width + ",height=" + this.listen_window_height + ",location=0");
      if (!win || typeof win === "undefined") {
        console.error("popup blocked");
        return $(document.body).track({
          category: "audiobooks",
          action: "popup",
          label: "blocked"
        });
      }
    };

    Audiobooks.session = function(session_key, cb) {
      return $.post('/audiobooks/session', {
        session_key: session_key
      }, function(msg) {
        return typeof cb === "function" ? cb(msg) : void 0;
      });
    };

    Audiobooks.format_dur = function(dur) {
      var current_time, formatted;
      if (dur == null) {
        dur = 0;
      }
      if (dur && moment.utc(dur).isValid()) {
        current_time = moment.utc(dur);
        return formatted = current_time.hours() ? current_time.format("H:mm:ss") : current_time.format("mm:ss");
      } else {
        return "00:00";
      }
    };

    assert_book = function(fn) {
      return function() {
        if (!this.current_book) {
          throw new Error("current_book is not set");
        }
        return fn.apply(this, arguments);
      };
    };

    function Audiobooks(opts) {
      this.account_id = opts.account_id, this.session_key = opts.session_key, this.debug = opts.debug, this.doc_id = opts.doc_id, this.requires_credit = opts.requires_credit, this.preview_threshold = opts.preview_threshold;
      this.seek_amount = 30;
      _.extend(this, Backbone.Events);
      this.on('findaway:loaded', (function(_this) {
        return function() {
          return _this.setup_events();
        };
      })(this));
    }

    Audiobooks.prototype.init_findaway = function(fn) {
      return Scribd.Findaway.init({
        account_id: this.account_id,
        session_key: this.session_key,
        debug: this.debug
      }, (function(_this) {
        return function(data) {
          _this.account = data.account, _this.player = data.player, _this.collection = data.collection;
          return typeof fn === "function" ? fn() : void 0;
        };
      })(this));
    };

    Audiobooks.prototype.refresh_session = function() {
      return Scribd.Audiobooks.session(this.session_key, (function(_this) {
        return function(msg) {
          _this.session_key = msg.session_key;
          return window.location.reload();
        };
      })(this));
    };

    Audiobooks.prototype.load = function(external_id, progress) {
      if (this.loaded) {
        return;
      }
      this.init_findaway((function(_this) {
        return function() {
          _this.log_event('findaway:loaded');
          _this.current_book = new findaway.Audiobook(external_id);
          _this.current_book.load();
          return _this.current_book.on('load:success', function() {
            var load_obj, loc;
            load_obj = {
              book: _this.current_book
            };
            if (progress) {
              loc = Scribd.ReadingProgress.Audio.get_track_and_position(progress);
              load_obj.track = loc.track_num;
              load_obj.position = loc.track_pos;
            }
            _this.player.load(load_obj);
            return _this.player.on('load:success', function() {
              if (_this.loaded) {
                return;
              }
              console.warn("player load success", arguments);
              _this.loaded = true;
              _this.play();
              return _this.log_event("scribd:audiobook:ready", _this.current_book);
            });
          });
        };
      })(this));
      return this;
    };

    Audiobooks.prototype.setup_events = function() {
      this.player.on('trackChanged', (function(_this) {
        return function(track_num) {
          _this.trigger("scribd:audiobook:trackChanged", track_num);
          return _this.play();
        };
      })(this));
      this.player.on('trackCompleted', (function(_this) {
        return function(track_num) {
          return _this.trigger("scribd:audiobook:track_completed", track_num, track_num === _this.player.currentTitle.playlist.length - 1);
        };
      })(this));
      this.player.on('timeChanged', (function(_this) {
        return function(time) {
          return _this.trigger("scribd:audiobook:timeChanged", time);
        };
      })(this));
      this.player.on('trackLoading', (function(_this) {
        return function(complete) {
          return _this.trigger("scribd:audiobook:trackLoading", complete);
        };
      })(this));
      this.player.on('load:success', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:loadComplete');
        };
      })(this));
      this.player.on('load:error', (function(_this) {
        return function(err) {
          return _this.trigger('scribd:audiobook:load_error', err);
        };
      })(this));
      this.player.on('setup:error', (function(_this) {
        return function(err) {
          return _this.trigger('scribd:audiobook:setup_error', err);
        };
      })(this));
      this.player.on('init:error', (function(_this) {
        return function(err) {
          return _this.trigger('scribd:audiobook:init_error', err);
        };
      })(this));
      this.player.on('createAudio:error', (function(_this) {
        return function(err) {
          return _this.trigger('scribd:audiobook:create_audio_error', err);
        };
      })(this));
      this.player.on('playback:started', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:play');
        };
      })(this));
      this.player.on('playback:paused', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:pause');
        };
      })(this));
      this.player.on('next', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:next');
        };
      })(this));
      this.player.on('prev', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:prev');
        };
      })(this));
      this.player.on('seek-to', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:seekTo');
        };
      })(this));
      this.player.on('skip-back', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:skipBack');
        };
      })(this));
      this.player.on('jump-to', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:jumpTo');
        };
      })(this));
      this.player.on('unload', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:unload');
        };
      })(this));
      this.player.on('load:recoveryStart', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:recovery_start');
        };
      })(this));
      this.player.on('load:recoveryEnd', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:recovery_end');
        };
      })(this));
      return this.player.on('load:recoveryFailed', (function(_this) {
        return function() {
          return _this.trigger('scribd:audiobook:recovery_failed');
        };
      })(this));
    };

    Audiobooks.prototype.is_loaded = function() {
      return this.loaded;
    };

    Audiobooks.prototype.play = function() {
      return this.player.trigger('play');
    };

    Audiobooks.prototype.current_chapters = assert_book(function() {
      return this.current_book.chapters;
    });

    Audiobooks.prototype.current_track_location = function() {
      return {
        track_num: this.get_track_num(),
        track_pos: this.get_track_pos()
      };
    };

    Audiobooks.prototype.pause = assert_book(function() {
      if (this.player.isPlaying()) {
        this.player.trigger('pause');
        return this.log_event('player:pause', this.current_track_location());
      }
    });

    Audiobooks.prototype.seek_ahead = assert_book(function(amount) {
      var pos;
      if (amount == null) {
        amount = this.seek_amount;
      }
      pos = this.player.getPosition();
      return this.player.trigger('seek-to', pos + (this.seek_amount * 1000));
    });

    Audiobooks.prototype.seek_back = assert_book(function(amount) {
      var pos;
      if (amount == null) {
        amount = this.seek_amount;
      }
      pos = this.player.getPosition();
      return this.player.trigger('seek-to', pos - (this.seek_amount * 1000));
    });

    Audiobooks.prototype.seek_to = assert_book(function(pos) {
      return this.player.trigger('seek-to', pos);
    });

    Audiobooks.prototype.set_volume = assert_book(function(v) {
      if (v == null) {
        v = 100;
      }
      v = Math.min(100, Math.max(0, v));
      this.player.trigger('set-volume', v);
      this.trigger("scribd:audiobook:volume_changed");
      if (v === 0) {
        return this.muted = true;
      }
    });

    Audiobooks.prototype.increase_volume = function(amount) {
      if (amount == null) {
        amount = 10;
      }
      return this.set_volume(this.player.getVolume() + amount);
    };

    Audiobooks.prototype.decrease_volume = function(amount) {
      if (amount == null) {
        amount = 10;
      }
      return this.set_volume(this.player.getVolume() - amount);
    };

    Audiobooks.prototype.get_volume = assert_book(function() {
      return this.player.getVolume();
    });

    Audiobooks.prototype.get_track_num = assert_book(function() {
      return this.player.currentTrack;
    });

    Audiobooks.prototype.get_track_pos = function() {
      if (this.player && this.loaded) {
        return this.player.getPosition();
      } else {
        return 0;
      }
    };

    Audiobooks.prototype.get_current_track = function() {
      var track_num;
      track_num = this.get_track_num();
      if (track_num == null) {
        return false;
      }
      if (track_num < 0 || track_num >= this.player.currentTitle.playlist.length) {
        return false;
      }
      return this.player.currentTitle.playlist[track_num];
    };

    Audiobooks.prototype.get_num_tracks = function() {
      var ref;
      return (ref = this.player.currentTitle) != null ? ref.playlist.length : void 0;
    };

    Audiobooks.prototype.get_track = function(idx) {
      if (idx < 0 || idx >= this.player.currentTitle.playlist.length) {
        return false;
      }
      return this.player.currentTitle.playlist[idx];
    };

    Audiobooks.prototype.get_track_duration = function(track_num) {
      var ref, track;
      if (track_num == null) {
        track_num = (ref = this.player) != null ? ref.currentTrack : void 0;
      }
      track = this.get_current_track();
      if (!track) {
        return 0;
      }
      return track.duration;
    };

    Audiobooks.prototype.get_runtime = function() {
      var chapter, i, len, ref, total;
      total = 0;
      ref = Scribd.audiobook_player.current_chapters();
      for (i = 0, len = ref.length; i < len; i++) {
        chapter = ref[i];
        total += chapter.duration;
      }
      return total;
    };

    Audiobooks.prototype.next_track = function() {
      var next_track, prev_track;
      prev_track = this.get_track_num();
      next_track = prev_track + 1 < this.current_chapters().length ? prev_track + 1 : prev_track;
      return this.player.trigger('next');
    };

    Audiobooks.prototype.prev_track = function() {
      var next_track, prev_track;
      prev_track = this.get_track_num();
      next_track = prev_track - 1 >= 0 ? prev_track - 1 : 0;
      return this.player.trigger('prev');
    };

    Audiobooks.prototype.cancel_sleep = function() {
      if (this.sleep_timer == null) {
        return;
      }
      clearTimeout(this.sleep_timer);
      return delete this.sleep_timer;
    };

    Audiobooks.prototype.sleep_in = function(minutes) {
      var ms;
      if (minutes == null) {
        minutes = 5;
      }
      if (this.sleep_timer) {
        this.cancel_sleep();
      }
      ms = minutes * 60 * 1000;
      this.sleep_at = (new Date()).getTime() + ms;
      return this.sleep_timer = setTimeout((function(_this) {
        return function() {
          return _this.pause();
        };
      })(this), ms);
    };

    Audiobooks.prototype.sleep_time_remaining = function() {
      return this.sleep_at - (new Date()).getTime();
    };

    Audiobooks.prototype.isPlaying = function(bookId) {
      var ref;
      if (!bookId || bookId === this.current_book.id) {
        return !!((ref = this.player) != null ? ref.isPlaying() : void 0);
      } else {
        return false;
      }
    };

    Audiobooks.prototype.goto_track = function(track_num, fn) {
      var callback;
      if (fn) {
        callback = (function(_this) {
          return function() {
            if (track_num !== _this.player.currentTrack) {
              return;
            }
            _this.off("scribd:audiobook:trackChanged", callback);
            return fn();
          };
        })(this);
        this.on("scribd:audiobook:trackChanged", callback);
      }
      return this.player.trigger('jump-to', track_num);
    };

    Audiobooks.prototype.goto_pos = function(pos) {
      return this.player.trigger('seek-to', pos);
    };

    Audiobooks.prototype.goto_track_and_pos = function(track_num, pos) {
      var goto_track_then_wait;
      if (pos == null) {
        pos = 0;
      }
      goto_track_then_wait = (function(_this) {
        return function() {
          _this.is_seeking = true;
          return _this.goto_track(track_num, function() {
            _this.goto_pos(pos);
            return _this.is_seeking = false;
          });
        };
      })(this);
      if (track_num === this.player.currentTrack) {
        return this.goto_pos(pos);
      } else {
        return goto_track_then_wait();
      }
    };

    Audiobooks.prototype.on_last_track = function() {
      return this.player.currentTrack + 1 === this.player.currentTitle.playlist.length;
    };

    Audiobooks.prototype.log_event = function(eventType, data) {
      if (data == null) {
        data = null;
      }
      if (this.debug) {
        this.log("Scribd event: " + eventType);
      }
      return this.trigger(eventType, data);
    };

    Audiobooks.prototype.log = function(msg, data) {
      return Scribd.log(msg, data);
    };

    return Audiobooks;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/audiobooks/bookmarks.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.Audiobooks.Bookmarks = (function() {
    function Bookmarks(player, doc_id) {
      this.player = player;
      this.doc_id = doc_id;
      this.save_bookmark = bind(this.save_bookmark, this);
      this.delete_bookmark = bind(this.delete_bookmark, this);
      this.fetch_bookmarks = bind(this.fetch_bookmarks, this);
    }

    Bookmarks.prototype.fetch_bookmarks = function() {
      return $.ajax({
        type: "GET",
        dataType: "json",
        url: "/bookmarks/" + this.doc_id
      });
    };

    Bookmarks.prototype.delete_bookmark = function(bookmark_id) {
      return $.ajax({
        type: "DELETE",
        dataType: "json",
        url: "/bookmarks/" + this.doc_id + "/" + bookmark_id
      });
    };

    Bookmarks.prototype.save_bookmark = function(progress) {
      var new_bookmark, track_num, track_pos;
      this.player.trigger("scribd:audiobook:bookmark_location");
      track_num = this.player.get_track_num();
      track_pos = this.player.get_track_num();
      new_bookmark = {
        offset: progress,
        first_block: "text",
        block_index: 0,
        page_number: track_num,
        word_index: track_pos
      };
      return $.ajax({
        type: "POST",
        data: new_bookmark,
        dataType: "json",
        url: "/bookmarks/" + this.doc_id
      }).then((function(_this) {
        return function(msg) {
          if (msg) {
            msg.type = "audio_bookmark";
            return msg;
          }
        };
      })(this));
    };

    Bookmarks.prototype.process_bookmarks = function(bookmarks) {
      var b, c, chapters, has_many_parts, i, len, loc, results;
      if (!this.player) {
        return [];
      }
      chapters = this.player.current_chapters();
      has_many_parts = _.keys(_.groupBy(chapters, "part_number")).length > 1;
      results = [];
      for (i = 0, len = bookmarks.length; i < len; i++) {
        b = bookmarks[i];
        loc = Scribd.ReadingProgress.Audio.get_track_and_position(b.book_character_offset);
        b.track_num = loc.track_num;
        b.track_pos = loc.track_pos;
        if (!(b.track_num >= 0)) {
          continue;
        }
        if (b.track_num < chapters.length) {
          c = chapters[b.track_num];
          b.loc_text = "";
          if (has_many_parts) {
            b.loc_text += "Part " + c.part_number + ", ";
            if (c.chapter_number) {
              b.loc_text += "Chapter " + c.chapter_number;
            } else {
              b.loc_text += "Introduction";
            }
          } else if (c.chapter_number) {
            b.loc_text += "Chapter " + c.chapter_number;
          } else {
            b.loc_text += "Introduction";
          }
        }
        b.formatted_location = Scribd.Audiobooks.format_dur(loc.track_pos);
        b.created_formatted = moment(new Date(b.created_at)).fromNow();
        results.push(b);
      }
      return results;
    };

    return Bookmarks;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/audio.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.Audio = (function(superClass) {
    extend(Audio, superClass);

    Audio.get_track_and_position = function(offset) {
      var chapter, chapters, duration, i, index, len;
      chapters = Scribd.audiobook_player.current_chapters();
      if (offset > Scribd.audiobook_player.get_runtime()) {
        return {
          track_num: chapters.length - 1,
          track_pos: chapters[chapters.length - 1].duration
        };
      } else {
        duration = 0;
        for (index = i = 0, len = chapters.length; i < len; index = ++i) {
          chapter = chapters[index];
          if (duration + chapter.duration < offset) {
            duration += chapter.duration;
          } else {
            return {
              track_num: index,
              track_pos: offset - duration
            };
          }
        }
      }
    };

    Audio.prototype.previous_progress = 0;

    Audio.prototype.enabled = function() {
      if (!this.player) {
        return false;
      }
      return Audio.__super__.enabled.apply(this, arguments);
    };

    Audio.prototype.default_opts = function() {
      return _.extend(Audio.__super__.default_opts.apply(this, arguments), {
        preview_restricted: null,
        preview_threshold: null,
        player: null
      });
    };

    function Audio(opts) {
      this.opts = opts != null ? opts : {};
      this.update = bind(this.update, this);
      this.player = Scribd.audiobook_player;
      this.previous_progress = this.get_progress();
      Audio.__super__.constructor.call(this, this.opts);
      this.player.on("scribd:audiobook:play scribd:audiobook:pause scribd:audiobook:bookmark_location scribd:audiobook:unload scribd:audiobook:trackChanged scribd:audiobook:next scribd:audiobook:prev scribd:audiobook:seekTo scribd:audiobook:skipBack scribd:audiobook:jumpTo", this.update);
      setInterval(this.update, this.post_ms);
    }

    Audio.prototype.update = function() {
      var progress;
      if (!this.enabled()) {
        return;
      }
      progress = this.get_progress();
      this.offset_type = "ms";
      this.offset = progress;
      this.percentage = progress / this.player.get_runtime() * 100;
      if (this.player.isPlaying()) {
        this.post();
        return this.track_for_payouts();
      }
    };

    Audio.prototype.get_progress = function(track, position) {
      var chapter, chapters, i, len, progress, ref;
      if (track == null) {
        track = this.player.get_track_num();
      }
      if (position == null) {
        position = this.player.get_track_pos();
      }
      chapters = (ref = this.player.current_chapters()) != null ? ref.slice(0, track) : void 0;
      if (!chapters) {
        return;
      }
      progress = 0;
      for (i = 0, len = chapters.length; i < len; i++) {
        chapter = chapters[i];
        progress += chapter.duration;
      }
      progress += position;
      if (this.opts.preview_restricted) {
        return progress = Math.min(progress, this.opts.preview_threshold);
      } else {
        return progress;
      }
    };

    Audio.prototype.track_for_payouts = function() {
      var progress;
      progress = this.get_progress();
      $rat("abook_listen", [Scribd.current_doc.id, void 0, void 0, this.previous_progress, progress]);
      $rat.root().flushEvents();
      return this.previous_progress = progress;
    };

    return Audio;

  })(Scribd.ReadingProgress.Base);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/epub.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.Epub = (function(superClass) {
    extend(Epub, superClass);

    function Epub() {
      return Epub.__super__.constructor.apply(this, arguments);
    }

    Epub.prototype.update = function(offset_type, offset, percentage) {
      if (!this.enabled()) {
        return;
      }
      this.offset_type = offset_type;
      this.offset = offset;
      this.percentage = percentage;
      return this.throttled_post_handler();
    };

    Epub.prototype.track = function() {};

    return Epub;

  })(Scribd.ReadingProgress.Base);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/pdf.coffee (last modified: 2016-05-24 20:14:50 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.Pdf = (function(superClass) {
    extend(Pdf, superClass);

    Pdf.prototype.enabled = function() {
      if (!window.docManager) {
        return false;
      }
      if (!this.opts.scroll_node) {
        return false;
      }
      return Pdf.__super__.enabled.apply(this, arguments);
    };

    Pdf.prototype.default_opts = function() {
      return _.extend(Pdf.__super__.default_opts.apply(this, arguments), {
        scroll_node: null
      });
    };

    function Pdf(opts) {
      this.opts = opts != null ? opts : {};
      this.update = bind(this.update, this);
      Pdf.__super__.constructor.call(this, this.opts);
      $(this.opts.scroll_node).off(this.events.scroll).on(this.events.scroll, this.update);
    }

    Pdf.prototype.update = function() {
      var page;
      if (!this.enabled()) {
        return;
      }
      page = window.docManager.currentPageNum() - 1;
      this.offset_type = "page";
      this.offset = page;
      this.percentage = page / this.opts.total_pages * 100;
      return this.throttled_post_handler();
    };

    return Pdf;

  })(Scribd.ReadingProgress.Base);

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-13 23:20:23 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/books/_slider.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Slider = (function() {
    function Slider(container, opts) {
      if (opts == null) {
        opts = {};
      }
      this.value = 0;
      this.dragging = false;
      this.shown = true;
      this.container = $(container);
      this.opts = _.extend({
        default_value: 0,
        min_value: 0,
        max_value: 100,
        step: 1,
        name: '',
        on_drag_start: null,
        on_drag_stop: null,
        on_change: null,
        round_value: true,
        readonly: false,
        fill_track: false,
        no_tracking_events: false,
        orientation: this.container.hasClass("vertical") ? "vertical" : "horizontal"
      }, opts);
      if (this.opts.orientation === "horizontal") {
        this.pos_prop = "left";
        this.max_pos_val = this.container.width();
      } else {
        this.pos_prop = "bottom";
        this.max_pos_val = this.container.outerHeight();
      }
      this.read_data_attrs();
      this.setup();
    }

    Slider.prototype.read_data_attrs = function() {
      var key, ref, val;
      ref = this.opts;
      for (key in ref) {
        val = ref[key];
        if (this.container.data(key)) {
          this.opts[key] = this.container.data(key);
        }
      }
      this.opts.min_value = parseInt(this.opts.min_value);
      this.opts.max_value = parseInt(this.opts.max_value);
      this.opts.step = parseInt(this.opts.step);
      return this.opts.default_value = parseInt(this.opts.default_value);
    };

    Slider.prototype.setup = function() {
      this.handle = this.container.find('.handle');
      this.track = this.container.find('.track');
      if (this.opts.orientation === "vertical") {
        this.container.addClass('vertical');
      }
      if (this.opts.fill_track) {
        this.fill_track = this.track.clone();
        this.fill_track.addClass('fill').insertAfter(this.track);
      }
      this.set_value(this.opts.default_value || this.opts.min_value, true, true);
      return this.setup_events();
    };

    Slider.prototype.get_closest_value = function(offset) {
      var abs_val, closest_val, offset_percent, result_val, step_diff;
      offset_percent = this.opts.orientation === "horizontal" ? offset / this.container.width() : offset / this.container.height();
      abs_val = offset_percent * (this.opts.max_value - this.opts.min_value) + this.opts.min_value;
      step_diff = abs_val % this.opts.step;
      closest_val = 0;
      if (step_diff) {
        if (step_diff >= this.opts.step / 2) {
          abs_val += this.opts.step - step_diff;
        } else {
          abs_val -= step_diff;
        }
        if (this.opts.round_value) {
          closest_val = Math.round(abs_val);
        } else {
          closest_val = abs_val;
        }
      } else if (this.opts.round_value) {
        closest_val = Math.round(abs_val);
      } else {
        closest_val = abs_val;
      }
      result_val = Math.min(Math.max(this.opts.min_value, closest_val), this.opts.max_value);
      if (this.opts.orientation === "vertical") {
        result_val = this.opts.max_value - result_val;
      }
      return result_val;
    };

    Slider.prototype.setup_events = function() {
      if (this.opts.readonly) {
        return;
      }
      this.container.on('click', (function(_this) {
        return function(e) {
          var new_val;
          if (!$(e.target).is('.handle')) {
            new_val = _this.opts.orientation === "horizontal" ? _this.get_closest_value(e.pageX - _this.container.offset().left) : _this.get_closest_value(e.pageY - _this.container.offset().top);
            _this.set_value(new_val, true);
            _this.container.trigger("scribd:value_jump", [new_val]);
          }
          e.stopPropagation();
          return false;
        };
      })(this));
      this.container.on('mousedown', '.handle', (function(_this) {
        return function(e) {
          if (e.button !== 0) {
            return;
          }
          e.preventDefault();
          return _this.drag_start(e);
        };
      })(this));
      this.container.on("mouseenter", (function(_this) {
        return function() {
          _this.mouseover = true;
          return _this.container.trigger("scribd:mouseenter");
        };
      })(this));
      this.container.on("mouseleave", (function(_this) {
        return function() {
          if (!_this.dragging) {
            _this.mouseover = false;
            return _this.container.trigger("scribd:mouseleave");
          }
        };
      })(this));
      $(document.body).on('mouseup', (function(_this) {
        return function(e) {
          if (_this.dragging) {
            return _this.drag_stop(e);
          }
        };
      })(this));
      $(document.body).on('mousemove', (function(_this) {
        return function(e) {
          if (_this.dragging) {
            return _this.drag(e);
          }
        };
      })(this));
      if (!this.opts.no_tracking_events) {
        this.container.on("scribd:drag_start", (function(_this) {
          return function(e) {
            return _this.container.track({
              action: "drag",
              params: "start"
            });
          };
        })(this));
        this.container.on("scribd:drag_stop", (function(_this) {
          return function(e) {
            return _this.container.track({
              action: "drag",
              params: "end"
            });
          };
        })(this));
        return this.container.on("scribd:value_jump", (function(_this) {
          return function(e) {
            return _this.container.track({
              action: "click",
              params: "change_value"
            });
          };
        })(this));
      }
    };

    Slider.prototype.drag_start = function(e) {
      this.dragging = true;
      this.handle.addClass('dragging');
      this.container.addClass('dragging');
      this.container.trigger('scribd:drag_start');
      if (this.opts.on_drag_start) {
        return this.opts.on_drag_start();
      }
    };

    Slider.prototype.drag_stop = function(e) {
      var new_val;
      new_val = this.opts.orientation === "horizontal" ? e.pageX - this.container.offset().left : e.pageY - this.container.offset().top;
      this.set_value(this.get_closest_value(new_val));
      this.dragging = false;
      this.handle.removeClass('dragging');
      this.container.removeClass('dragging');
      this.container.trigger('scribd:drag_stop', [this.get_value()]);
      this.set_value(this.value);
      if (this.opts.on_drag_stop) {
        return this.opts.on_drag_stop();
      }
    };

    Slider.prototype.drag = function(e) {
      var new_pos;
      new_pos = this.opts.orientation === "vertical" ? e.pageY - this.container.offset().top : e.pageX - this.container.offset().left;
      new_pos = Math.min(Math.max(0, new_pos), this.max_pos_val);
      this.set_value(this.get_closest_value(new_pos), true);
      this.container.trigger('scribd:drag');
      e.preventDefault();
      return e.stopPropagation();
    };

    Slider.prototype.get_handle_position = function(val, return_percent) {
      var percent, return_val;
      if (val == null) {
        val = this.value;
      }
      if (return_percent == null) {
        return_percent = false;
      }
      percent = (val - this.opts.min_value) / (this.opts.max_value - this.opts.min_value);
      return_val = return_percent ? percent : this.opts.orientation === "vertical" ? percent * this.container.height() : percent * this.container.width();
      return return_val;
    };

    Slider.prototype.set_value = function(new_value, update_ui, silent, event_name) {
      if (new_value == null) {
        new_value = this.min_value;
      }
      if (update_ui == null) {
        update_ui = false;
      }
      if (silent == null) {
        silent = false;
      }
      if (event_name == null) {
        event_name = 'value_changed';
      }
      if (new_value === this.value) {
        return;
      }
      this.value = new_value;
      if (update_ui) {
        this.handle.css(this.pos_prop, this.get_handle_position(this.value));
        if (this.opts.fill_track) {
          if (this.opts.orientation === "horizontal") {
            this.fill_track.width((this.get_value_as_percent() * 100) + "%");
          } else {
            this.fill_track.height((this.get_value_as_percent() * 100) + "%");
          }
        }
      }
      if (!silent) {
        this.container.trigger("scribd:" + event_name, [this.get_value()]);
      }
      if (this.opts.on_change) {
        return this.opts.on_change();
      }
    };

    Slider.prototype.get_value = function(round) {
      if (round == null) {
        round = false;
      }
      if (round) {
        return Math.round(this.value);
      } else {
        return this.value;
      }
    };

    Slider.prototype.get_value_as_percent = function() {
      return this.get_handle_position(this.get_value(), true);
    };

    Slider.prototype.show = function() {
      this.container.fadeIn();
      return this.shown = true;
    };

    Slider.prototype.hide = function(wait_for_mouseleave) {
      if (wait_for_mouseleave == null) {
        wait_for_mouseleave = true;
      }
      if (wait_for_mouseleave && this.mouseover) {
        return this.container.one("scribd:mouseleave", (function(_this) {
          return function() {
            return _this.hide(false);
          };
        })(this));
      } else {
        this.container.fadeOut();
        return this.shown = false;
      }
    };

    Slider.prototype.toggle = function() {
      if (this.shown) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    return Slider;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/books/_end_of_reading_alert.coffee (last modified: 2016-02-22 23:08:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Scribd.EndOfReadingAlert = (function() {
    function EndOfReadingAlert(container, opts) {
      this.opts = opts;
      this.track_once = bind(this.track_once, this);
      this.toggle = bind(this.toggle, this);
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
      this.setup_events = bind(this.setup_events, this);
      this.rat_data = bind(this.rat_data, this);
      this.container = $(container);
      this.setup_events();
      this.events = [];
    }

    EndOfReadingAlert.prototype.rat_data = function(action) {
      var data;
      data = this.opts.rat_data;
      if (data.next_in_series_id) {
        if (action === "show") {
          data.action = "NEXT_IN_SERIES_DISPLAYED";
        }
        if (action === "click") {
          data.action = "CONTINUED_TO_NEXT_IN_SERIES";
        }
      } else {
        if (action === "show") {
          data.action = "END_OF_READING_DISPLAYED";
        }
        if (action === "click") {
          data.action = "CONTINUED_TO_END_OF_READING";
        }
      }
      if (this.opts.audiobook) {
        data.total_chapters = Scribd.audiobook_player.player.currentTitle.chapters.length - 1;
        data.current_chapter = Scribd.audiobook_player.get_track_num();
      } else {
        data.total_pages = Scribd.read_page.epub.totalReferencePages();
        data.current_page = Scribd.read_page.epub.currentReferencePage() + 1;
        data.scroll_mode = Scribd.Books.toolbar.epub_mode;
      }
      return data;
    };

    EndOfReadingAlert.prototype.setup_events = function() {
      return this.container.dispatch("click", {
        end_of_reading_alert: (function(_this) {
          return function(element, event) {
            _this.track_once("click", "end_of_reading_alert");
            return "continue";
          };
        })(this)
      });
    };

    EndOfReadingAlert.prototype.show = function() {
      _.defer((function(_this) {
        return function() {
          _this.track_once("show", "end_of_reading_alert");
          return _this.container.addClass("show");
        };
      })(this));
      return this.container.addClass("been_shown");
    };

    EndOfReadingAlert.prototype.hide = function() {
      return this.container.removeClass("show");
    };

    EndOfReadingAlert.prototype.toggle = function(show) {
      if (show) {
        return this.show();
      } else {
        return this.hide();
      }
    };

    EndOfReadingAlert.prototype.track_once = function(event, label) {
      if (indexOf.call(this.events, event) < 0) {
        this.container.track({
          action: event,
          label: label
        });
        if (typeof $rat === "function") {
          $rat(label, this.rat_data(event));
        }
        if (typeof $rat !== "undefined" && $rat !== null) {
          $rat.root().flushEvents();
        }
        return this.events.push(event);
      }
    };

    return EndOfReadingAlert;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/my_library_reading_states.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Shared.MyLibraryReadingStates = (function() {
    MyLibraryReadingStates.prototype.THRESHOLDS = {
      book: 1000 * 3 * 60,
      audiobook: 1,
      comic: 1000 * 60 * 3,
      "default": 1000 * 3 * 60,
      sheet_music_chapter: 1000 * 20
    };

    function MyLibraryReadingStates(container, opts) {
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.default_opts();
      this.container = $(this.container);
      Scribd.Shared.MyLibraryReadingStates.instance = this;
      if (this.opts.masked_admin) {
        return;
      }
      this.initial_state = this.opts.current_state;
      this.current_state = this.initial_state;
      _.defer((function(_this) {
        return function() {
          if (_this.opts.currently_reading_active) {
            _this.init_currently_reading_timer();
          }
          if (_this.opts.finished_active && !_this.opts.is_preview) {
            _this.init_end_of_reading_listener();
          }
          if (_this.opts.chapter_document_id && !_this.opts.is_preview) {
            return _this.init_chapter_document_listener();
          }
        };
      })(this));
    }

    MyLibraryReadingStates.prototype.default_opts = function() {
      return this.opts = _.extend({
        current_state: 0,
        finished_state: -1,
        reading_state: -2,
        flash_duration: 5000,
        currently_reading_active: true,
        finished_active: true
      }, this.opts);
    };

    MyLibraryReadingStates.prototype.state_name = function() {
      switch (this.current_state) {
        case this.opts.reading_state:
          return "currently_reading";
        case this.opts.finished_state:
          return "finished";
        default:
          return this.current_state;
      }
    };

    MyLibraryReadingStates.prototype.init_currently_reading_timer = function() {
      var dur;
      if (this.THRESHOLDS.hasOwnProperty(this.opts.document_type)) {
        dur = this.THRESHOLDS[this.opts.document_type];
      } else if (this.opts.document_type === "sheet_music" && location.hash.indexOf("block=") >= 0) {
        dur = this.THRESHOLDS.sheet_music_chapter;
      } else {
        dur = this.THRESHOLDS["default"];
      }
      return this.timer = setTimeout((function(_this) {
        return function() {
          if (Scribd.Epub) {
            return $(document.body).one("scribd:epub_progress", function(e, p, pages_delta) {
              if (_this.opts.current_state == null) {
                _this.show_flash_template("currently_reading_flash");
              }
              return _this.add_to_currently_reading_state();
            });
          } else if (_this.opts.is_audiobook && !_this.opts.is_audiobook_preview) {
            return _this.add_to_currently_reading_state();
          } else {
            return $(window).add(typeof DocumentManager !== "undefined" && DocumentManager !== null ? DocumentManager.scrollParent : void 0).one("scroll", function() {
              return _this.add_to_currently_reading_state();
            });
          }
        };
      })(this), dur);
    };

    MyLibraryReadingStates.prototype.init_end_of_reading_listener = function() {
      var finish;
      finish = (function(_this) {
        return function() {
          if (_this.finished || _this.opts.current_state === _this.opts.finished_state) {
            return;
          }
          _this.add_to_finished_state();
          return _this.show_flash_template("finished_reading_flash");
        };
      })(this);
      if (Scribd.epub_book_page) {
        if (Scribd.epub_book_page.opts.is_comic) {
          Scribd.epub_book_page.epub.registerRedrawCallback(function() {
            if (Scribd.epub_book_page.comic_end_of_reading()) {
              return finish();
            }
          });
        } else {
          Scribd.epub_book_page.epub.registerEndOfContentCallback(function(at_end) {
            if (at_end) {
              return finish();
            }
          });
        }
      }
      if (Scribd.epub_doc_page) {
        if (Scribd.epub_doc_page.opts.is_comic) {
          Scribd.epub_doc_page.register_update_callback(function() {
            if (Scribd.epub_doc_page.comic_end_of_reading()) {
              return finish();
            }
          });
        } else {
          Scribd.epub_doc_page.epub.registerEndOfContentCallback(function(at_end) {
            if (at_end) {
              return finish();
            }
          });
        }
      }
      if (Scribd.audiobooks) {
        return Scribd.audiobooks.end_of_reading_callbacks.push(finish);
      }
    };

    MyLibraryReadingStates.prototype.init_chapter_document_listener = function() {
      var currentPage, finished, ref;
      if (!this.opts.chapter_document_id) {
        return;
      }
      if (((ref = Scribd.epub_book_page) != null ? ref.epub : void 0) == null) {
        return;
      }
      finished = false;
      currentPage = Scribd.epub_book_page.epub.currentPage();
      return Scribd.epub_book_page.epub.registerRedrawCallback((function(_this) {
        return function() {
          var page;
          if (finished) {
            return;
          }
          page = Scribd.epub_book_page.epub.currentPage();
          if (page !== currentPage) {
            finished = true;
            _this.add_to_currently_reading_state(_this.opts.chapter_document_id);
            return _this.show_flash_template("currently_reading_flash");
          }
        };
      })(this));
    };

    MyLibraryReadingStates.prototype.add_to_currently_reading_state = function(document_id) {
      if (document_id == null) {
        document_id = this.opts.document_id;
      }
      Scribd.Bookmarks.update_bookmarks_states({
        document_ids: [document_id],
        state: this.opts.reading_state
      });
      return this.container.trigger("scribd:state_changed", this.state_name());
    };

    MyLibraryReadingStates.prototype.add_to_finished_state = function() {
      this.finished = true;
      Scribd.Bookmarks.update_bookmarks_states({
        document_ids: [this.opts.document_id],
        state: this.opts.finished_state
      });
      return this.container.trigger("scribd:state_changed", this.state_name());
    };

    MyLibraryReadingStates.prototype.revert_state = function() {
      return Scribd.Bookmarks.update_bookmarks_states({
        document_ids: [this.opts.document_id],
        state: this.opts.current_state,
        complete: (function(_this) {
          return function() {
            flasher.dismiss();
            _this.finished = _this.opts.current_state === _this.opts.finished_state;
            return _this.container.trigger("scribd:state_changed", _this.state_name());
          };
        })(this)
      });
    };

    MyLibraryReadingStates.prototype.remove_bookmark = function() {
      return Scribd.Bookmarks.remove_bookmark(this.opts.document_id, {
        complete: (function(_this) {
          return function(res) {
            _this.container.trigger("scribd:bookmark_removed");
            return flasher.dismiss();
          };
        })(this)
      });
    };

    MyLibraryReadingStates.prototype.show_flash_template = function(tmpl, tmpl_data) {
      var msg, template;
      if (tmpl_data == null) {
        tmpl_data = {};
      }
      template = _.template($("#tpl_" + tmpl).html());
      msg = template(tmpl_data);
      return this.show_flash(msg);
    };

    MyLibraryReadingStates.prototype.show_flash = function(msg, type) {
      var flash_container, flasher;
      if (type == null) {
        type = "info";
      }
      flash_container = $('.flash_container');
      flasher = new Scribd.Flasher(flash_container, {
        raw: true,
        duration: this.opts.flash_duration
      });
      flasher.show(type, msg);
      return flash_container.dispatch("click", {
        remove_bookmark: (function(_this) {
          return function() {
            if (_this.opts.current_state != null) {
              return _this.revert_state();
            } else {
              return _this.remove_bookmark();
            }
          };
        })(this)
      });
    };

    return MyLibraryReadingStates;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/end_of_reading_alert.coffee (last modified: 2016-02-05 22:21:55 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, img, ref, span;

  ref = React.DOM, a = ref.a, div = ref.div, img = ref.img, span = ref.span;

  component = Scribd.R.component_builder("Shared.React.EndOfReadingAlert", {
    "css_class": "autogen_class_views_books_end_of_reading_alert"
  });

  component({
    widget_css_classes: function(default_cls) {
      return _.compact([default_cls, "end_of_reading_alert", this.props.next_issue ? "series" : void 0, this.props.audiobook ? "audiobook" : void 0, this.props.comic ? "comic" : void 0]).join(" ");
    },
    enclosing_element_args: function(args) {
      return $.extend(args, {
        href: this.props.url,
        target: this.props.audiobook ? "_blank" : void 0
      });
    },
    enclosing_element_type: function() {
      return a;
    },
    componentDidMount: function() {
      return Scribd.eor_alert = new Scribd.EndOfReadingAlert(this.container(), $.extend({}, this.props));
    },
    render: function() {
      if (this.props.next_issue) {
        return this.render_for_series();
      } else {
        return this.render_for_single();
      }
    },
    render_for_series: function() {
      return div({
        className: "collapsible series",
        children: [
          img({
            src: this.props.next_issue.thumbnail_url
          }), div({
            className: "text_block",
            children: [
              div({
                className: "sub_text"
              }, "You've reached the end of this volume"), div({
                className: "title_line",
                children: [
                  span({
                    className: "next_label"
                  }, "Next up:"), span({
                    className: "series_title"
                  }, this.props.next_issue.title)
                ]
              })
            ]
          }), div({
            className: "icon-rightarrow arrow"
          })
        ]
      });
    },
    render_for_single: function() {
      return div({
        className: "collapsible",
        children: [
          div({
            className: "text_block",
            children: [
              div({}, "You've reached the end of this title"), div({
                className: "cta"
              }, "Click here to leave a rating and see related titles")
            ]
          }), div({
            className: "icon-rightarrow arrow"
          })
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/confirm_lightbox.coffee (last modified: 2016-07-13 23:20:23 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var button, component, div, p, ref, span;

  ref = React.DOM, div = ref.div, button = ref.button, p = ref.p, span = ref.span;

  component = Scribd.R.component_builder("Shared.React.ConfirmLightbox", {
    "css_class": "autogen_class_views_shared_react_confirm_lightbox"
  });

  component({
    dismiss_lightbox: function(e) {
      var target;
      return target = $(e.target);
    },
    can_close: function() {
      if (this.props.closable != null) {
        return this.props.closable;
      } else {
        return true;
      }
    },
    componentDidMount: function() {
      var lightbox;
      lightbox = new Scribd.Lightbox(this.container().find(".lightbox"), false);
      this.setState({
        lightbox: lightbox
      });
      return lightbox.set_position();
    },
    render: function() {
      return div({
        className: "lightbox_overlay",
        onClick: (function(_this) {
          return function(e) {
            if (!$(e.target).is(".lightbox_overlay")) {
              return false;
            }
            if (_this.can_close()) {
              return _this.trigger("confirm_lightbox:close");
            }
          };
        })(this),
        children: this.render_lightbox()
      });
    },
    render_lightbox_inside: function() {
      var buttons;
      buttons = this.props.buttons || [
        {
          title: "OK",
          action: "confirm"
        }
      ];
      buttons = buttons.map((function(_this) {
        return function(b) {
          return _this.common_button({
            className: b.action + "_btn " + (b.action === "confirm" ? 'outline_btn' : void 0),
            onClick: function(e) {
              var $el;
              $el = $(e.currentTarget);
              return _this.trigger("confirm_lightbox:" + ($el.data('action')), {
                button: $el,
                props: _this.props
              });
            },
            "data-track": b.title,
            "data-action": b.action
          }, b.title);
        };
      })(this));
      return [
        this.props.confirm_text ? p({
          className: "confirm_text"
        }, this.props.confirm_text) : void 0, div({
          className: "actions",
          children: buttons
        })
      ];
    },
    render_lightbox: function() {
      return div({
        "data-track_category": "confirm_lightbox",
        className: "lightbox autogen_class_views_shared_confirm_lightbox autogen_class_widgets_lightbox autogen_class_widgets_base " + (this.props.simple_style ? 'simple_style vertically_centered' : void 0)
      }, div({
        className: "wrapper",
        children: [
          this.can_close() ? div({
            className: "close_button",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("confirm_lightbox:close");
              };
            })(this)
          }, span({
            className: "icon-close"
          })) : void 0, this.props.title ? div({
            className: "title"
          }, this.props.title) : void 0, div({
            className: "content",
            children: this.render_lightbox_inside()
          })
        ]
      }));
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/audiobooks/show.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var CSSTransitionGroup, a, component, div, h3, img, input, p, ref, span;

  ref = React.DOM, a = ref.a, input = ref.input, div = ref.div, img = ref.img, span = ref.span, h3 = ref.h3, p = ref.p;

  component = Scribd.R.component_builder("Audiobooks.Show", {
    "css_class": "autogen_class_views_audiobooks_show",
    "track_category": "audiobooks"
  });

  CSSTransitionGroup = React.createFactory(React.addons.CSSTransitionGroup);

  component({
    getInitialState: function() {
      var ref1;
      return {
        initial_loading: true,
        loaded: false,
        paused: false,
        options_open: false,
        options_menu_open: null,
        player_state: null,
        counter: 0,
        play_time: null,
        chapter_duration: null,
        table_of_contents: null,
        bookmarks: null,
        volume: 0,
        flash_message: null,
        sleep_timer_enabled: null,
        last_selected_sleep_timer: 30,
        muted: false,
        recovering: false,
        audio_playback_error: false,
        seen_last_track: false,
        settings: this.get_settings(),
        discounted_banner: this.props.credit_data.show_discounted_banner,
        preview_restricted: this.props.credit_data.preview_restricted,
        progress: ((ref1 = Scribd.current_doc) != null ? ref1.reading_progress : void 0) || {},
        initial_progress: true,
        past_preview: this.progress_past_preview()
      };
    },
    progress_past_preview: function() {
      if (!this.props.credit_data.preview_restricted) {
        return false;
      }
      return Scribd.current_doc.reading_progress.offset > this.props.credit_data.preview_threshold;
    },
    widget_css_classes: function(cls) {
      var obj;
      return classNames((
        obj = {},
        obj["" + cls] = true,
        obj["is_loading"] = this.state.initial_loading,
        obj["is_preview_restricted"] = this.props.credit_data.preview_restricted,
        obj["is_scribd_select"] = this.props.credit_data.scribd_select,
        obj
      ));
    },
    componentWillUpdate: function(next_props, next_state) {
      if (next_state.flash_message && !this.state.flash_message) {
        return setTimeout((function(_this) {
          return function() {
            return _this.setState({
              flash_message: false
            });
          };
        })(this), 2000);
      }
    },
    componentDidUpdate: function(prev_props, prev_state) {
      var loc, preview_remaining, ref1;
      if (this.state.preview_expired && !prev_state.preview_expired) {
        this.container().trigger("scribd:audiobook:preview_expired");
      }
      preview_remaining = this.props.credit_data.preview_threshold - this.state.global_playtime;
      if ((ref1 = Scribd.audiobook_player) != null ? ref1.isPlaying() : void 0) {
        if (this.state.preview_restricted && !this.state.preview_expired && preview_remaining <= 0 && !Scribd.audiobook_player.is_seeking) {
          this.setState({
            preview_expired: true,
            show_preview_finished: true
          });
          Scribd.audiobook_player.pause();
          loc = Scribd.ReadingProgress.Audio.get_track_and_position(this.props.credit_data.preview_threshold);
          Scribd.audiobook_player.goto_track_and_pos(loc.track_num, loc.track_pos);
        } else if (preview_remaining > 0 && this.state.preview_expired) {
          this.setState({
            preview_expired: false,
            show_preview_finished: false,
            show_preview_roadblock: false
          });
        }
      }
      if (this.state.save_settings) {
        this.save_settings(this.state.save_settings);
        this.setState({
          settings: this.state.save_settings,
          save_settings: null
        });
      }
      return $(this.refs.player_container).attr("style", this.gradient_style());
    },
    load_player: function(restart) {
      var progress;
      if (restart == null) {
        restart = false;
      }
      this.setState({
        loaded: true
      });
      progress = restart ? 0 : this.state.progress.offset || 0;
      return Scribd.audiobook_player.load(this.props.audiobook.external_id, progress);
    },
    componentDidMount: function() {
      var save_volume;
      if (this.state.discounted_banner) {
        window.setTimeout((function(_this) {
          return function() {
            return _this.setState({
              discounted_banner: false
            });
          };
        })(this), 5000);
      }
      Scribd.audiobook_player || (Scribd.audiobook_player = new Scribd.Audiobooks({
        account_id: this.props.audiobook.account_id,
        session_key: this.props.audiobook.session_key,
        debug: this.props.audiobook.debug
      }));
      if (!this.state.past_preview) {
        this.load_player();
      }
      Scribd.audiobook_player.on('scribd:audiobook:ready', (function(_this) {
        return function() {
          if (_this.state.settings.volume != null) {
            Scribd.audiobook_player.set_volume(_this.state.settings.volume);
          }
          return _.defer(function() {
            var loc;
            loc = Scribd.ReadingProgress.Audio.get_track_and_position(_this.props.credit_data.preview_threshold);
            return _this.setState({
              preview_track_num: loc.track_num,
              preview_track_pos: loc.track_pos,
              on_last_track: Scribd.audiobook_player.get_track_num() === loc.track_num,
              table_of_contents: Scribd.audiobook_player.player.currentTitle.playlist
            });
          });
        };
      })(this));
      Scribd.audiobook_player.on("scribd:audiobook:loadComplete", (function(_this) {
        return function() {
          _.defer(function() {
            return _this.setup_bookmarks_and_reading_progress();
          });
          return _this.setState({
            initial_loading: false
          });
        };
      })(this));
      Scribd.audiobook_player.on('scribd:audiobook:timeChanged', (function(_this) {
        return function(time) {
          var chapter_dur, loc, progress;
          chapter_dur = _this.state.preview_restricted && _this.state.on_last_track ? _this.state.preview_track_pos : Scribd.audiobook_player.player.getLength();
          if (_this.reading_progress != null) {
            loc = Scribd.audiobook_player.current_track_location();
            progress = _this.reading_progress.get_progress(loc.track_num, loc.track_pos);
            _this.setState({
              play_time: time,
              chapter_duration: chapter_dur,
              global_playtime: progress
            });
          }
          if (_this.state.on_last_track) {
            return _this.check_for_eor();
          }
        };
      })(this));
      Scribd.audiobook_player.on('scribd:audiobook:volume_changed', (function(_this) {
        return function(vol) {
          return _this.setState({
            volume: Scribd.audiobook_player.get_volume()
          });
        };
      })(this));
      Scribd.audiobook_player.on('scribd:audiobook:play', (function(_this) {
        return function() {
          return _this.setState({
            player_state: "playing",
            volume: Scribd.audiobook_player.get_volume(),
            on_last_track: _this.state.preview_restricted && Scribd.audiobook_player.get_track_num() === _this.state.preview_track_num
          });
        };
      })(this));
      Scribd.audiobook_player.on('scribd:audiobook:pause', (function(_this) {
        return function() {
          return _this.setState({
            player_state: "paused"
          });
        };
      })(this));
      Scribd.audiobook_player.on("scribd:audiobook:trackChanged", (function(_this) {
        return function(track_num) {
          _this.setState({
            current_track: track_num,
            on_last_track: track_num === _this.state.preview_track_num
          });
          return _this.check_for_eor();
        };
      })(this));
      Scribd.audiobook_player.on("scribd:audiobook:recovery_start", (function(_this) {
        return function() {
          return _this.setState({
            recovering: true
          });
        };
      })(this));
      Scribd.audiobook_player.on("scribd:audiobook:recovery_end", (function(_this) {
        return function() {
          return _this.setState({
            recovering: false
          });
        };
      })(this));
      Scribd.audiobook_player.on("scribd:audiobook:recovery_failed", (function(_this) {
        return function() {
          return _this.setState({
            audio_playback_error: true
          });
        };
      })(this));
      Scribd.audiobook_player.on("scribd:audiobook:load_error", (function(_this) {
        return function(err) {
          return _this.setState({
            audio_playback_error: true
          });
        };
      })(this));
      Scribd.audiobook_player.on("scribd:audiobook:setup_error", (function(_this) {
        return function(err) {
          return _this.setState({
            audio_playback_error: true
          });
        };
      })(this));
      Scribd.audiobook_player.on("scribd:audiobook:init_error", (function(_this) {
        return function(err) {
          return _this.setState({
            audio_playback_error: true
          });
        };
      })(this));
      if (this.state.settings.sleep_timer != null) {
        this.setState({
          last_selected_sleep_timer: this.state.settings.sleep_timer
        });
      }
      $(window).on("scribd:external_reading_progress", (function(_this) {
        return function(event, progress) {
          return _this.setState({
            progress: progress,
            initial_progress: false
          });
        };
      })(this));
      this.bind_keyboard_handlers();
      setInterval((function(_this) {
        return function() {
          if (_this.state.player_state === "playing") {
            return;
          }
          if (!_this.state.sleep_timer_enabled) {
            return;
          }
          return _this.setState({
            counter: _this.state.counter + 1
          });
        };
      })(this), 1000);
      save_volume = _.debounce((function(_this) {
        return function(vol) {
          var settings;
          settings = _this.state.settings || {};
          settings.volume = vol;
          return _this.setState({
            save_settings: settings
          });
        };
      })(this), 1000);
      this.dispatch({
        toggle_options: this.toggle_options,
        show_menu: (function(_this) {
          return function(e, menu) {
            return _this.setState({
              options_menu_open: _this.state.options_menu_open !== menu && menu
            });
          };
        })(this),
        play: (function(_this) {
          return function() {
            return Scribd.audiobook_player.play();
          };
        })(this),
        pause: (function(_this) {
          return function() {
            if (_this.state.loaded) {
              return Scribd.audiobook_player.pause();
            }
          };
        })(this),
        next_track: (function(_this) {
          return function() {
            if (_this.state.on_last_track) {
              _this.setState({
                show_preview_roadblock: true
              });
              return _this.trigger("pause");
            } else {
              return Scribd.audiobook_player.next_track();
            }
          };
        })(this),
        prev_track: (function(_this) {
          return function() {
            return Scribd.audiobook_player.prev_track();
          };
        })(this),
        seek_back: (function(_this) {
          return function() {
            return Scribd.audiobook_player.seek_back();
          };
        })(this),
        seek_ahead: (function(_this) {
          return function() {
            return Scribd.audiobook_player.seek_ahead();
          };
        })(this),
        volume_up: (function(_this) {
          return function() {
            return Scribd.audiobook_player.increase_volume();
          };
        })(this),
        volume_down: (function(_this) {
          return function() {
            return Scribd.audiobook_player.decrease_volume();
          };
        })(this),
        toggle_mute: (function(_this) {
          return function() {
            if (_this.state.muted) {
              return _this.trigger("unmute");
            } else {
              return _this.trigger("mute");
            }
          };
        })(this),
        mute: (function(_this) {
          return function() {
            if (_this.state.muted) {
              return;
            }
            _this.setState({
              mute_vol: Scribd.audiobook_player.get_volume(),
              muted: true
            });
            return Scribd.audiobook_player.set_volume(0);
          };
        })(this),
        unmute: (function(_this) {
          return function() {
            if (!_this.state.muted) {
              return;
            }
            _this.setState({
              muted: false
            });
            return Scribd.audiobook_player.set_volume(_this.state.mute_vol || 50);
          };
        })(this),
        goto_track: (function(_this) {
          return function(e, track_num) {
            return Scribd.audiobook_player.goto_track(track_num);
          };
        })(this),
        goto_bookmark: (function(_this) {
          return function(e, track_num, pos) {
            return Scribd.audiobook_player.goto_track_and_pos(track_num, pos);
          };
        })(this),
        add_bookmark: (function(_this) {
          return function(e) {
            var track_loc;
            Scribd.audiobook_player.trigger("scribd:audiobook:bookmark_location");
            track_loc = Scribd.audiobook_player.current_track_location();
            _this.setState({
              flash_message: "Bookmark added"
            });
            return Scribd.bookmarks.save_bookmark(_this.reading_progress.get_progress(track_loc.track_num, track_loc.track_pos)).done(function(bookmark) {
              var base;
              if (!bookmark) {
                return;
              }
              (base = _this.state).bookmarks || (base.bookmarks = []);
              _this.state.bookmarks.push(bookmark);
              return _this.setState({
                bookmarks: _this.state.bookmarks
              });
            });
          };
        })(this),
        delete_bookmark: (function(_this) {
          return function(e, id) {
            var b;
            Scribd.bookmarks.delete_bookmark(id);
            return _this.setState({
              bookmarks: (function() {
                var i, len, ref1, results;
                ref1 = this.state.bookmarks;
                results = [];
                for (i = 0, len = ref1.length; i < len; i++) {
                  b = ref1[i];
                  if (b.id !== id) {
                    results.push(b);
                  }
                }
                return results;
              }).call(_this)
            });
          };
        })(this),
        disable_sleep_timer: (function(_this) {
          return function() {
            Scribd.audiobook_player.cancel_sleep();
            return _this.setState({
              sleep_timer_enabled: false
            });
          };
        })(this),
        toggle_sleep_timer: (function(_this) {
          return function() {
            var enabled, minutes;
            minutes = _this.state.last_selected_sleep_timer;
            enabled = Scribd.audiobook_player.sleep_timer != null ? (Scribd.audiobook_player.cancel_sleep(), false) : (Scribd.audiobook_player.sleep_in(minutes), true);
            return _this.setState({
              sleep_timer_enabled: enabled
            });
          };
        })(this),
        set_sleep_timer: (function(_this) {
          return function(e, amount) {
            var settings;
            Scribd.audiobook_player.sleep_in(amount);
            settings = _this.state.settings || {};
            settings.sleep_timer = amount;
            return _this.setState({
              last_selected_sleep_timer: amount,
              sleep_timer_enabled: true,
              save_settings: settings
            });
          };
        })(this),
        set_progress: (function(_this) {
          return function(e, pp) {
            var target, track_dur, v;
            target = $(e.target);
            if (target.closest(".track").length) {
              track_dur = _this.state.preview_restricted && _this.state.on_last_track ? _this.state.preview_track_pos : Scribd.audiobook_player.get_track_duration();
              Scribd.audiobook_player.seek_to(track_dur * pp);
            }
            if (target.closest(".volume_slider").length) {
              if (_this.state.muted) {
                _this.setState({
                  muted: false
                });
              }
              v = Math.round(pp * 100);
              save_volume(v);
              return Scribd.audiobook_player.set_volume(v);
            }
          };
        })(this),
        "confirm_lightbox:close": (function(_this) {
          return function() {
            return _this.setState({
              audio_playback_error: false
            });
          };
        })(this),
        "external_progress_lightbox:close": (function(_this) {
          return function() {
            return _this.setState({
              progress: {}
            });
          };
        })(this),
        "past_preview_lightbox:close": (function(_this) {
          return function() {
            return _this.setState({
              past_preview: false
            });
          };
        })(this),
        "confirm_lightbox:confirm": (function(_this) {
          return function() {
            return _this.setState({
              audio_playback_error: false
            });
          };
        })(this),
        "preview_finished_alert:hide": (function(_this) {
          return function() {
            return _this.setState({
              show_preview_finished: false
            });
          };
        })(this),
        "preview_roadblock:hide": (function(_this) {
          return function() {
            return _this.setState({
              show_preview_roadblock: false
            });
          };
        })(this),
        "restart_preview": (function(_this) {
          return function() {
            if (_this.state.loaded) {
              Scribd.audiobook_player.goto_track(0);
              Scribd.audiobook_player.play();
            } else {
              _this.load_player(true);
            }
            return _this.setState({
              past_preview: false,
              show_preview_finished: false
            });
          };
        })(this),
        audio_playback_error: (function(_this) {
          return function() {
            return _this.setState({
              audio_playback_error: true
            });
          };
        })(this)
      });
      $(document.body).off("scribd:credit_redeemed");
      $(document.body).on("scribd:credit_redeemed", (function(_this) {
        return function() {
          if (!_this.state.loaded) {
            _this.load_player();
          }
          try {
            Scribd.R.Shared.React.LibraryButton.instances[0].credit_redeemed();
          } catch (undefined) {}
          _this.setState({
            preview_restricted: false,
            credit_redeemed: true,
            on_last_track: false
          });
          return _this.setup_bookmarks_and_reading_progress();
        };
      })(this));
      $(document.body).on("scribd:credit_btn_clicked", (function(_this) {
        return function() {
          return _this.trigger("pause");
        };
      })(this));
      return Scribd.send_pingback(this.props.pingback_url);
    },
    setup_bookmarks_and_reading_progress: function() {
      this.reading_progress = new Scribd.ReadingProgress.Audio({
        preview_restricted: this.state.preview_restricted,
        preview_threshold: this.props.credit_data.preview_threshold
      });
      if (!Scribd.bookmarks) {
        Scribd.bookmarks = new Scribd.Audiobooks.Bookmarks(Scribd.audiobook_player, this.props.doc.id);
        return Scribd.bookmarks.fetch_bookmarks().done((function(_this) {
          return function(bookmarks) {
            return _this.setState({
              bookmarks: bookmarks
            });
          };
        })(this));
      }
    },
    bind_keyboard_handlers: function() {
      return $(window).on("keyup", (function(_this) {
        return function(e) {
          var v;
          if ($(e.target).closest("input").length) {
            return;
          }
          switch (e.keyCode) {
            case 32:
              if (Scribd.audiobook_player.isPlaying()) {
                return _this.trigger("pause");
              } else {
                return _this.trigger("play");
              }
              break;
            case 37:
            case 219:
              return _this.trigger("prev_track");
            case 39:
            case 221:
              return _this.trigger("next_track");
            case 48:
              return _this.trigger("toggle_mute");
            case 187:
              return _this.trigger("volume_up");
            case 189:
              return _this.trigger("volume_down");
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              v = (e.keyCode - 48) * 10;
              return Scribd.audiobook_player.set_volume(v);
            case 27:
              return _this.setState({
                options_open: false
              });
          }
        };
      })(this));
    },
    get_settings: function() {
      var settings_key;
      settings_key = "scribd:audioplayer";
      return Scribd.with_local_storage((function(_this) {
        return function(storage) {
          return $.extend({}, JSON.parse(storage.getItem(settings_key)));
        };
      })(this));
    },
    save_settings: function(settings) {
      var settings_key;
      settings_key = "scribd:audioplayer";
      return Scribd.with_local_storage((function(_this) {
        return function(storage) {
          return storage.setItem(settings_key, JSON.stringify(settings));
        };
      })(this));
    },
    toggle_options: function() {
      return this.setState({
        options_open: !this.state.options_open,
        options_menu_open: null
      });
    },
    check_for_eor: function() {
      var callback, cur_loc, cur_track, i, len, ref1;
      if (this.props.credit_data.preview_restricted) {
        return;
      }
      if (this.state.initial_loading) {
        return;
      }
      if (this.state.seen_last_track) {
        return;
      }
      if (!Scribd.eor_alert) {
        return;
      }
      if (!Scribd.audiobook_player.on_last_track()) {
        return;
      }
      cur_track = Scribd.audiobook_player.get_current_track();
      cur_loc = Scribd.audiobook_player.current_track_location();
      if (cur_loc.track_num === 0) {
        if (!(cur_loc.track_pos / cur_track.duration >= .95)) {
          return;
        }
      }
      Scribd.eor_alert.toggle(true);
      if (Scribd.audiobooks.end_of_reading_callbacks) {
        ref1 = Scribd.audiobooks.end_of_reading_callbacks;
        for (i = 0, len = ref1.length; i < len; i++) {
          callback = ref1[i];
          callback();
        }
      }
      return this.setState({
        seen_last_track: true
      });
    },
    render: function() {
      return [
        this.state.options_open ? Scribd.R.Audiobooks.Options(this.extend_props(this.state)) : void 0, this.state.audio_playback_error ? Scribd.R.Shared.React.ConfirmLightbox({
          title: "Audio Playback Error",
          confirm_text: "We're sorry, but audio playback is temporarily unavailable. Please try again in a few minutes."
        }) : this.state.past_preview ? this.Package.PastPreviewLightbox({
          closable: false,
          progress: this.state.progress,
          library_button: this.props.library_button,
          preview_restricted: this.state.preview_restricted,
          preview_threshold: this.props.credit_data.preview_threshold
        }) : Scribd.ReadingProgress.ExternalProgressLightbox.should_be_shown(this.state.progress) ? this.Package.ExternalProgressLightbox({
          credit_redeemed: this.state.credit_redeemed,
          initial_progress: this.state.initial_progress,
          preview_threshold: this.props.credit_data.preview_threshold,
          progress: this.state.progress
        }) : void 0, div({
          className: "header",
          children: this.page_header()
        }), div({
          ref: "player_container",
          className: "player_container " + (this.state.on_last_track ? 'on_last_track' : ''),
          children: [
            div({
              className: "columns_container",
              children: [
                this.state.preview_restricted ? div({
                  className: "headbar",
                  children: [!this.state.show_preview_finished ? this.Package.PreviewTimer(this.extend_props(this.state)) : void 0]
                }) : void 0, div({
                  className: "left_col",
                  children: [
                    img({
                      className: "cover",
                      src: this.props.doc.cover_url
                    }), this.props.credit_data.scribd_select ? div({
                      className: "flag",
                      children: [span({}, "")]
                    }) : void 0
                  ]
                }), div({
                  className: "right_col",
                  children: [!this.state.preview_restricted || (this.state.preview_restricted && !this.state.show_preview_finished) ? this.player() : void 0, this.state.preview_restricted ? this.state.show_preview_finished ? this.Package.PreviewFinishedMessage(this.extend_props(this.state)) : this.state.show_preview_roadblock ? this.Package.PreviewRoadblock(this.extend_props(this.state)) : void 0 : void 0]
                })
              ]
            })
          ]
        }), CSSTransitionGroup({
          transitionName: "discounted_banner",
          transitionEnter: false,
          transitionLeaveTimeout: 500,
          children: this.state.discounted_banner ? [
            div({
              className: "discounted_banner"
            }, "Unlimited until " + this.props.credit_data.discounted_expiration_date_formatted)
          ] : void 0
        })
      ];
    },
    gradient_style: function() {
      var direction, gradient_params;
      if (!this.props.gradient_color) {
        return;
      }
      direction = "top";
      gradient_params = direction + ", rgba(255, 255, 255, .1) 10%, " + this.props.gradient_color + " 100%";
      return "backgroundImage: -o-linear-gradient(" + gradient_params + "); background-image: -moz-linear-gradient(" + gradient_params + "); background-image: -webkit-linear-gradient(" + gradient_params + "); background-image: -ms-linear-gradient(" + gradient_params + ");";
    },
    player: function() {
      return div({
        className: "audioplayer_container"
      }, Scribd.R.Audiobooks.Player(this.extend_props(this.state)));
    },
    page_header: function() {
      return [
        a({
          href: "/",
          className: "logo",
          target: "_blank",
          "data-track": "logo"
        }), this.common_button({
          className: "options_handle outline_btn",
          onClick: this.toggle_options,
          children: [
            "Options", span({
              className: "handle_icon icon-menuclosed"
            })
          ]
        }), Scribd.R.Shared.React.LibraryButton(this.props.library_button), Scribd.R.Shared.React.EndOfReadingAlert(this.props.eor)
      ];
    }
  });

  component("PreviewTimer", {
    render: function() {
      var time_remaining;
      time_remaining = this.props.global_playtime != null ? Scribd.Audiobooks.format_dur(Math.max(0, this.props.credit_data.preview_threshold - this.props.global_playtime)) : "0:00";
      return div({
        className: "preview_timer",
        children: [
          div({
            className: "time_remaining",
            children: [
              span({
                className: "time"
              }, "" + time_remaining), span({}, " left in your preview")
            ]
          }), Scribd.R.Shared.React.LibraryButton(_.extend(this.props.library_button, {
            force_get_full_title: true,
            actions_select: false,
            extra_button_classes: ""
          }))
        ]
      });
    }
  });

  component("PreviewFinishedMessage", {
    render: function() {
      return div({
        className: "preview_finished_msg",
        children: [
          div({
            className: "message",
            children: [
              h3({}, "Get the full title"), p({}, "You've reached the end of this preview."), p({}, "Get the full title to keep listening."), Scribd.R.Shared.React.LibraryButton(_.extend(this.props.library_button, _.extend(this.props.library_button, {
                force_get_full_title: true,
                actions_select: false,
                extra_button_classes: ""
              })))
            ]
          }), a({
            href: "#",
            className: "return_to_preview",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("restart_preview");
              };
            })(this)
          }, "Restart preview")
        ]
      });
    }
  });

  component("PreviewRoadblock", {
    render: function() {
      return div({
        className: "preview_roadblock",
        children: [
          a({
            className: "close_btn",
            href: "#",
            children: [
              span({
                className: "icon-close",
                onClick: (function(_this) {
                  return function() {
                    return _this.trigger("preview_roadblock:hide");
                  };
                })(this)
              })
            ]
          }), div({
            className: "message",
            children: [
              p({}, "You are listening to a preview."), p({
                children: [
                  a({
                    href: "#",
                    onClick: (function(_this) {
                      return function(e) {
                        e.preventDefault();
                        return Scribd.with_login("credit_button", function() {
                          return Scribd.CreditLightbox.load(_this.props.library_button.credit_lightbox_url, $(document.body));
                        });
                      };
                    })(this)
                  }, "Get the full title"), span({}, " to keep listening")
                ]
              })
            ]
          }), a({
            href: "#",
            className: "return_to_preview",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("preview_roadblock:hide");
              };
            })(this)
          }, "Return to preview")
        ]
      });
    }
  });

  component("ExternalProgressLightbox", {
    dismiss_lightbox: function(e) {
      var target;
      return target = $(e.target);
    },
    can_close: function() {
      if (this.props.closable != null) {
        return this.props.closable;
      } else {
        return true;
      }
    },
    componentDidMount: function() {
      var lightbox;
      lightbox = new Scribd.Lightbox(this.container().find(".lightbox"), false);
      lightbox.set_position();
      this.set_player_position();
      return this.container().track_rats("reading_progress:progress_moved:show", {
        doc_id: Scribd.current_doc.id,
        destination_offset: this.props.progress.offset,
        offset_type: this.props.progress.offset_type,
        document_type: "audiobook"
      });
    },
    render: function() {
      return div({
        className: "lightbox_overlay",
        onClick: (function(_this) {
          return function(event) {
            if (_this.can_close()) {
              if (!$(event.target).is(".lightbox_overlay")) {
                return false;
              }
              return _this.trigger("external_progress_lightbox:close");
            }
          };
        })(this),
        children: this.render_lightbox()
      });
    },
    render_lightbox: function() {
      return div({
        "data-track_category": "audiobooks",
        className: "lightbox autogen_class_widgets_lightbox autogen_class_widgets_base"
      }, div({
        className: "wrapper",
        children: [
          this.can_close() ? div({
            className: "close_button",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("external_progress_lightbox:close");
              };
            })(this)
          }, span({
            className: "icon-close"
          })) : void 0, div({
            className: "content",
            children: ["We've moved you to where you listened on your " + this.props.progress.device_name]
          })
        ]
      }));
    },
    set_player_position: function() {
      var current_track_num, current_track_pos, new_track_postion, track_num_differs, track_pos_differs;
      if (this.props.initial_progress) {
        return;
      }
      if (this.props.progress.offset > this.props.preview_threshold && !this.props.credit_redeemed) {
        this.container().trigger("scribd:credit_redeemed");
      }
      current_track_num = Scribd.audiobook_player.get_track_num();
      current_track_pos = Scribd.audiobook_player.get_track_pos();
      new_track_postion = Scribd.ReadingProgress.Audio.get_track_and_position(this.props.progress.offset);
      track_num_differs = current_track_num !== new_track_postion.track_num;
      track_pos_differs = Math.abs(current_track_pos - new_track_postion.track_pos) > 10000;
      if (track_num_differs || track_pos_differs) {
        return Scribd.audiobook_player.goto_track_and_pos(new_track_postion.track_num, new_track_postion.track_pos);
      }
    }
  });

  component("PastPreviewLightbox", {
    dismiss_lightbox: function(e) {
      var target;
      return target = $(e.target);
    },
    can_close: function() {
      if (this.props.closable != null) {
        return this.props.closable;
      } else {
        return true;
      }
    },
    componentDidMount: function() {
      var lightbox;
      lightbox = new Scribd.Lightbox(this.container().find(".lightbox"), false);
      lightbox.set_position();
      return $(document.body).track_rats("reading_progress:progress_moved:show", {
        doc_id: Scribd.current_doc.id,
        desired_offset: Scribd.current_doc.reading_progress.offset,
        offset_bound: this.props.preview_threshold,
        offset_type: Scribd.current_doc.reading_progress.offset_type,
        document_type: "audiobook",
        is_preview: this.props.preview_restricted
      });
    },
    render: function() {
      return div({
        className: "lightbox_overlay",
        onClick: (function(_this) {
          return function(event) {
            if (!$(event.target).is(".lightbox_overlay")) {
              return false;
            }
            if (_this.can_close()) {
              return _this.trigger("past_preview_lightbox:close");
            }
          };
        })(this),
        children: this.render_lightbox()
      });
    },
    render_lightbox: function() {
      return div({
        "data-track_category": "audiobooks",
        className: "lightbox autogen_class_views_shared_confirm_lightbox autogen_class_widgets_lightbox autogen_class_widgets_base"
      }, div({
        className: "wrapper",
        children: [
          this.can_close() ? div({
            className: "close_button",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("past_preview_lightbox:close");
              };
            })(this)
          }, span({
            className: "icon-close"
          })) : void 0, div({
            className: "title"
          }, "Get the full title to continue"), div({
            className: "content",
            children: [
              p({
                className: "confirm_text"
              }, "Get the full title to continue listening from where you left off, or restart the preview."), div({
                className: "actions",
                children: [
                  this.common_button({
                    className: "outline_btn",
                    onClick: (function(_this) {
                      return function() {
                        _this.trigger("restart_preview");
                        return _this.trigger("past_preview_lightbox:close");
                      };
                    })(this)
                  }, "Restart preview"), span({
                    onClick: (function(_this) {
                      return function(event) {
                        return _this.trigger("past_preview_lightbox:close");
                      };
                    })(this),
                    children: [
                      Scribd.R.Shared.React.LibraryButton(_.extend({}, this.props.library_button, {
                        force_get_full_title: true,
                        actions_select: false
                      }))
                    ]
                  })
                ]
              })
            ]
          })
        ]
      }));
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/audiobooks/_options.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, button, component, div, h2, label, ref, span;

  ref = React.DOM, div = ref.div, span = ref.span, h2 = ref.h2, label = ref.label, a = ref.a, button = ref.button;

  component = Scribd.R.component_builder("Audiobooks.Options", {
    "css_class": "autogen_class_views_audiobooks_options",
    "track_category": "options"
  });

  component({
    widget_css_classes: function(classes) {
      return classes + " overlay_menu options";
    },
    enclosing_element_args: function(args) {
      args.onClick = this.dismiss_overlay;
      return args;
    },
    render: function() {
      return [
        this.props.options_menu_open ? div({
          className: "submenus"
        }, this.submenu()) : void 0, this.Package.Menu({
          doc_url: this.props.doc.url
        })
      ];
    },
    submenu: function() {
      switch (this.props.options_menu_open) {
        case "table_of_contents":
          return this.Package.TableOfContents(this.extend_props());
        case "bookmarks":
          return this.Package.Bookmarks(this.extend_props());
        case "share":
          return this.Package.Share(this.extend_props());
      }
    },
    dismiss_overlay: function(e) {
      var target;
      target = $(e.target);
      if (!(target.is(".overlay_menu") || target.closest(".masthead").length)) {
        return;
      }
      return this.trigger("toggle_options");
    }
  });

  component("Menu", {
    render: function() {
      return div({
        className: "menu menu_list",
        style: {
          right: "0"
        },
        children: [
          div({
            className: "masthead",
            children: [
              span({
                className: "icon-menuopen"
              }), h2({}, "Options")
            ]
          }), div({
            className: "list",
            children: this.menu_items()
          })
        ]
      });
    },
    menu_items: function() {
      var item;
      item = (function(_this) {
        return function(opts) {
          var anchor_opts;
          opts = _.extend({
            href: "#"
          }, opts);
          anchor_opts = {
            href: opts.href,
            onClick: function() {
              return _this.trigger("show_menu", opts.name);
            },
            children: [
              span({
                className: opts.icon
              }), opts.label
            ]
          };
          if (opts.target) {
            anchor_opts.target = opts.target;
          }
          return div({
            className: "menu_item",
            "data-menu": opts.name,
            "data-track": opts.name + "_opt",
            children: [a(anchor_opts)]
          });
        };
      })(this);
      return [
        item({
          name: "table_of_contents",
          label: "Table of Contents",
          icon: "icon-tableofcontents"
        }), item({
          name: "bookmarks",
          label: "Bookmarks",
          icon: "icon-bookmark"
        }), item({
          name: "about",
          label: "About Audiobook",
          icon: "icon-info-large",
          href: this.props.doc_url,
          target: "_blank"
        }), item({
          name: "share",
          label: "Share",
          icon: "icon-share"
        })
      ];
    }
  });

  component("TableOfContents", {
    render: function() {
      return div({
        className: "menu table_of_contents show",
        style: {
          right: "240px"
        },
        children: [
          div({
            className: "head"
          }, h2({}, "Table of Contents")), div({
            className: "body",
            children: [
              div({
                className: "track_listing"
              }, div({
                className: "items",
                children: this.toc_items()
              }))
            ]
          })
        ]
      });
    },
    toc_items: function() {
      var i, len, opts, preview_track_num, ref1, results, track_num;
      if (!this.props.table_of_contents) {
        return div({
          className: "empty_message"
        }, "Loading...");
      }
      preview_track_num = Scribd.ReadingProgress.Audio.get_track_and_position(this.props.credit_data.preview_threshold).track_num;
      ref1 = this.props.table_of_contents;
      results = [];
      for (track_num = i = 0, len = ref1.length; i < len; track_num = ++i) {
        opts = ref1[track_num];
        results.push((function(_this) {
          return function(opts, track_num) {
            var classes, disabled_track, formatted_duration, selected, title;
            selected = _this.props.current_track === track_num;
            title = _this.props.preview_restricted && track_num === preview_track_num ? "Preview of " : "";
            if (opts.chapter_number === 0 && track_num === 0) {
              title += "Introduction";
            } else {
              title += "Chapter " + track_num;
            }
            opts.title = title;
            disabled_track = _this.props.preview_restricted && track_num > preview_track_num;
            formatted_duration = Scribd.Audiobooks.format_dur(opts.duration);
            classes = ["item"];
            if (selected) {
              classes.push("selected");
            }
            if (disabled_track) {
              classes.push("disabled_row");
            }
            return div({
              className: classes.join(" "),
              "data-chapter": track_num,
              onClick: function(e) {
                if (!disabled_track) {
                  _this.trigger("goto_track", track_num);
                  _this.trigger("toggle_options");
                }
                return e.preventDefault();
              },
              children: [
                disabled_track ? span({
                  className: "disabled_text"
                }, "not available in preview") : span({
                  className: "duration",
                  "data-value": opts.duration
                }, formatted_duration), a({
                  href: "#",
                  className: "track"
                }, opts.title)
              ]
            });
          };
        })(this)(opts, track_num));
      }
      return results;
    }
  });

  component("Bookmarks", {
    render: function() {
      return div({
        className: "menu bookmarks track_listing",
        "data-track_category": "bookmarks",
        style: {
          right: "240px",
          display: "block"
        },
        children: [
          div({
            className: "head"
          }, h2({}, "Bookmarks")), div({
            className: "body"
          }, div({
            className: "bookmarks"
          }, div({
            className: "items",
            children: this.bookmark_items()
          })))
        ]
      });
    },
    bookmark_items: function() {
      var i, len, opts, ref1, results;
      if (!this.props.bookmarks) {
        return div({
          className: "empty_message"
        }, "Loading...");
      }
      if (this.props.bookmarks.length === 0) {
        return div({
          className: "empty_message",
          children: [
            "You haven't created any bookmarks yet. Click the ", span({
              className: "icon icon-web_player_icons_bookmark"
            }), " button on the player to create a new bookmark."
          ]
        });
      }
      ref1 = Scribd.bookmarks.process_bookmarks(this.props.bookmarks);
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        opts = ref1[i];
        results.push((function(_this) {
          return function(opts) {
            return div({
              "data-track_num": opts.track_num,
              "data-pos": opts.track_pos,
              className: "item",
              onClick: function(e) {
                _this.trigger("goto_bookmark", opts.track_num, opts.track_pos);
                _this.trigger("toggle_options");
                return e.preventDefault();
              },
              children: [
                a({
                  href: "#",
                  className: "delete",
                  title: "Delete bookmark",
                  onClick: function(e) {
                    _this.trigger("delete_bookmark", opts.id);
                    e.stopPropagation();
                    return e.preventDefault();
                  }
                }, span({
                  className: "icon-delete"
                })), div({
                  className: "track",
                  children: [
                    span({
                      className: "created_formatted",
                      "data-created": opts.created_at
                    }, opts.created_formatted), " | " + opts.loc_text + " | ", span({
                      className: "location"
                    }, opts.formatted_location)
                  ]
                })
              ]
            });
          };
        })(this)(opts));
      }
      return results;
    }
  });

  component("Share", {
    componentDidMount: function() {
      return new Scribd.SharingButtons(this.container(), this.props.share_opts);
    },
    render: function() {
      return div({
        className: "menu skinny share",
        "data-track_category": "share",
        style: {
          right: "240px",
          display: "block"
        },
        children: [
          div({
            className: "head"
          }, h2({}, "Share")), div({
            className: "body"
          }, this.sharing_buttons())
        ]
      });
    },
    sharing_buttons: function() {
      var share_button;
      share_button = function(opts) {
        return div({
          className: classNames(opts.className, "share_button")
        }, a({
          href: "" + (opts.href || '#'),
          onClick: opts.onClick,
          className: opts.a_classes || "",
          children: [
            span({
              className: "icon " + opts.icon
            }), span({
              className: "label"
            }, opts.label)
          ]
        }));
      };
      return div({
        className: "autogen_class_views_shared_sharing_buttons sharing_buttons stacked",
        children: [
          share_button({
            className: "facebook share_facebook_btn",
            icon: "icon-facebook2",
            label: "Facebook"
          }), share_button({
            className: "twitter share_twitter_btn",
            icon: "icon-twitter",
            label: "Twitter"
          }), share_button({
            className: "pinterest share_pinterest_btn",
            icon: "icon-pinterest",
            label: "Pinterest"
          }), share_button({
            className: "email",
            icon: "icon-email",
            label: "Email",
            href: this.props.share_opts.mailto_url
          })
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/audiobooks/_player.coffee (last modified: 2016-06-29 23:18:16 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, ref, span;

  ref = React.DOM, a = ref.a, div = ref.div, span = ref.span;

  component = Scribd.R.component_builder("Audiobooks.Player", {
    "css_class": "autogen_class_views_audiobooks_player",
    "track_category": "audiobooks"
  });

  component({
    getInitialState: function() {
      return {
        sleep_hover: new Scribd.HoverManager({
          enter_timeout: 1,
          show: (function(_this) {
            return function() {
              return _this.setState({
                sleep_timer_open: true
              });
            };
          })(this),
          hide: (function(_this) {
            return function() {
              return _this.setState({
                sleep_timer_open: false
              });
            };
          })(this)
        }),
        volume_hover: new Scribd.HoverManager({
          enter_timeout: 1,
          show: (function(_this) {
            return function() {
              return _this.setState({
                volume_open: true
              });
            };
          })(this),
          hide: (function(_this) {
            return function() {
              return _this.setState({
                volume_open: false
              });
            };
          })(this)
        }),
        sleep_timer_open: false,
        volume_open: false
      };
    },
    componentDidMount: function() {
      var el;
      el = this.container();
      el.on("hover", ".control.sleep, .sleep_options", (function(_this) {
        return function(e) {
          if (e.type === "mouseenter") {
            return _this.state.sleep_hover.enter();
          } else {
            return _this.state.sleep_hover.leave();
          }
        };
      })(this));
      return el.on("hover", ".control.volume, .volume_slider", (function(_this) {
        return function(e) {
          if (e.type === "mouseenter") {
            return _this.state.volume_hover.enter();
          } else {
            return _this.state.volume_hover.leave();
          }
        };
      })(this));
    },
    get_current_title: function() {
      var first_track, has_intro, player, total_tracks, track;
      if (this.props.initial_loading) {
        return "Just a moment...";
      }
      player = Scribd.audiobook_player;
      first_track = player.get_track(0);
      has_intro = first_track.title.toLowerCase() === "introduction";
      total_tracks = player.get_num_tracks();
      if (has_intro) {
        total_tracks -= 1;
      }
      if (track = player.get_current_track()) {
        if (this.props.preview_restricted && this.props.on_last_track) {
          if (track.chapter_number === 0) {
            return "Preview of " + track.title;
          } else {
            return "Preview of Chapter " + (player.get_track_num());
          }
        } else if (track.chapter_number === 0) {
          return track.title;
        } else {
          return "Chapter " + (player.get_track_num()) + " of " + total_tracks;
        }
      } else {
        return "";
      }
    },
    render: function() {
      return [
        this.props.recovering ? div({
          className: "recovering_overlay",
          children: [
            div({
              className: "scribd_spinner",
              "data-size": "60",
              style: {
                display: "block"
              }
            })
          ]
        }) : void 0, div({
          className: "meta",
          children: this.player_meta()
        }), div({
          className: "controls " + (this.props.player_state || ""),
          children: [
            div({
              className: "control_row row1",
              children: this.control_row1()
            }), div({
              className: "control_row row2",
              children: this.control_row2()
            }), div({
              className: "control_row row3",
              children: this.control_row3()
            })
          ]
        })
      ];
    },
    player_meta: function() {
      var author, narrator;
      return [
        div({
          className: "title"
        }, _.truncate(this.props.doc.title, 80)), (author = this.props.doc.author) ? div({
          className: "byline",
          children: [
            "by ", a({
              href: author.url,
              target: "_blank",
              "data-track": "author"
            }, author.name)
          ]
        }) : void 0, (narrator = this.props.doc.narrator) ? div({
          className: "narrator_byline",
          children: [
            "Narrated by ", a({
              href: narrator.url,
              target: "_blank",
              "data-track": "author"
            }, narrator.name)
          ]
        }) : void 0
      ];
    },
    control_row1: function() {
      var v, volume_class;
      v = this.props.volume;
      volume_class = v === 0 ? "icon-web_player_icons_volume_0 off" : !v || v > 66 ? "icon-web_player_icons_volume_3 high" : v > 33 ? "icon-web_player_icons_volume_2 med" : "icon-web_player_icons_volume_1 med";
      return [
        (v != null) && this.state.volume_open ? div({
          className: "volume_slider"
        }, this.Package.Slider({
          orientation: "vertical",
          progress: v / 100
        })) : void 0, a({
          href: "",
          title: "volume",
          className: "control volume",
          onClick: (function(_this) {
            return function(e) {
              _this.trigger("toggle_mute");
              return e.preventDefault();
            };
          })(this),
          "data-track": "volume",
          "data-track_params": "mute",
          children: [
            span({
              className: volume_class,
              style: {
                display: "block"
              }
            })
          ]
        }), this.state.sleep_timer_open ? this.sleep_options() : void 0, a({
          href: "#",
          title: "Set sleep timer",
          className: "control sleep " + (this.props.sleep_timer_enabled ? "selected" : ""),
          "data-track_params": "goto_sleep",
          onClick: (function(_this) {
            return function() {
              return _this.trigger("toggle_sleep_timer");
            };
          })(this)
        }, span({
          className: "icon-sleep"
        })), a({
          href: "#",
          title: "Bookmark",
          className: "control bookmark",
          onClick: ((function(_this) {
            return function() {
              return _this.trigger("add_bookmark");
            };
          })(this))
        }, span({
          className: "icon-web_player_icons_bookmark"
        }))
      ];
    },
    sleep_options: function() {
      var opt;
      opt = (function(_this) {
        return function(dur, dur_mins) {
          return a({
            href: "#",
            className: "sleep_dur " + (dur_mins === _this.props.last_selected_sleep_timer ? "selected" : ""),
            "data-track": dur.toLowerCase(),
            onClick: function(e) {
              _this.trigger("set_sleep_timer", dur_mins);
              return e.preventDefault();
            }
          }, dur);
        };
      })(this);
      return div({
        className: "sleep_options",
        "data-track_category": "sleep_dur",
        style: {
          display: "block"
        },
        children: [
          opt("2h", 120), opt("1h", 60), opt("30m", 30), opt("15m", 15), opt("5m", 5), a({
            href: "#",
            className: "sleep_dur",
            "data-track": "off",
            onClick: (function(_this) {
              return function(e) {
                _this.trigger("disable_sleep_timer");
                return e.preventDefault();
              };
            })(this)
          }, "Off")
        ]
      });
    },
    control_row2: function() {
      var message, progress, time_left;
      progress = (this.props.play_time != null) && (this.props.chapter_duration != null) ? this.props.play_time / this.props.chapter_duration : void 0;
      message = this.props.flash_message ? this.props.flash_message : this.props.sleep_timer_enabled ? (time_left = Scribd.audiobook_player.sleep_time_remaining(), time_left > 0 ? "Sleep Timer " : "Sleep Timer Expired") : void 0;
      return [
        div({
          className: "scrubber",
          children: [
            (this.props.play_time != null) && (this.props.chapter_duration != null) ? [
              div({
                className: "time_remaining"
              }, "-" + (Scribd.Audiobooks.format_dur(this.props.chapter_duration - this.props.play_time))), div({
                className: "current_time"
              }, Scribd.Audiobooks.format_dur(this.props.play_time))
            ] : void 0, div({
              className: "track_info"
            }, this.get_current_title()), message && (time_left != null) ? [
              div({
                className: "message",
                style: {
                  display: "block"
                }
              }, span({
                className: "message_text"
              }, message, span({
                className: "timer"
              }, "" + (Scribd.Audiobooks.format_dur(time_left)))))
            ] : void 0, div({
              className: "track"
            }, this.Package.Slider({
              progress: progress
            }))
          ]
        })
      ];
    },
    control_row3: function() {
      var control;
      control = (function(_this) {
        return function(opts) {
          return a({
            href: "#",
            onClick: (function() {
              return _this.trigger(opts.name);
            }),
            title: opts.title,
            className: "control " + opts.name
          }, span({
            className: opts.icon
          }));
        };
      })(this);
      return div({
        "data-track_category": "control",
        children: [
          control({
            title: "Previous chapter",
            name: "prev_track",
            icon: "icon-track_back"
          }), control({
            name: "seek_back",
            title: "Jump back",
            icon: "icon-30_back"
          }), this.props.player_state === "playing" ? control({
            name: "pause",
            title: "Pause",
            icon: "icon-web_player_icons_pause"
          }) : control({
            name: "play",
            title: "Play",
            icon: "icon-web_player_icons_play"
          }), control({
            name: "seek_ahead",
            title: "Jump ahead",
            icon: "icon-30_fwd"
          }), control({
            name: "next_track",
            title: "Next chapter",
            icon: "icon-track_fwd"
          })
        ]
      });
    }
  });

  component("Slider", {
    getInitialState: function() {
      return {
        dragging: false,
        drag_progress: null
      };
    },
    componentDidMount: function() {
      return $(this.refs.scrubber_handle).draggable({
        start: (function(_this) {
          return function() {
            return _this.setState({
              dragging: true
            });
          };
        })(this),
        stop: (function(_this) {
          return function() {
            _this.trigger("set_progress", _this.state.drag_progress);
            _this.setState({
              dragging: false,
              drag_progress: null,
              just_dragged: true
            });
            return _.defer(function() {
              return _this.setState({
                just_dragged: false
              });
            });
          };
        })(this),
        move: (function(_this) {
          return function(dx, dy, x, y) {
            return _this.setState({
              drag_progress: _this.progress_for_coords(x, y)
            });
          };
        })(this)
      });
    },
    progress_for_coords: function(x, y) {
      var el, h, left, pp, ref1, top, w;
      el = this.container();
      ref1 = el.offset(), left = ref1.left, top = ref1.top;
      pp = (function() {
        switch (this.get_orientation()) {
          case "horizontal":
            x = x - left;
            w = el.width();
            return x / w;
          case "vertical":
            y = y - top;
            h = el.height();
            return 1 - y / h;
        }
      }).call(this);
      pp = Math.min(1, Math.max(0, pp));
      return pp;
    },
    click: function(e) {
      var el, x, y;
      if (this.state.just_dragged) {
        return;
      }
      if (this.props.progress == null) {
        return;
      }
      el = this.container();
      x = e.pageX;
      y = e.pageY;
      return this.trigger("set_progress", this.progress_for_coords(x, y));
    },
    get_orientation: function() {
      return this.props.orientation || "horizontal";
    },
    render: function() {
      var display_progress, fill_style, handle_style, orientation, pp, ref1;
      orientation = this.get_orientation();
      display_progress = this.state.dragging ? (ref1 = this.state.drag_progress) != null ? ref1 : this.props.progress : this.props.progress != null ? this.props.progress : void 0;
      if (display_progress != null) {
        pp = (Math.round(display_progress * 100)) + "%";
        switch (orientation) {
          case "horizontal":
            fill_style = {
              width: pp
            };
            handle_style = {
              left: pp,
              marginLeft: "-6px"
            };
            break;
          case "vertical":
            fill_style = {
              height: pp
            };
            handle_style = {
              bottom: pp,
              marginBottom: "-6px"
            };
        }
      } else {
        fill_style = {
          display: "none"
        };
        handle_style = {
          display: "none"
        };
      }
      return div({
        className: "autogen_class_views_books_slider " + orientation + " slider scribd_slider " + (this.state.dragging ? "dragging" : ""),
        onClick: this.click,
        children: [
          div({
            className: "track"
          }), div({
            className: "track fill",
            style: fill_style
          }), div({
            ref: "scrubber_handle",
            className: "handle",
            style: handle_style
          })
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/external_progress_lightbox.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.ExternalProgressLightbox = (function(superClass) {
    extend(ExternalProgressLightbox, superClass);

    ExternalProgressLightbox.should_be_shown = function(progress) {
      if (!(progress != null ? progress.offset : void 0)) {
        return false;
      }
      if (progress.from_current_device) {
        return false;
      }
      if (progress.device_name === "browser") {
        return false;
      }
      return true;
    };

    function ExternalProgressLightbox(container, opts) {
      var ref;
      this.opts = opts;
      this.container = $(container);
      ExternalProgressLightbox.__super__.constructor.apply(this, arguments);
      this.show(this.progress = (ref = Scribd.current_doc) != null ? ref.reading_progress : void 0);
      $(window).on("scribd:external_reading_progress", (function(_this) {
        return function(event, progress) {
          return _this.show(progress);
        };
      })(this));
    }

    ExternalProgressLightbox.prototype.show = function(progress1) {
      var document_type;
      this.progress = progress1;
      if (Scribd.ReadingProgress.ExternalProgressLightbox.should_be_shown(this.progress)) {
        this.container.find(".device_name").text(this.progress.device_name);
        ExternalProgressLightbox.__super__.show.apply(this, arguments);
        document_type = Scribd.current_doc.is_comic ? "comic" : Scribd.current_doc.is_sheet_music ? "sheet music" : "book";
        return this.container.track_rats("reading_progress:progress_moved:show", {
          doc_id: Scribd.current_doc.id,
          destination_offset: this.progress.offset,
          offset_type: this.progress.offset_type,
          document_type: document_type
        });
      }
    };

    return ExternalProgressLightbox;

  })(Scribd.StackedLightbox);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/reading_progress/past_preview_lightbox.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReadingProgress.PastPreviewLightbox = (function(superClass) {
    extend(PastPreviewLightbox, superClass);

    PastPreviewLightbox.should_be_shown = (function() {
      var show;
      show = true;
      return function() {
        var progress, ref;
        if (!show) {
          return false;
        }
        if (!Scribd.logged_in) {
          return false;
        }
        show = false;
        progress = ((ref = Scribd.current_doc.reading_progress) != null ? ref.offset : void 0) || 0;
        if (Scribd.read_page != null) {
          return Scribd.read_page.epub.isProgressBeyondBounds(null, progress);
        } else if (typeof docManager !== "undefined" && docManager !== null) {
          return progress + 1 > docManager._maximumAllowedPage;
        }
      };
    })();

    function PastPreviewLightbox(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      PastPreviewLightbox.__super__.constructor.apply(this, arguments);
      this.show();
      this.container.dispatch("click", {
        restart_preview: (function(_this) {
          return function() {
            if (Scribd.read_page != null) {
              Scribd.read_page.goto_progress({
                offset_type: "character",
                offset: 0
              });
            } else if (typeof docManager !== "undefined" && docManager !== null) {
              docManager.gotoPage(1);
            }
            return _this.close(true);
          };
        })(this),
        get_full_title: (function(_this) {
          return function() {
            _this.close(true);
            return "continue";
          };
        })(this)
      });
    }

    PastPreviewLightbox.prototype.show = function() {
      var document_type;
      if (!Scribd.ReadingProgress.PastPreviewLightbox.should_be_shown()) {
        return;
      }
      if (!this.opts.credit_restricted) {
        return;
      }
      PastPreviewLightbox.__super__.show.apply(this, arguments);
      document_type = Scribd.current_doc.is_comic ? "comic" : Scribd.current_doc.is_sheet_music ? "sheet music" : "book";
      return this.container.track_rats("reading_progress:progress_moved:show", {
        doc_id: Scribd.current_doc.id,
        desired_offset: Scribd.current_doc.reading_progress.offset,
        offset_type: Scribd.current_doc.reading_progress.offset_type,
        document_type: document_type,
        is_preview: true
      });
    };

    PastPreviewLightbox.prototype.close = function(close) {
      if (close == null) {
        close = false;
      }
      if (close) {
        return PastPreviewLightbox.__super__.close.apply(this, arguments);
      }
    };

    return PastPreviewLightbox;

  })(Scribd.StackedLightbox);

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

