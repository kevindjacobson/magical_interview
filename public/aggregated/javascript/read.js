/************************************************************************
 * 'read.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-01-07 19:30:18 +0000
 * Generated at: 2016-01-09 00:21:09 +0000
 ************************************************************************/


/************************************************************************
 * :files, 'spec_javascripts', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'spec_javascripts', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-01-07 19:30:18 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-01-07 19:30:18 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2015-11-10 00:53:08 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/read2/store/buy_doc_manager.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.BuyDocManager = (function() {
    function BuyDocManager(buy_url) {
      this.buy_url = buy_url;
    }

    BuyDocManager.prototype.setup_buy_buttons = function(label_text) {
      var $doc,
        _this = this;
      $doc = $(document);
      return $doc.ready(function() {
        if (Scribd.ServerOptions && Scribd.ServerOptions.payments_store_disabled === true) {
          return $(".missing_page_buy_button").hide();
        } else {
          if (Scribd.current_doc.show_archive_paywall) {
            $('.missing_page_buy_link .btn_inner').text(label_text);
          } else {
            $(".missing_page_buy_button").hide();
          }
          return $doc.dispatch("click", {
            missing_page_buy_button: Scribd.current_doc.is_pmp ? _this.get_premium_callback('missing_page_signup') : Scribd.current_doc.can_purchase ? _this.get_buy_callback('button:click') : Scribd.current_doc.view_restricted ? _this.get_archive_callback('missing_page_signup') : void 0
          });
        }
      });
    };

    BuyDocManager.prototype.setup_missing_page_title = function(title_text) {
      var $doc,
        _this = this;
      $doc = $(document);
      return $doc.ready(function() {
        if (Scribd.current_doc.is_pmp || Scribd.current_doc.can_purchase || Scribd.current_doc.show_archive_paywall) {
          return $('.missing_page_number_title').text(title_text);
        }
      });
    };

    BuyDocManager.prototype.get_buy_callback = function(event) {
      var _this = this;
      return function() {
        var track_and_redirect;
        track_and_redirect = function() {
          $(document.body).track({
            category: "payments",
            action: "newdoc/store",
            label: "buy_now" + event
          });
          return window.location.href = _this.buy_url;
        };
        if (Scribd.logged_in) {
          Scribd.FacebookSession.attempt_facebook_upgrade(track_and_redirect);
        } else {
          track_and_redirect();
        }
        return false;
      };
    };

    BuyDocManager.prototype.get_subscription_callback = function(action, path) {
      var _this = this;
      return function() {
        var metadata, params, track_and_redirect;
        metadata = {
          context: Scribd.current_doc.signup_context,
          page: 'read',
          action: action,
          platform: 'web',
          logged_in: !!Scribd.logged_in
        };
        metadata = encodeURIComponent(JSON.stringify(metadata));
        params = "doc=" + Scribd.current_doc.id + "&metadata=" + metadata;
        track_and_redirect = function() {
          $(document.body).track({
            category: "payments",
            action: "newdoc",
            label: "" + Scribd.current_doc.signup_context + ":missing_page_button:click"
          });
          return window.location.href = path + "?" + params;
        };
        if (Scribd.logged_in) {
          Scribd.FacebookSession.attempt_facebook_upgrade(track_and_redirect);
        } else {
          Scribd.Lightbox.remote_open('join_today_lb', "https://sbx.scribd.com/archive/login?" + params, Scribd.toolbar_params(), Scribd.JoinTodayLightbox);
        }
        return false;
      };
    };

    BuyDocManager.prototype.get_premium_callback = function(action) {
      return this.get_subscription_callback(action, '/archive/pmp_checkout');
    };

    BuyDocManager.prototype.get_archive_callback = function(action) {
      return this.get_subscription_callback(action, '/archive/plans');
    };

    return BuyDocManager;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/mobile_download_forms.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var send_email, send_sms, track_click, track_event;

  track_event = Scribd.track_event;

  track_click = function(name, is_valid) {
    return $(document.body).track({
      category: "mobile_signup_" + name,
      action: 'click',
      label: "success:" + is_valid
    });
  };

  send_sms = function(_arg) {
    var document_id, params, phone_number, tracking_type,
      _this = this;
    document_id = _arg.document_id, phone_number = _arg.phone_number, tracking_type = _arg.tracking_type;
    params = {
      document_id: document_id,
      phone_number: phone_number
    };
    return $.post('/read/text_signup', params, function(response) {
      return track_click("sms_" + tracking_type, response.valid);
    });
  };

  send_email = function(_arg) {
    var tracking_type,
      _this = this;
    tracking_type = _arg.tracking_type;
    return $.post('/read/email_signup', function(response) {
      return track_click("email_" + tracking_type, response.valid);
    });
  };

  if (Scribd.Shared == null) {
    Scribd.Shared = {};
  }

  Scribd.Shared.MobileDownloadForms = {
    send_sms: send_sms,
    send_email: send_email
  };

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2015-11-10 00:53:08 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/login/_archive_login_lightbox.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.ArchiveLoginLightbox = (function() {
    function ArchiveLoginLightbox(container) {
      var _this = this;
      this.set_page();
      this.container = $(container);
      this.container.on("click", "a.skip_login", function() {
        return _this.container.track({
          action: "click",
          label: "" + _this.page + ":login_lightbox:skip_login"
        });
      });
    }

    ArchiveLoginLightbox.prototype.set_page = function() {
      var _ref;
      this.page = window.location.pathname.split("/")[1];
      this.page || (this.page = "home");
      if (((_ref = Scribd.current_doc) != null ? _ref.signup_context : void 0) != null) {
        return this.page = "" + this.page + "_" + Scribd.current_doc.signup_context;
      }
    };

    return ArchiveLoginLightbox;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/read2/sidebar/_admin_panel.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.ReadPageAdmin = (function() {
    function ReadPageAdmin(container) {
      var bless_document_clickable,
        _this = this;
      this.container = $(container);
      bless_document_clickable = true;
      this.container.dispatch("click", {
        toggle_admin_btn: function() {
          return _this.container.toggleClass("open");
        }
      });
    }

    return ReadPageAdmin;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/read2/dialogs/embed_dialog.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.CustomSize = (function() {
    function CustomSize(embed_ui, container, options) {
      var _this = this;
      _.bindAll(this);
      this.embed_ui = embed_ui;
      this.container = $(container);
      this.book_mode = false;
      this.options = _.extend({
        min_width: 400,
        min_height: 300,
        aspect_ratio: 0.75
      }, options || {});
      this.lock_aspect_ratio = true;
      this.width_input = this.container.find(".custom_width");
      this.height_input = this.container.find(".custom_height");
      this.update_from_width = this.updater_for("width");
      this.update_from_height = this.updater_for("height");
      this.width_input.on("change", this.update_from_width);
      this.height_input.on("change", this.update_from_height);
      this.lock_button = this.container.find(".lock_button");
      this.lock_button.on("click", function() {
        _this.lock_button.toggleClass("unlocked");
        _this.lock_aspect_ratio = !_this.lock_aspect_ratio;
        if (_this.lock_aspect_ratio && !_this.width_input.val().length === 0) {
          return _this.update_from_width();
        }
      });
    }

    CustomSize.prototype.values = function() {
      return [parseInt(this.width_input.val(), 10), parseInt(this.height_input.val(), 10)];
    };

    CustomSize.prototype.has_values = function() {
      return !this.width_input.val().length === 0 && !this.height_input.val().length === 0;
    };

    CustomSize.prototype.updater_for = function(width_or_height) {
      var aspect_ratio, input, min_key, other, other_input, other_min_key,
        _this = this;
      other = (width_or_height === "width" ? "height" : "width");
      aspect_ratio = this.options.aspect_ratio;
      if (width_or_height === "height") {
        aspect_ratio = 1.0 / aspect_ratio;
      }
      input = this[width_or_height + "_input"];
      other_input = this[other + "_input"];
      min_key = "min_" + width_or_height;
      other_min_key = "min_" + other;
      return function() {
        var other_value, value;
        if (input.val().length === 0) {
          return;
        }
        if (_this.book_mode) {
          aspect_ratio = 1 / aspect_ratio;
        }
        value = parseInt(input.val(), 10);
        if (value < _this.options[min_key]) {
          value = _this.options[min_key];
          input.val(value);
        }
        other_value = void 0;
        if (_this.lock_aspect_ratio || other_input.val().length === 0) {
          other_value = Math.max(Math.floor(value / aspect_ratio), _this.options[other_min_key]);
          other_input.val(other_value);
        } else {
          other_value = _this.embed_ui.custom_options[other];
        }
        if (width_or_height === "width") {
          return _this.embed_ui.set_size(value, other_value);
        } else {
          return _this.embed_ui.set_size(other_value, value);
        }
      };
    };

    return CustomSize;

  })();

  Scribd.UI.EmbedDialog = (function() {
    function EmbedDialog(container) {
      var size_picker, _base,
        _this = this;
      _.bindAll(this);
      this.container = $(container);
      this.document = this.container.data("document");
      (_base = this.document).aspect_ratio || (_base.aspect_ratio = 0.75);
      this.options = {
        num_pages: this.document.page_count,
        aspect_ratio: this.document.aspect_ratio,
        doc_url: this.document.url,
        title: this.document.title,
        user_url: this.document.word_user.url,
        user_title: this.document.word_user.name,
        doc_id: this.document.id,
        access_key: this.document.access_key,
        secret_password: this.document.secret_password
      };
      this.input = this.container.find(".code_input");
      this.preview_container = this.container.find(".doc_preview");
      this.custom_options = {};
      this.generators = {
        html: new Scribd.Embed.HTML5CodeGenerator(_.clone(this.options)),
        wordpress: new Scribd.Embed.WordpressCodeGenerator(_.clone(this.options))
      };
      this.container.find(".content").css('padding', 0);
      this.starting_page = this.container.find(".misc_options .starting_page");
      this.container.find(".custom_size input").add(this.starting_page).restrict_numeric({
        allow_period: false
      });
      this.custom_size = new Scribd.UI.CustomSize(this, this.container.find(".custom_size"));
      this.starting_page.on("change", function(e) {
        var num_pages, page;
        page = (_this.starting_page.val().length === 0 ? 1 : parseInt(_this.starting_page.val(), 10));
        num_pages = _this.options.num_pages;
        if (num_pages !== null && num_pages !== 0 && page > num_pages) {
          page = num_pages;
          _this.starting_page.val(page);
        }
        _this.custom_options.page = page;
        return _this.update_code();
      });
      this.container.on("change", ".view_style", function(e) {
        var style;
        style = $(e.currentTarget).val();
        _this.custom_options.mode = style;
        return _this.update_code();
      });
      this.input.select_on_focus();
      this.container.find(".include_link_input").on("change", function(e) {
        _this.custom_options.show_title = $(e.target).prop('checked');
        _this.update_code();
        return true;
      });
      this.container.find(".include_recommendations_input").on("change", function(e) {
        _this.custom_options.show_recommendations = $(e.target).prop('checked');
        _this.update_code();
        return true;
      });
      this.container.on("click", ".close", function() {
        return Scribd.Lightbox.close();
      });
      this.container.on("click", "#embed_format", function(e) {
        var format_choice;
        format_choice = $(e.target);
        if (format_choice.hasClass('inactive')) {
          format_choice.removeClass('inactive');
          _this.container.find('.option.active').removeClass('active').addClass('inactive');
          format_choice.addClass('active');
          return _this.update_format(format_choice.data('format'));
        }
      });
      size_picker = this.container.find(".size_picker");
      size_picker.find('li').on("click", function(e) {
        var h, item, match, size, w;
        item = $(e.target).parent('li').andSelf().filter('li');
        if (item) {
          size_picker.find("li").removeClass("active");
          item.addClass("active");
          size = item.data("size");
          if (size) {
            w = null;
            h = null;
            match = size.match(/(\d+)x(\d+)/);
            if (match) {
              w = match[1];
              h = match[2];
            }
            _this.set_size(w, h);
          } else {
            if (_this.custom_size.has_values()) {
              _this.set_size.apply(_this, _this.custom_size.values());
            }
          }
        }
        return false;
      });
      this.update_format("html");
      this.setup_copy_link();
    }

    EmbedDialog.prototype.set_size = function(w, h) {
      if (w === this.custom_options.width && h === this.custom_options.height) {
        return;
      }
      this.custom_options.width = w;
      this.custom_options.height = h;
      this.custom_options.auto_width = !w;
      this.custom_options.auto_height = !h;
      return this.update_code();
    };

    EmbedDialog.prototype.update_format = function(format) {
      this.current_format = format;
      return this.update_code();
    };

    EmbedDialog.prototype.update_code = function(dont_flash) {
      var code,
        _this = this;
      if (this.custom_options.mode === "book") {
        if (!this.showing_book) {
          this.showing_book = true;
          this.custom_size.book_mode = true;
          this.toggle_sizes();
        }
      } else {
        if (this.showing_book) {
          this.showing_book = false;
          this.custom_size.book_mode = false;
          this.toggle_sizes();
        }
      }
      this.input.val(this.generators[this.current_format].render(this.custom_options));
      code = this.generators.html.render();
      this.preview_container.show().html(code);
      _.defer(function() {
        var proper_sizes;
        if (_this.custom_options.auto_height && _this.custom_options.auto_width) {
          proper_sizes = {
            width: _this.preview_container.width(),
            height: _this.preview_container.height()
          };
          return _this.preview_container.find(".scribd_iframe_embed").css(proper_sizes);
        }
      });
      if (!dont_flash) {
        return this.flash();
      }
    };

    EmbedDialog.prototype.toggle_sizes = function() {
      $(".size_picker:first").children().toggleClass("hidden");
      return $(".custom_size:first").removeClass("hidden");
    };

    EmbedDialog.prototype.flash = function() {
      var elm;
      return elm = this.container.find(".tab_bodies input").flash();
    };

    EmbedDialog.prototype.setup_copy_link = function() {
      var copy_link, options_form, set_link, url_input,
        _this = this;
      copy_link = this.container.find(".copy_link");
      url_input = copy_link.find(".document_url_input");
      options_form = copy_link.find("form");
      url_input.on("click", function() {
        return url_input[0].select();
      });
      if (!(typeof docManager !== "undefined" && docManager !== null ? docManager.firstVisiblePage : void 0)) {
        copy_link.find(".position_picker").remove();
      }
      set_link = function() {
        var name, opts, params, url, value, _i, _len, _ref, _ref1;
        opts = {};
        _ref = options_form.serializeArray();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], name = _ref1.name, value = _ref1.value;
          opts[name] = value;
        }
        params = {};
        if (opts.doc_position === "current") {
          params.page = docManager.firstVisiblePage.pageNum;
        }
        if (opts.fullscreen) {
          params.fullscreen = 1;
        }
        url = _this.options.doc_url;
        if (!$.isEmptyObject(params)) {
          url += "#" + $.param(params);
        }
        return url_input.val(url);
      };
      options_form.on("change", function() {
        return set_link();
      });
      return set_link();
    };

    return EmbedDialog;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/read2/dialogs/flag_doc_dialog.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.FlagDocDialog = (function() {
    function FlagDocDialog(container) {
      var _this = this;
      this.container = $(container).on("submit", function(e) {
        return _this.container.addClass("loading");
      }).on("ajax:complete", function(e, res) {
        _this.container.removeClass("loading");
        return Scribd.Lightbox.close();
      });
    }

    return FlagDocDialog;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/read2/dialogs/print_dialog.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.PrintDialog = (function() {
    function PrintDialog(container) {
      var _this = this;
      this.container = $(container);
      this.container.track({
        action: "show"
      });
      this.container.dispatch("click", {
        download_btn: function() {
          return Scribd.download_actions.download(Scribd.current_doc.id, 'read', 'print');
        }
      });
    }

    return PrintDialog;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/read2/dialogs/readcast_history_dialog.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Footer, Paginator, ReadcastHistoryDialog, model, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.Scribd == null) {
    window.Scribd = {};
  }

  if (Scribd.UI == null) {
    Scribd.UI = {};
  }

  model = {
    delete_readcast: function(id) {
      var data;
      data = Scribd.CSRF.with_token({
        _method: 'delete'
      });
      return $.post("/readcast/" + id, data);
    },
    fetch_readcasts: function(page) {
      return $.get('/readcast/all', {
        page: page
      });
    }
  };

  ReadcastHistoryDialog = (function(_super) {
    __extends(ReadcastHistoryDialog, _super);

    function ReadcastHistoryDialog() {
      _ref = ReadcastHistoryDialog.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ReadcastHistoryDialog.prototype.initialize = function() {
      var _this = this;
      _.bindAll(this);
      this.paginator = new Paginator({
        page_size: 10,
        item_count: this.options.readcast_count
      });
      this.footer = new Footer({
        el: this.$('.footer'),
        paginator: this.paginator
      });
      this.paginator.on('change:page', function(page) {
        return _this.update_page();
      });
      this.paginator.on('change:item_count', function(count, is_new_page) {
        return _this.update_page(is_new_page);
      });
      return this.update_page(false);
    };

    ReadcastHistoryDialog.prototype.update_page = function(load_new_page) {
      if (load_new_page == null) {
        load_new_page = true;
      }
      if (this.paginator.item_count === 0) {
        return this.render_no_items();
      }
      if (load_new_page) {
        return this.load_page().then(this.footer.update);
      } else {
        return this.footer.update();
      }
    };

    ReadcastHistoryDialog.prototype.events = {
      'click .next_page': 'next_page',
      'click .prev_page': 'prev_page',
      'click .delete_button': 'confirm_delete',
      'click .cancel_button, .done_button': function(event) {
        return Scribd.Lightbox.close();
      }
    };

    ReadcastHistoryDialog.prototype.render_no_items = function() {
      var html;
      html = Scribd.template('readcast_history_no_items')();
      this.$('.items').replaceWith(html);
      return this.footer.remove();
    };

    ReadcastHistoryDialog.prototype.next_page = function(event) {
      event.preventDefault();
      return this.paginator.next();
    };

    ReadcastHistoryDialog.prototype.prev_page = function(event) {
      event.preventDefault();
      return this.paginator.prev();
    };

    ReadcastHistoryDialog.prototype.load_page = function() {
      var _this = this;
      return model.fetch_readcasts(this.paginator.page).then(function(res) {
        return _this.$('.items').html(res);
      });
    };

    ReadcastHistoryDialog.prototype.confirm_delete = function(event) {
      var $item, msg, title;
      event.preventDefault();
      $item = $(event.currentTarget).closest('.item');
      title = $item.find('.item_title').text();
      msg = "Are you sure you want to delete the shares for \"" + title + "\"?";
      if (confirm(msg)) {
        return this.delete_item($item);
      }
    };

    ReadcastHistoryDialog.prototype.delete_item = function($item) {
      var $date, $title;
      model.delete_readcast($item.data('id'));
      $(document).trigger("scribd:delete_readcast", [$item.data("readcast_id")]);
      $item.addClass('deleted');
      $title = $item.find('.item_title');
      $title.replaceWith("<span class='item_title'>" + ($title.text()) + "</span>");
      $date = $item.find('.item_date');
      $date.replaceWith("<span class='status'>Deleted</span>");
      this.paginator.set_item_count(this.paginator.item_count - 1);
      return $item.delay(2000).slideUp(150);
    };

    return ReadcastHistoryDialog;

  })(Backbone.View);

  Footer = (function(_super) {
    __extends(Footer, _super);

    function Footer() {
      _ref1 = Footer.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Footer.prototype.initialize = function() {
      _.bindAll(this);
      this.paginator = this.options.paginator;
      return this.update();
    };

    Footer.prototype.update = function() {
      this.update_status();
      return this.update_nav_buttons();
    };

    Footer.prototype.update_nav_buttons = function() {
      var $paginator, links, show_next, show_prev;
      show_prev = !this.paginator.at_first();
      show_next = !this.paginator.at_last();
      links = [['.prev_page', show_prev], ['.divider', show_prev && show_next], ['.next_page', show_next]];
      $paginator = this.$('.paginator');
      return _.each(links, function(_arg) {
        var $link, selector, shown;
        selector = _arg[0], shown = _arg[1];
        $link = $paginator.find(selector);
        if (shown) {
          return $link.show();
        } else {
          return $link.hide();
        }
      });
    };

    Footer.prototype.update_status = function() {
      var html, item_count, page, page_size, tpl, _ref2;
      _ref2 = this.paginator, page = _ref2.page, page_size = _ref2.page_size, item_count = _ref2.item_count;
      tpl = Scribd.template('readcast_history_footer_status');
      html = tpl({
        start: ((page - 1) * page_size) + 1,
        end: Math.min(page * page_size, item_count),
        count: item_count
      });
      return this.$('.footer_status').html(html);
    };

    return Footer;

  })(Backbone.View);

  Paginator = (function() {
    _.extend(Paginator.prototype, Scribd.Events);

    function Paginator(options) {
      _.bindAll(this);
      this.item_count = options.item_count, this.page_size = options.page_size, this.page = options.page;
      if (this.page == null) {
        this.page = 1;
      }
    }

    Paginator.prototype.next = function() {
      if (this.at_last()) {
        throw new Error('Already on the last page');
      }
      return this.trigger('change:page', ++this.page);
    };

    Paginator.prototype.prev = function() {
      if (this.at_first()) {
        throw new Error('Already on the first page');
      }
      return this.trigger('change:page', --this.page);
    };

    Paginator.prototype.at_first = function() {
      return this.page === 1;
    };

    Paginator.prototype.at_last = function() {
      return this.page === this.max_page();
    };

    Paginator.prototype.max_page = function() {
      return Math.ceil(this.item_count / this.page_size);
    };

    Paginator.prototype.set_item_count = function(val) {
      var is_new_page, old_page;
      if (!(val >= 0)) {
        throw new Error('Item count must be at least 0');
      }
      this.item_count = val;
      old_page = this.page;
      this.page = Math.min(this.page, this.max_page());
      is_new_page = this.page !== old_page;
      return this.trigger('change:item_count', val, is_new_page);
    };

    return Paginator;

  })();

  Scribd.UI.ReadcastHistoryDialog = ReadcastHistoryDialog;

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/read/ad_free_ad.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  $(document).ready(function() {
    $("#Doc_AdFree_300x250_container").parent().css({
      'display': 'block'
    });
    $("#Doc_AdFree_300x250_pinned_container").parent().css({
      'width': '300px',
      'display': 'block',
      'margin-top': '17px'
    });
    if ($('#rightcolumn_ad_gam').height() === 0) {
      $('#rightcolumn_ad_gam .ad_free_ad_container').hide();
    }
    if ($('#leaderboard_ad_main').height() === 0) {
      $('#leaderboard_ad_main .ad_free_ad_container').hide();
    }
    if ($('#pinned_ad_container').height() === 0) {
      $('#pinned_ad_container .ad_free_ad_container').hide();
    }
    $(".ad_free_ad_container").on("click", ".ad_free_ad", function() {
      return $(this).find("a.ad_free_link")[0].click();
    });
    $(".ad_free_ad_container").on("click", ".ad_close_button", function() {
      $(this).removeClass('ad_close_button').addClass('ad_free_close_button');
      $(this).siblings('.ad_free_ad').show();
      return $(this).closest('.ad_container').children('.hidden_on_ads_disabled').hide();
    });
    return $(".ad_free_ad_container").on("click", ".ad_free_close_button", function() {
      $(this).closest('#rightcolumn_ad_gam').remove();
      $(this).closest('#leaderboard_ad_main').remove();
      return $(this).closest('#pinned_ad_container').remove();
    });
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/read/_doc_view_pingback.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Pingback = {
    run: function(url) {
      var data;
      if (navigator && navigator.userAgent && !!navigator.userAgent.match(/Google (Web|Instant) Preview/)) {
        return null;
      }
      data = {};
      if (document.referrer) {
        data["referer"] = document.referrer;
      }
      return $.ajax(url, {
        type: "post",
        data: data,
        skip_csrf: true
      });
    }
  };

}).call(this);
