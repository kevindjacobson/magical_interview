/************************************************************************
 * 'home_landing.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:13 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - public/javascripts/jquery.mousewheel.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
/*! Copyright (c) 2013 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.1.3
 *
 * Requires: 1.2.2+
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];
    var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];
    var lowestDelta, lowestDeltaXY;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    $.event.special.mousewheel = {
        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },

        unmousewheel: function(fn) {
            return this.unbind("mousewheel", fn);
        }
    });


    function handler(event) {
        var orgEvent = event || window.event,
            args = [].slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0,
            absDeltaXY = 0,
            fn;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";

        // Old school scrollwheel delta
        if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }
        if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }

        // New school wheel delta (wheel event)
        if ( orgEvent.deltaY ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( orgEvent.deltaX ) {
            deltaX = orgEvent.deltaX;
            delta  = deltaX * -1;
        }

        // Webkit
        if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }
        if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Look for lowest delta to normalize the delta values
        absDelta = Math.abs(delta);
        if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }
        absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }

        // Get a whole value for the deltas
        fn = delta > 0 ? 'floor' : 'ceil';
        delta  = Math[fn](delta / lowestDelta);
        deltaX = Math[fn](deltaX / lowestDeltaXY);
        deltaY = Math[fn](deltaY / lowestDeltaXY);

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

}));


/* ----------------------------------------------------------------------
   - public/javascripts/respond.src.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
// !! WARNING I edited this to make it work on production by rewriting the URLs it fetches - leaf

/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas. Dual MIT/BSD license */
/*! NOTE: If you're already including a window.matchMedia polyfill via Modernizr or otherwise, you don't need this part */
(function(w) {
  "use strict";
  w.matchMedia = w.matchMedia || function(doc, undefined) {
    var bool, docElem = doc.documentElement, refNode = docElem.firstElementChild || docElem.firstChild, fakeBody = doc.createElement("body"), div = doc.createElement("div");
    div.id = "mq-test-1";
    div.style.cssText = "position:absolute;top:-100em";
    fakeBody.style.background = "none";
    fakeBody.appendChild(div);
    return function(q) {
      div.innerHTML = '&shy;<style media="' + q + '"> #mq-test-1 { width: 42px; }</style>';
      docElem.insertBefore(fakeBody, refNode);
      bool = div.offsetWidth === 42;
      docElem.removeChild(fakeBody);
      return {
        matches: bool,
        media: q
      };
    };
  }(w.document);
})(this);

/*! Respond.js v1.4.0: min/max-width media query polyfill. (c) Scott Jehl. MIT Lic. j.mp/respondjs  */
(function(w) {
  "use strict";
  var respond = {};
  w.respond = respond;
  respond.update = function() {};
  respond.mediaQueriesSupported = w.matchMedia && w.matchMedia("only all") !== null && w.matchMedia("only all").matches;
  if (respond.mediaQueriesSupported) {
    return;
  }
  respond.regex = {
    media: /@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi,
    keyframes: /@.*keyframes[^\{]+\{(?:[^\{\}]*\{[^\}\{]*\})+[^\}]+\}/gi,
    urls: /(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,
    findStyles: /@media *([^\{]+)\{([\S\s]+?)$/,
    only: /(only\s+)?([a-zA-Z]+)\s?/,
    minw: /\(min\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/,
    maxw: /\(max\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/
  };
  var doc = w.document, docElem = doc.documentElement, mediastyles = [], rules = [], appendedEls = [], parsedSheets = {}, resizeThrottle = 30, head = doc.getElementsByTagName("head")[0] || docElem, base = doc.getElementsByTagName("base")[0], links = head.getElementsByTagName("link"), requestQueue = [], lastCall, resizeDefer, eminpx, getEmValue = function() {
    var ret, div = doc.createElement("div"), body = doc.body, originalHTMLFontSize = docElem.style.fontSize, originalBodyFontSize = body && body.style.fontSize, fakeUsed = false;
    div.style.cssText = "position:absolute;font-size:1em;width:1em";
    if (!body) {
      body = fakeUsed = doc.createElement("body");
      body.style.background = "none";
    }
    docElem.style.fontSize = "100%";
    body.style.fontSize = "100%";
    body.appendChild(div);
    docElem.insertBefore(body, docElem.firstChild);
    ret = div.offsetWidth;
    if (fakeUsed) {
      docElem.removeChild(body);
    } else {
      body.removeChild(div);
    }
    docElem.style.fontSize = originalHTMLFontSize;
    body.style.fontSize = originalBodyFontSize;
    ret = eminpx = parseFloat(ret);
    return ret;
  }, applyMedia = function(fromResize) {
    var name = "clientWidth", docElemProp = docElem[name], currWidth = doc.compatMode === "CSS1Compat" && docElemProp || doc.body[name] || docElemProp, styleBlocks = {}, lastLink = links[links.length - 1], now = new Date().getTime();
    if (fromResize && lastCall && now - lastCall < resizeThrottle) {
      w.clearTimeout(resizeDefer);
      resizeDefer = w.setTimeout(applyMedia, resizeThrottle);
      return;
    } else {
      lastCall = now;
    }
    for (var i in mediastyles) {
      if (mediastyles.hasOwnProperty(i)) {
        var thisstyle = mediastyles[i], min = thisstyle.minw, max = thisstyle.maxw, minnull = min === null, maxnull = max === null, em = "em";
        if (!!min) {
          min = parseFloat(min) * (min.indexOf(em) > -1 ? eminpx || getEmValue() : 1);
        }
        if (!!max) {
          max = parseFloat(max) * (max.indexOf(em) > -1 ? eminpx || getEmValue() : 1);
        }
        if (!thisstyle.hasquery || (!minnull || !maxnull) && (minnull || currWidth >= min) && (maxnull || currWidth <= max)) {
          if (!styleBlocks[thisstyle.media]) {
            styleBlocks[thisstyle.media] = [];
          }
          styleBlocks[thisstyle.media].push(rules[thisstyle.rules]);
        }
      }
    }
    for (var j in appendedEls) {
      if (appendedEls.hasOwnProperty(j)) {
        if (appendedEls[j] && appendedEls[j].parentNode === head) {
          head.removeChild(appendedEls[j]);
        }
      }
    }
    for (var k in styleBlocks) {
      if (styleBlocks.hasOwnProperty(k)) {
        var ss = doc.createElement("style"), css = styleBlocks[k].join("\n");
        ss.type = "text/css";
        ss.media = k;
        head.insertBefore(ss, lastLink.nextSibling);
        if (ss.styleSheet) {
          ss.styleSheet.cssText = css;
        } else {
          ss.appendChild(doc.createTextNode(css));
        }
        appendedEls.push(ss);
      }
    }
  }, translate = function(styles, href, media) {
    var qs = styles.replace(respond.regex.keyframes, "").match(respond.regex.media), ql = qs && qs.length || 0;
    href = href.substring(0, href.lastIndexOf("/"));
    var repUrls = function(css) {
      return css.replace(respond.regex.urls, "$1" + href + "$2$3");
    }, useMedia = !ql && media;
    if (href.length) {
      href += "/";
    }
    if (useMedia) {
      ql = 1;
    }
    for (var i = 0; i < ql; i++) {
      var fullq, thisq, eachq, eql;
      if (useMedia) {
        fullq = media;
        rules.push(repUrls(styles));
      } else {
        fullq = qs[i].match(respond.regex.findStyles) && RegExp.$1;
        rules.push(RegExp.$2 && repUrls(RegExp.$2));
      }
      eachq = fullq.split(",");
      eql = eachq.length;
      for (var j = 0; j < eql; j++) {
        thisq = eachq[j];
        mediastyles.push({
          media: thisq.split("(")[0].match(respond.regex.only) && RegExp.$2 || "all",
          rules: rules.length - 1,
          hasquery: thisq.indexOf("(") > -1,
          minw: thisq.match(respond.regex.minw) && parseFloat(RegExp.$1) + (RegExp.$2 || ""),
          maxw: thisq.match(respond.regex.maxw) && parseFloat(RegExp.$1) + (RegExp.$2 || "")
        });
      }
    }
    applyMedia();
  }, xmlHttp = function() {
    var xmlhttpmethod = false;
    try {
      xmlhttpmethod = new w.XMLHttpRequest();
    } catch (e) {
      xmlhttpmethod = new w.ActiveXObject("Microsoft.XMLHTTP");
    }
    return function() {
      return xmlhttpmethod;
    };
  }(), ajax = function(url, callback) {
    var req = xmlHttp();
    if (!req) {
      return;
    }
    req.open("GET", url, true);
    req.onreadystatechange = function() {
      if (req.readyState !== 4 || req.status !== 200 && req.status !== 304) {
        return;
      }
      callback(req.responseText);
    };
    if (req.readyState === 4) {
      return;
    }
    req.send(null);
  }, makeRequests = function() {
    if (requestQueue.length) {
      var thisRequest = requestQueue.shift();
      ajax(thisRequest.href, function(styles) {
        translate(styles, thisRequest.href, thisRequest.media);
        parsedSheets[thisRequest.href] = true;
        w.setTimeout(function() {
          makeRequests();
        }, 0);
      });
    }
  }, ripCSS = function(translate_href) {
    for (var i = 0; i < links.length; i++) {
      var sheet = links[i], href = sheet.href, media = sheet.media, isCSS = sheet.rel && sheet.rel.toLowerCase() === "stylesheet";
      if (!!href && isCSS && !parsedSheets[href]) {
        if (sheet.styleSheet && sheet.styleSheet.rawCssText) {
          translate(sheet.styleSheet.rawCssText, href, media);
          parsedSheets[href] = true;
        } else {
          if (!/^([a-zA-Z:]*\/\/)/.test(href) && !base || href.replace(RegExp.$1, "").split("/")[0] === w.location.host) {
            if (href.substring(0, 2) === "//") {
              href = w.location.protocol + href;
            }

            if (translate_href) {
              href = translate_href(href);
            }

            requestQueue.push({
              href: href,
              media: media
            });
          }
        }
      }
    }
    makeRequests();
  };

  ripCSS(function (href) {
    var pattern = new RegExp("//" + window.location.host.replace(/\./g, "\\.") + "/");
    if (!href.match(pattern)) {
      href = href.replace(/\/\/.*?\//, "//" + window.location.host + "/");
    }
    return href;
  });

  respond.ajax = ajax;
  respond.queue = requestQueue;
  respond.update = ripCSS;
  respond.getEmValue = getEmValue;
  function callMedia() {
    applyMedia(true);
  }
  if (w.addEventListener) {
    w.addEventListener("resize", callMedia, false);
  } else if (w.attachEvent) {
    w.attachEvent("onresize", callMedia);
  }
})(this);


/* ----------------------------------------------------------------------
   - public/javascripts/cohorts.js (last modified: 2015-11-10 00:53:02 +0000)
   ---------------------------------------------------------------------- */
Cohorts = (function() {
    var Options = {
        debug: false
    };

    var GoogleAnalyticsAdapter = {
        nameSpace: 'cohorts',
        trackEvent: function(category, action, opt_label, opt_value) {
            Utils.log('GA trackEvent: ' + category + ', ' + action + ', ' + opt_label + ', ' + opt_value);

            if(window['_gaq']) {
                _gaq.push(['_trackEvent', category, action, opt_label, opt_value]);
            } else {
                throw(" _gaq object not found: It looks like you haven't correctly setup the asynchronous Google Analytics tracking code, and you are using the default GoogleAnalyticsAdapter.");
            }
        },
        onInitialize: function(inTest, testName, cohort) {
            if(inTest) {
                this.trackEvent(this.nameSpace, testName, cohort + ' | Total');
            }
        },
        onEvent: function(testName, cohort, eventName) {
            this.trackEvent(this.nameSpace, testName, cohort + ' | ' + eventName);
        }
    };

    // The main test object

    var Test = (function() {
        var cookiePrefix = '_cohorts';

        var constructor = function(options) {
            this.options = Utils.extend({
                name: null,
                cohorts: null,
                sample: 1.0,
                storageAdapter: null
            }, options);

            // Check params
            if(this.options.name === null)
                throw('A name for this test must be specified');
            if(this.options.cohorts === null)
                throw('Cohorts must be specified for this test');
            if(Utils.size(options.cohorts) < 2)
                throw('You must specify at least 2 cohorts for a test');
            if(!this.options.storageAdapter)
                this.options.storageAdapter = GoogleAnalyticsAdapter;

            this.cohorts = Utils.keys(this.options.cohorts);

            this.run();
        };

        constructor.prototype = {
            run: function() {
                // Determine whether there is forcing of cohorts via the URL
                var hash = window.location.hash;
                if(hash.indexOf('#') == 0) hash = hash.slice(1,hash.length);
                var pairs = hash.split('&');
                for(var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i].split('=');
                    var name = pair[0];
                    var cohort = pair[1];
                    if(this.options.name == name) {
                        Utils.log('Forcing test ' + name + ' into cohort ' + cohort);
                        this.setCohort(cohort);
                    }

                }

                // Determine whether user should be in the test
                var in_test = this.inTest();
                if(in_test === null) // haven't seen this user before
                    in_test = Math.random() <= this.options.sample;

                if(in_test) {
                    this.setCookie('in_test', 1);

                    if(!this.getCohort()) {
                        // determine which cohort the user is chosen to be in
                        var partitions = 1.0 / Utils.size(this.options.cohorts);
                        var chosen_partition = Math.floor(Math.random() / partitions);
                        var chosen_cohort = Utils.keys(this.options.cohorts)[chosen_partition];
                        this.setCohort(chosen_cohort);
                    } else {
                        var chosen_cohort = this.getCohort();
                    }
                    this.options.storageAdapter.onInitialize(in_test, this.options.name, chosen_cohort);

                    // call the onChosen handler, if it exists
                    if(this.options.cohorts[chosen_cohort].onChosen)
                        this.options.cohorts[chosen_cohort].onChosen();
                } else {
                    this.setCookie('in_test', 0);
                }
            },
            event: function(eventName) {
                if(this.inTest())
                    this.options.storageAdapter.onEvent(this.options.name, this.getCohort(), eventName);
            },
            inTest: function() {
                if(this.getCookie('in_test') == 1) {
                    return true;
                } else if(this.getCookie('in_test') == 0) {
                    return false;
                } else {
                    return null;
                }
            },
            inCohort: function(cohort) {
                if(this.inTest()) {
                    return this.getCohort() == cohort;
                } else {
                    return false;
                }
            },
            getCohort: function() {
                if(this.inTest()) {
                    return this.getCookie('chosen_cohort');
                } else {
                    return null;
                }
            },
            setCohort: function(cohort) {
                if(this.cohorts.indexOf(cohort) == -1) {
                    return false;
                } else {
                    this.setCookie('chosen_cohort', cohort);
                    return true;
                }
            },
            setCookie: function(name, value) {
                Cookies.set(cookiePrefix + '_' + this.options.name + '_' + name, value);
            },
            getCookie: function(name) {
                return Cookies.get(cookiePrefix + '_' + this.options.name + '_' + name);
            }
        };

        return constructor;
    })();

    var Utils = {
        extend: function(destination, source) {
            for (var property in source)
                destination[property] = source[property];
            return destination;
        },
        size: function(object) {
            var i = 0;
            for (var property in object)
                i += 1;
            return i;
        },
        keys: function(object) {
            var results = [];
            for (var property in object)
              results.push(property);
            return results;
        },
        log: function(message) {
            if(window['console'] && Options.debug) {
                if(console.log) {
                    console.log(message);
                } else {
                    alert(message);
                }
            }
        }
    };

    // Adapted from James Auldridge's jquery.cookies
    var Cookies = ( function()
    {
        var resolveOptions, assembleOptionsString, parseCookies, constructor, defaultOptions = {
            expiresAt: null,
            path: '/',
            domain:  null,
            secure: false
        };
        /**
        * resolveOptions - receive an options object and ensure all options are present and valid, replacing with defaults where necessary
        *
        * @access private
        * @static
        * @parameter Object options - optional options to start with
        * @return Object complete and valid options object
        */
        resolveOptions = function( options )
        {
            var returnValue, expireDate;

            if( typeof options !== 'object' || options === null )
            {
                returnValue = defaultOptions;
            }
            else
            {
                returnValue = {
                    expiresAt: defaultOptions.expiresAt,
                    path: defaultOptions.path,
                    domain: defaultOptions.domain,
                    secure: defaultOptions.secure
                };

                if( typeof options.expiresAt === 'object' && options.expiresAt instanceof Date )
                {
                    returnValue.expiresAt = options.expiresAt;
                }
                else if( typeof options.hoursToLive === 'number' && options.hoursToLive !== 0 )
                {
                    expireDate = new Date();
                    expireDate.setTime( expireDate.getTime() + ( options.hoursToLive * 60 * 60 * 1000 ) );
                    returnValue.expiresAt = expireDate;
                }

                if( typeof options.path === 'string' && options.path !== '' )
                {
                    returnValue.path = options.path;
                }

                if( typeof options.domain === 'string' && options.domain !== '' )
                {
                    returnValue.domain = options.domain;
                }

                if( options.secure === true )
                {
                    returnValue.secure = options.secure;
                }
            }

            return returnValue;
            };
        /**
        * assembleOptionsString - analyze options and assemble appropriate string for setting a cookie with those options
        *
        * @access private
        * @static
        * @parameter options OBJECT - optional options to start with
        * @return STRING - complete and valid cookie setting options
        */
        assembleOptionsString = function( options )
        {
            options = resolveOptions( options );

            return (
                ( typeof options.expiresAt === 'object' && options.expiresAt instanceof Date ? '; expires=' + options.expiresAt.toGMTString() : '' ) +
                '; path=' + options.path +
                ( typeof options.domain === 'string' ? '; domain=' + options.domain : '' ) +
                ( options.secure === true ? '; secure' : '' )
            );
        };
        /**
        * parseCookies - retrieve document.cookie string and break it into a hash with values decoded and unserialized
        *
        * @access private
        * @static
        * @return OBJECT - hash of cookies from document.cookie
        */
        parseCookies = function()
        {
            var cookies = {}, i, pair, name, value, separated = document.cookie.split( ';' ), unparsedValue;
            for( i = 0; i < separated.length; i = i + 1 )
            {
                pair = separated[i].split( '=' );
                name = pair[0].replace( /^\s*/, '' ).replace( /\s*$/, '' );

                try
                {
                    value = decodeURIComponent( pair[1] );
                }
                catch( e1 )
                {
                    value = pair[1];
                }

                if( typeof JSON === 'object' && JSON !== null && typeof JSON.parse === 'function' )
                {
                    try
                    {
                        unparsedValue = value;
                        value = JSON.parse( value );
                    }
                    catch( e2 )
                    {
                        value = unparsedValue;
                    }
                }

                cookies[name] = value;
            }
            return cookies;
        };

        constructor = function(){};

        /**
         * get - get one, several, or all cookies
         *
         * @access public
         * @paramater Mixed cookieName - String:name of single cookie; Array:list of multiple cookie names; Void (no param):if you want all cookies
         * @return Mixed - Value of cookie as set; Null:if only one cookie is requested and is not found; Object:hash of multiple or all cookies (if multiple or all requested);
         */
        constructor.prototype.get = function( cookieName )
        {
            var returnValue, item, cookies = parseCookies();

            if( typeof cookieName === 'string' )
            {
                returnValue = ( typeof cookies[cookieName] !== 'undefined' ) ? cookies[cookieName] : null;
            }
            else if( typeof cookieName === 'object' && cookieName !== null )
            {
                returnValue = {};
                for( item in cookieName )
                {
                    if( typeof cookies[cookieName[item]] !== 'undefined' )
                    {
                        returnValue[cookieName[item]] = cookies[cookieName[item]];
                    }
                    else
                    {
                        returnValue[cookieName[item]] = null;
                    }
                }
            }
            else
            {
                returnValue = cookies;
            }

            return returnValue;
        };
        /**
         * filter - get array of cookies whose names match the provided RegExp
         *
         * @access public
         * @paramater Object RegExp - The regular expression to match against cookie names
         * @return Mixed - Object:hash of cookies whose names match the RegExp
         */
        constructor.prototype.filter = function( cookieNameRegExp )
        {
            var cookieName, returnValue = {}, cookies = parseCookies();

            if( typeof cookieNameRegExp === 'string' )
            {
                cookieNameRegExp = new RegExp( cookieNameRegExp );
            }

            for( cookieName in cookies )
            {
                if( cookieName.match( cookieNameRegExp ) )
                {
                    returnValue[cookieName] = cookies[cookieName];
                }
            }

            return returnValue;
        };
        /**
         * set - set or delete a cookie with desired options
         *
         * @access public
         * @paramater String cookieName - name of cookie to set
         * @paramater Mixed value - Any JS value. If not a string, will be JSON encoded; NULL to delete
         * @paramater Object options - optional list of cookie options to specify
         * @return void
         */
        constructor.prototype.set = function( cookieName, value, options )
        {
            if( typeof options !== 'object' || options === null )
            {
                options = {};
            }

            if( typeof value === 'undefined' || value === null )
            {
                value = '';
                options.hoursToLive = -8760;
            }

            else if( typeof value !== 'string' )
            {
                if( typeof JSON === 'object' && JSON !== null && typeof JSON.stringify === 'function' )
                {
                    value = JSON.stringify( value );
                }
                else
                {
                    throw new Error( 'cookies.set() received non-string value and could not serialize.' );
                }
            }


            var optionsString = assembleOptionsString( options );

            document.cookie = cookieName + '=' + encodeURIComponent( value ) + optionsString;
        };
        /**
         * del - delete a cookie (domain and path options must match those with which the cookie was set; this is really an alias for set() with parameters simplified for this use)
         *
         * @access public
         * @paramater MIxed cookieName - String name of cookie to delete, or Bool true to delete all
         * @paramater Object options - optional list of cookie options to specify ( path, domain )
         * @return void
         */
        constructor.prototype.del = function( cookieName, options )
        {
            var allCookies = {}, name;

            if( typeof options !== 'object' || options === null )
            {
                options = {};
            }

            if( typeof cookieName === 'boolean' && cookieName === true )
            {
                allCookies = this.get();
            }
            else if( typeof cookieName === 'string' )
            {
                allCookies[cookieName] = true;
            }

            for( name in allCookies )
            {
                if( typeof name === 'string' && name !== '' )
                {
                    this.set( name, null, options );
                }
            }
        };
        /**
         * test - test whether the browser is accepting cookies
         *
         * @access public
         * @return Boolean
         */
        constructor.prototype.test = function()
        {
            var returnValue = false, testName = 'cT', testValue = 'data';

            this.set( testName, testValue );

            if( this.get( testName ) === testValue )
            {
                this.del( testName );
                returnValue = true;
            }

            return returnValue;
        };
        /**
         * setOptions - set default options for calls to cookie methods
         *
         * @access public
         * @param Object options - list of cookie options to specify
         * @return void
         */
        constructor.prototype.setOptions = function( options )
        {
            if( typeof options !== 'object' )
            {
                options = null;
            }

            defaultOptions = resolveOptions( options );
        };

        return new constructor();
    } )();


    // Return the public methods and objects

    return {
        Test: Test,
        Cookies: Cookies,
        Options: Options
    };
})();




/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-08 22:43:32 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/fancy_header/_nav_menu.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.NavMenu = (function() {
    function NavMenu(container) {
      this.container = $(container);
      $(window).one("load", (function(_this) {
        return function() {
          return _this.container.lazyimages();
        };
      })(this));
      this.container.on("click", (function(_this) {
        return function(e) {
          if ($(e.target).is(".nav_shroud")) {
            _this.toggle();
            return e.preventDefault();
          }
        };
      })(this));
    }

    NavMenu.prototype.toggle = function() {
      var body, set_show;
      if (this._toggling) {
        return;
      }
      this._toggling = true;
      body = $(document.body);
      set_show = (function(_this) {
        return function() {
          return body.toggleClass("nav_visible");
        };
      })(this);
      if (body.is(".show_nav")) {
        body.removeClass("nav_visible");
        return setTimeout((function(_this) {
          return function() {
            body.removeClass("show_nav");
            return _this._toggling = false;
          };
        })(this), 500);
      } else {
        body.addClass("show_nav");
        return setTimeout((function(_this) {
          return function() {
            body.addClass("nav_visible");
            return _this._toggling = false;
          };
        })(this), 16);
      }
    };

    return NavMenu;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/fancy_header/header.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.FancyHeader = (function() {
    FancyHeader.prototype.header_offset = 0;

    function FancyHeader(container, opts) {
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.setup_events = bind(this.setup_events, this);
      this.init = bind(this.init, this);
      Scribd.FancyHeader.instance = this;
      this.container = $(this.container);
      this.menu = new Scribd.UI.NavMenu($(document).find(".nav_shroud"));
      this.init();
      this.setup_events();
    }

    FancyHeader.prototype.init = function() {
      var body, login_btn, scrolled, subscribe_btn, try_show_button, update_header, win;
      win = $(window);
      body = $(document.body);
      scrolled = false;
      subscribe_btn = this.container.find(".header_subscribe_btn");
      login_btn = this.container.find(".header_login_btn");
      try_show_button = _.throttle(function() {
        if (scrolled) {
          subscribe_btn.fadeIn();
          return login_btn.fadeOut();
        } else {
          subscribe_btn.fadeOut();
          return login_btn.fadeIn();
        }
      }, 100);
      $(window).one("load", (function(_this) {
        return function() {
          return _this.container.lazyimages();
        };
      })(this));
      this.container.find(".logo_image").data("og_src", this.container.find(".logo_image").attr("src"));
      update_header = (function(_this) {
        return function(force, offset) {
          var $logo, scroll;
          if (force == null) {
            force = false;
          }
          if (offset == null) {
            offset = null;
          }
          if (offset) {
            _this.header_offset = offset;
          }
          scroll = win.scrollTop();
          $logo = _this.container.find(".logo_image");
          offset = Math.max(0, _this.header_offset - scroll);
          if (scroll > _this.header_offset) {
            if (!scrolled) {
              scrolled = true;
              body.addClass("scrolled");
              $logo.attr("src", $logo.data("alt_src"));
            }
          } else {
            if (scrolled) {
              scrolled = false;
              body.removeClass("scrolled");
              $logo.attr("src", $logo.data("og_src"));
            }
          }
          _this.container.css({
            top: offset + "px"
          });
          return try_show_button();
        };
      })(this);
      win.on("scroll", function() {
        return update_header();
      });
      update_header();
      return this.update_header_position = update_header;
    };

    FancyHeader.prototype.setup_events = function() {
      return $(document).dispatch("click", {
        menu_toggle_btn: (function(_this) {
          return function() {
            return _this.menu.toggle();
          };
        })(this),
        header_login_btn: function() {
          if ($(window).width() >= 800) {
            return Scribd.SignIn.open("global_login");
          } else {
            return "continue";
          }
        },
        header_subscribe_btn: (function(_this) {
          return function($btn) {
            if ($btn.is(".mobile_signup")) {
              return "continue";
            }
            return Scribd.SignIn.open($btn.data("signup_source") || "subscribe", $btn.attr("href"));
          };
        })(this)
      });
    };

    return FancyHeader;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/_subscription_faq_lightbox.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.SubscriptionFaqLightbox = (function(superClass) {
    extend(SubscriptionFaqLightbox, superClass);

    function SubscriptionFaqLightbox(container) {
      this.open_login_window = bind(this.open_login_window, this);
      SubscriptionFaqLightbox.__super__.constructor.apply(this, arguments);
      this.logged_in = !!Scribd.logged_in;
      this.container.on("click", ".faq_start_free_trial", (function(_this) {
        return function() {
          if (!_this.logged_in) {
            Scribd.Lightbox.close('faq_lightbox');
            setTimeout(function() {
              return _this.open_login_window('subscription_faq_lightbox');
            }, 150);
            return false;
          } else {
            return true;
          }
        };
      })(this));
    }

    SubscriptionFaqLightbox.prototype.open_login_window = function() {
      var metadata, params;
      metadata = {
        context: 'pmp',
        page: 'subscription_faq_lightbox',
        action: 'start_trial',
        platform: 'web',
        logged_in: this.logged_in
      };
      metadata = encodeURIComponent(JSON.stringify(metadata));
      params = "metadata=" + metadata;
      return Scribd.SignIn.open("subscribe", "/archive/pmp_checkout?" + params);
    };

    return SubscriptionFaqLightbox;

  })(Scribd.Lightbox);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/smart_tabs.coffee (last modified: 2016-01-21 00:14:18 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SmartTabs = (function() {
    function SmartTabs(container, opts) {
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.container = $(this.container);
      this.setup_opts();
      this.setup_tabs();
      this.setup_events();
    }

    SmartTabs.prototype.setup_opts = function() {
      return this.opts = _.extend({
        bind_click: false
      }, this.opts);
    };

    SmartTabs.prototype.setup_tabs = function() {
      var more_tab, nav, parent_width, tabs, update_tabs;
      if (!this.container.find(".tab.hover_menu").length) {
        return;
      }
      nav = this.container;
      tabs = nav.find(".tab").not(":last");
      more_tab = nav.find(".tab:last");
      parent_width = $(window).width();
      update_tabs = (function(_this) {
        return function() {
          var $el, available_width, extra_tabs, i, j, k, len, len1, real_width, results, sub_menu, t, tab, tpl;
          available_width = Math.min($(window).width(), _this.opts.max_width) - 200;
          tabs.show();
          real_width = more_tab.outerWidth(true);
          for (i = 0, len = tabs.length; i < len; i++) {
            t = tabs[i];
            real_width += $(t).outerWidth(true);
          }
          extra_tabs = [];
          for (j = tabs.length - 1; j >= 0; j += -1) {
            t = tabs[j];
            if (real_width <= available_width) {
              break;
            }
            t = $(t);
            real_width -= t.outerWidth(true);
            t.hide();
            extra_tabs.push(t);
          }
          more_tab.toggle(!!extra_tabs.length);
          if (extra_tabs.length) {
            sub_menu = more_tab.find(".sub_menu");
            tpl = _.template(sub_menu.data("row_template"));
            sub_menu.empty();
            results = [];
            for (k = 0, len1 = extra_tabs.length; k < len1; k++) {
              tab = extra_tabs[k];
              $el = $(tpl({
                tab_name: tab.data("name"),
                label: tab.text()
              }));
              $el.data(tab.data());
              if (tab.hasClass("current")) {
                more_tab.addClass("current");
              }
              results.push(sub_menu.append($el));
            }
            return results;
          } else {
            return _this.container.find(".tab:visible:last").addClass("last");
          }
        };
      })(this);
      $(window).on("resize", _.debounce(update_tabs, 100));
      return update_tabs();
    };

    SmartTabs.prototype.set_current_tab = function(el) {
      var current_url, modified_url;
      el.addClass("current").siblings(".current").removeClass("current");
      if (this.opts.modify_url) {
        current_url = window.location.href;
        modified_url = Scribd.add_url_parameter(current_url, "tab", el.data("section"));
        return window.history.replaceState({}, "profile_tab", modified_url);
      }
    };

    SmartTabs.prototype.setup_events = function() {
      this.container.on("scribd:set_tab", (function(_this) {
        return function(e) {
          return _this.set_current_tab($(e.target));
        };
      })(this));
      if (!this.opts.bind_click) {
        return;
      }
      this.container.on("click", ".tab", (function(_this) {
        return function(e) {
          if ($(e.currentTarget).is(".current") || $(e.currentTarget).is(".unselectable")) {
            return;
          }
          return _this.set_current_tab($(e.currentTarget));
        };
      })(this));
      return this.container.trigger("scribd:tab:clicked", $(e.currentTarget));
    };

    return SmartTabs;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/promo_code/custom_promo.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.CustomPromo = (function() {
    function CustomPromo(container, opts) {
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.submit = bind(this.submit, this);
      this.container = $(this.container);
      this.container.on("click", ".post_promo", (function(_this) {
        return function() {
          return _this.submit();
        };
      })(this));
    }

    CustomPromo.prototype.submit = function(callback) {
      return $.post("/promo_code/submit", {
        promo: this.opts.promo
      }, (function(_this) {
        return function(res) {
          var lb;
          if (typeof callback === "function") {
            callback(res);
          }
          if (res.valid && !Scribd.logged_in) {
            if (_this.opts.is_mobile) {
              return window.location.href = "/mobile/login?from=" + (encodeURIComponent(res.next_url));
            } else {
              lb = Scribd.Lightbox.open('signup_lb', Scribd.LoginLightbox, {
                no_redirect: false
              });
              lb.set_header("Join today");
              return lb.set_login_param('next_url', res.next_url);
            }
          } else if (res.flash) {
            return (new Scribd.Flasher()).show('error', res.flash);
          } else if (res.valid && res.next_url) {
            return window.location.href = res.next_url;
          }
        };
      })(this));
    };

    return CustomPromo;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/animated_carousel.coffee (last modified: 2016-04-19 20:59:57 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.AnimatedCarousel = (function() {
    function AnimatedCarousel(container, opts) {
      var base;
      this.opts = opts != null ? opts : {};
      (base = Scribd.AnimatedCarousel).instances || (base.instances = []);
      Scribd.AnimatedCarousel.instances.push(this);
      this.container = $(container);
      this.setup_events();
      this.scroll_feature_grid("left");
    }

    AnimatedCarousel.prototype.setup_events = function() {
      var grid_row_mousemove;
      grid_row_mousemove = (function(_this) {
        return function(e) {
          if (e.clientX < 80) {
            return _this.scroll_feature_grid("right", "fast");
          } else if (e.clientX > $(window).width() - 80) {
            return _this.scroll_feature_grid("left", "fast");
          } else {
            return _this.cancel_feature_scroll();
          }
        };
      })(this);
      if (!this.opts.link_docs) {
        this.container.on("click", ".collection_doc", function(e) {
          return e.preventDefault();
        });
      }
      this.container.on("mouseenter", (function(_this) {
        return function(e) {
          if (_this.resume_scrolling_to) {
            clearTimeout(_this.resume_scrolling_to);
          }
          _this.cancel_feature_scroll();
          return _this.container.on("mousemove", grid_row_mousemove);
        };
      })(this));
      return this.container.on("mouseleave", (function(_this) {
        return function(e) {
          _this.cancel_feature_scroll();
          _this.container.off("mousemove", grid_row_mousemove);
          return _this.resume_scrolling_to = setTimeout(function() {
            return _this.scroll_feature_grid("left");
          }, 600);
        };
      })(this));
    };

    AnimatedCarousel.prototype.scroll_feature_grid = function(dir, speed) {
      var speeds;
      if (dir == null) {
        dir = "right";
      }
      if (speed == null) {
        speed = "slow";
      }
      if (dir === this.scroll_dir && this.scrollInterval) {
        return;
      }
      speeds = {
        slow: 30,
        med: 18,
        fast: 10
      };
      if (this.scrollInterval) {
        clearInterval(this.scrollInterval);
      }
      this.scroll_dir = dir;
      return this.scrollInterval = setInterval((function(_this) {
        return function() {
          return _this.container.scrollLeft(_this.container.scrollLeft() + (_this.scroll_dir === 'right' ? -1 : 1));
        };
      })(this), speeds[speed]);
    };

    AnimatedCarousel.prototype.cancel_feature_scroll = function() {
      this.scroll_dir = null;
      if (this.scrollInterval) {
        return clearInterval(this.scrollInterval);
      }
    };

    return AnimatedCarousel;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/index.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var win,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  win = $(window);

  $.fn.center_in_parent = function() {
    var center;
    center = (function(_this) {
      return function() {
        var el, el_h, i, len, parent, parent_h, ref, results, top;
        ref = _this.find(".centered");
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          el = ref[i];
          el = $(el);
          parent = el.parent();
          parent_h = parent.height();
          el_h = el.outerHeight();
          if (parent_h === 0 || el_h === 0) {
            continue;
          }
          top = Math.floor((parent_h - el_h) / 2);
          results.push(el.css("marginTop", top + "px"));
        }
        return results;
      };
    })(this);
    center();
    this.on("scribd:center", center);
    $(window).on("resize", _.debounce(center, 100));
    return this;
  };

  $.fn.mostly_in_view = function(callback, ratio) {
    var handler, show_it;
    if (ratio == null) {
      ratio = 0.5;
    }
    if (!this.length) {
      return;
    }
    show_it = (function(_this) {
      return function() {
        var bottom, bottom_delta, half, height, top, top_delta, win_bottom, win_height, win_top;
        win_top = win.scrollTop();
        win_height = win.height();
        win_bottom = win_top + win_height;
        height = _this.outerHeight();
        half = Math.min(win.height(), height) * ratio;
        top = _this.offset().top;
        bottom = top + height;
        if (top < win_bottom) {
          top_delta = win_bottom - top;
          if (top_delta < win_height) {
            if (top_delta >= half) {
              return true;
            }
          }
        }
        if (win_top < bottom) {
          bottom_delta = bottom - win_top;
          if (bottom_delta < win_height) {
            if (bottom_delta >= half) {
              return true;
            }
          }
        }
        return false;
      };
    })(this);
    handler = _.throttle((function(_this) {
      return function(e) {
        if (show_it()) {
          win.off("scroll.mostly_in_view", handler);
          win.off("resize.mostly_in_view", handler);
          return typeof callback === "function" ? callback() : void 0;
        }
      };
    })(this), 200);
    win.on("scroll.mostly_in_view", handler);
    win.on("resize.mostly_in_view", handler);
    _.defer(handler);
    return this;
  };

  Scribd.HomeGrid = (function(superClass) {
    extend(HomeGrid, superClass);

    function HomeGrid() {
      return HomeGrid.__super__.constructor.apply(this, arguments);
    }

    HomeGrid.prototype.cell_width = 129;

    HomeGrid.prototype.margin = 40;

    HomeGrid.prototype.min_spacing = 40;

    HomeGrid.prototype.min_min_spacing = 20;

    HomeGrid.prototype.fit_to_width = function() {
      var blurb_quote, cell, current_tab, id, n, res, spacers, spacing;
      res = HomeGrid.__super__.fit_to_width.apply(this, arguments);
      current_tab = this.container.find(".collection_tab_documents.current");
      spacers = current_tab.find(".spacer_cell");
      if (!spacers.length) {
        return;
      }
      spacers.remove();
      if (!res) {
        return;
      }
      n = res[0], spacing = res[1];
      if (n < 3) {
        return;
      }
      blurb_quote = spacers.find(".blurb_quote").width(this.cell_width * 2 + spacing);
      id = blurb_quote.data("doc_id");
      cell = current_tab.find(".object_cell[data-doc_id=" + id + "]:first").remove();
      current_tab.find(".object_cell:eq(" + (n - 1) + ")").after(cell);
      return cell.after(spacers);
    };

    return HomeGrid;

  })(Scribd.UI.ObjectGrid);

  Scribd.Home2Landing = (function() {
    Home2Landing.prototype.quote_duration = 5000;

    Home2Landing.prototype.primary_promo_height = 50;

    Home2Landing.prototype.tabs_max_width = 1400;

    Home2Landing.get_device = _.memoize(function() {
      if (navigator.userAgent.match(/android/i)) {
        return "android";
      }
      if (navigator.userAgent.match(/iphone|ipad|ipad/i)) {
        return "ios";
      }
      return "web";
    });

    function Home2Landing(container, opts) {
      var code, default_signup_action, devices;
      this.opts = opts;
      this.setup_app_button = bind(this.setup_app_button, this);
      this.container = $(container);
      this.container.center_in_parent();
      _.defer((function(_this) {
        return function() {
          return _this.container.trigger("scribd:center");
        };
      })(this));
      this.container.track({
        action: "show",
        label: "top",
        interactive: false
      });
      if (code = this.container.data("promo_code") || this.opts.promo_code) {
        this.promo_code = new Scribd.CustomPromo(this.container, {
          promo: code
        });
      }
      default_signup_action = (function(_this) {
        return function(btn) {
          if (_this.promo_code) {
            _this.promo_code.submit();
            return;
          }
          if (btn.is(".mobile_signup")) {
            return "continue";
          }
          if (Scribd.logged_in) {
            return "continue";
          }
          return Scribd.SignIn.open(_this.opts.sign_in_source || "global_signup", btn.attr("href"), _this.signup_lightbox_opts());
        };
      })(this);
      this.container.dispatch("click", {
        toggle_faq_btn: (function(_this) {
          return function() {
            return Scribd.Lightbox.open("faq_lightbox", Scribd.SubscriptionFaqLightbox);
          };
        })(this),
        header_login_btn: (function(_this) {
          return function(btn) {
            if ($(window).width() >= 800) {
              return Scribd.SignIn.open("global_login", btn.data("next_url"));
            } else {
              return "continue";
            }
          };
        })(this),
        header_subscribe_btn: default_signup_action,
        primary_start_trial_btn: default_signup_action,
        bottom_start_trial_btn: default_signup_action,
        primary_promo_close_btn: (function(_this) {
          return function(btn) {
            var primary_promo;
            primary_promo = btn.closest(".primary_promo");
            return primary_promo.slideUp({
              progress: function() {
                return Scribd.FancyHeader.instance.update_header_position(true, primary_promo.height());
              }
            });
          };
        })(this)
      });
      this.setup_payments_url();
      this.setup_app_button();
      this.setup_editorial_blurbs();
      $(window).one("load", (function(_this) {
        return function() {
          return _this.container.lazyimages();
        };
      })(this));
      devices = this.container.find(".devices_wrapper");
      devices.mostly_in_view((function(_this) {
        return function() {
          var d, ddelay, delay, i, items, len, results;
          _this.container.track({
            action: "show",
            label: "devices",
            interactive: false
          });
          delay = 0;
          ddelay = 300;
          items = (function() {
            var i, len, ref, results;
            ref = devices.find(".device_wrapper");
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              d = ref[i];
              results.push(d);
            }
            return results;
          })();
          items.push(devices.find(".earbuds"));
          results = [];
          for (i = 0, len = items.length; i < len; i++) {
            d = items[i];
            results.push((function(d) {
              setTimeout((function(_this) {
                return function() {
                  return $(d).addClass("visible");
                };
              })(this), delay);
              return delay += ddelay;
            })(d));
          }
          return results;
        };
      })(this));
      this.book_previews = this.container.find(".book_previews").mostly_in_view((function(_this) {
        return function() {
          _this.container.track({
            action: "show",
            label: "recs",
            interactive: false
          });
          return _this.book_previews.find(".secondary_books").addClass("visible").end().find(".primary_book").addClass("visible");
        };
      })(this));
      if (this.opts.show_extension_lightbox) {
        Scribd.ExtensionLightbox.open("extension_lightbox");
      }
    }

    Home2Landing.prototype.setup_payments_url = function() {
      var default_subscribe_url, mobile_url, subscribe_buttons, update_mobile_url, url;
      subscribe_buttons = this.container.closest(".global_wrapper").find(".has_subscribe_url");
      if (url = this.opts.subscribe_url) {
        subscribe_buttons.attr("href", url);
      }
      default_subscribe_url = subscribe_buttons.attr("href");
      if (mobile_url = this.opts.mobile_subscribe_url) {
        update_mobile_url = (function(_this) {
          return function() {
            var is_mobile;
            is_mobile = win.width() < 800;
            subscribe_buttons.toggleClass("mobile_signup", is_mobile);
            if (is_mobile) {
              return subscribe_buttons.attr("href", mobile_url);
            } else {
              return subscribe_buttons.attr("href", default_subscribe_url);
            }
          };
        })(this);
        win.on("resize", _.debounce(update_mobile_url, 200));
        return update_mobile_url();
      }
    };

    Home2Landing.prototype.signup_lightbox_opts = function() {
      if (this.opts.lightbox_mode === "signup") {
        return {
          show_form: "signup",
          hide_benefits: true
        };
      } else {
        return {};
      }
    };

    Home2Landing.prototype.setup_app_button = function() {
      var app_button, url;
      app_button = this.container.find(".app_download_button");
      if (url = app_button.data((this.constructor.get_device()) + "_link")) {
        return app_button.attr("href", url);
      }
    };

    Home2Landing.prototype.setup_editorial_blurbs = function() {
      var _page_left, _page_right, _show, update_mobile_slides;
      this.slides_container = this.container.find(".editorials_fold .slides_container");
      this.slide_idx = 0;
      this.slides = this.slides_container.find(".slide");
      if (!this.slides.length) {
        return;
      }
      _show = (function(_this) {
        return function(idx, dir) {
          var $cur_slide, $new_slide, left_side, right_side;
          if (dir == null) {
            dir = 1;
          }
          if (_this.container.hasClass("transitioning")) {
            return;
          }
          right_side = _this.slides_container.width() + 100;
          left_side = right_side * -1;
          $new_slide = $(_this.slides[idx]).removeClass("current previous").addClass("no_transition");
          $cur_slide = _this.slides.filter(".current");
          if (dir < 0) {
            $new_slide.css({
              left: left_side
            });
            $cur_slide.css({
              left: right_side
            });
          } else {
            $new_slide.css({
              left: right_side
            });
            $cur_slide.css({
              left: left_side
            });
          }
          return setTimeout(function() {
            $new_slide.removeClass("no_transition");
            $new_slide.css({
              left: 0
            }).addClass("current");
            $cur_slide.addClass("previous");
            _this.container.addClass("transitioning");
            _this.slide_idx = idx;
            return _this.slidestimeout = setTimeout(function() {
              _this.container.removeClass("transitioning");
              return _this.container.find(".current.previous").removeClass("current");
            }, 2010);
          }, 50);
        };
      })(this);
      _page_left = (function(_this) {
        return function() {
          var next_slide;
          next_slide = (_this.slide_idx - 1 + _this.slides.length) % _this.slides.length;
          return _show(next_slide, -1);
        };
      })(this);
      _page_right = (function(_this) {
        return function() {
          var next_slide;
          next_slide = (_this.slide_idx + 1) % _this.slides.length;
          return _show(next_slide, 1);
        };
      })(this);
      this.container.find(".editorials_fold").dispatch("click", {
        page_left: (function(_this) {
          return function($btn) {
            return _page_left();
          };
        })(this),
        page_right: (function(_this) {
          return function($btn) {
            return _page_right();
          };
        })(this)
      });
      update_mobile_slides = (function(_this) {
        return function() {
          var is_mobile;
          is_mobile = win.width() < 800;
          if (is_mobile !== _this.slides_is_mobile) {
            return;
          }
          _this.slides_is_mobile = is_mobile;
          if (is_mobile) {
            _this.slides_container.find(".slide:not(:last-child)").hide();
            return _this.slides_container.find(".slide:last").show();
          } else {
            _this.slides_container.find(".slide:last").hide();
            return _this.slides_container.find(".current").show();
          }
        };
      })(this);
      return win.on("resize", _.debounce(update_mobile_slides, 200));
    };

    return Home2Landing;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/audiobooks_index.coffee (last modified: 2016-05-17 23:37:24 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.AudiobooksJoin = (function(superClass) {
    extend(AudiobooksJoin, superClass);

    function AudiobooksJoin() {
      AudiobooksJoin.__super__.constructor.apply(this, arguments);
    }

    AudiobooksJoin.prototype.animate_grid = function() {
      var grid;
      grid = this.grid.container.find(".collection_tab_documents");
      return grid.find(".object_cell").velocity("transition.slideUpIn", {
        stagger: 60,
        display: "inline-block",
        complete: (function(_this) {
          return function(elements) {
            return $(elements).css("opacity", "");
          };
        })(this)
      });
    };

    return AudiobooksJoin;

  })(Scribd.Home2Landing);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/australia.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Home2Landing.Australia = (function() {
    function Australia(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      this.setup_tabs();
      this.setup_devices();
      this.setup_events();
    }

    Australia.prototype.setup_devices = function() {
      var $clone, $devices, $screen, key, ref, ref1, screen;
      this.current_device_key = [null, null];
      $devices = this.container.find(".device");
      this.tablet_device = this.container.find(".tablet_device");
      this.mobile_device = this.container.find(".mobile_device");
      this.tablet_screens = this.tablet_device.data("screens");
      this.mobile_screens = this.mobile_device.data("screens");
      this.device_features = this.container.find(".device_feature");
      this.device_screen = this.container.find(".device .screen");
      $screen = this.container.find(".screen");
      ref = this.tablet_screens;
      for (key in ref) {
        screen = ref[key];
        $clone = $screen.clone().hide();
        $clone.addClass("tablet_screen").attr("data-screen", key).css("backgroundImage", "url(" + screen + ")").insertAfter($screen);
      }
      ref1 = this.mobile_screens;
      for (key in ref1) {
        screen = ref1[key];
        $clone = $screen.clone().hide();
        $clone.addClass("mobile_screen").attr("data-screen", key).css("backgroundImage", "url(" + screen + ")").insertAfter($screen);
      }
      return this.show_device_screen(_.first(_.keys(this.tablet_screens)));
    };

    Australia.prototype.setup_events = function() {
      this.container.on("mouseover", ".device_feature", (function(_this) {
        return function(e) {
          var $el;
          $el = $(e.currentTarget);
          return _this.show_device_screen($el.data("screen"));
        };
      })(this));
      $(window).on("resize", (function(_this) {
        return function(e) {
          var started_out;
          started_out = "" + _this.is_mobile + _this.is_tablet;
          _this.is_mobile = $(window).width() < 440;
          _this.is_tablet = !_this.is_mobile && $(window).width() < 1025;
          _this.container.toggleClass("is_mobile", _this.is_mobile);
          _this.container.toggleClass("is_tablet", _this.is_tablet);
          if (started_out !== ("" + _this.is_mobile + _this.is_tablet)) {
            _this.show_device_screen(_this.current_device_key[0]);
            return _this.mobile_state_changed();
          }
        };
      })(this));
      return this.container.dispatch("click", {
        require_login_btn: (function(_this) {
          return function(btn) {
            if ($(window).width() >= 800) {
              return Scribd.SignIn.open("subscribe", btn.data("next_url"));
            } else {
              return "continue";
            }
          };
        })(this),
        header_subscribe_btn: (function(_this) {
          return function(btn) {
            if ($(window).width() >= 800) {
              return Scribd.SignIn.open("subscribe", btn.data("next_url"));
            } else {
              return "continue";
            }
          };
        })(this)
      });
    };

    Australia.prototype.mobile_state_changed = function() {
      var show_next;
      if (this.mobile_device_feautures_to) {
        clearTimeout(this.mobile_device_feautures_to);
      }
      if (this.is_mobile) {
        this.device_features.hide().first().show();
        show_next = (function(_this) {
          return function(next_in) {
            if (next_in == null) {
              next_in = 8000;
            }
            _this.device_features.filter(":visible").fadeOut(function() {
              $(_this.device_features[_this.current_feature_idx]).fadeIn().trigger("mouseover");
              return _this.current_feature_idx = (_this.current_feature_idx + 1) % _this.device_features.length;
            });
            return _this.mobile_device_feautures_to = setTimeout((function() {
              return show_next();
            }), next_in);
          };
        })(this);
        this.current_feature_idx = 0;
        return show_next();
      } else {
        if (this.feature_int) {
          clearInterval(this.features_int);
        }
        return this.device_features.show();
      }
    };

    Australia.prototype.show_device_screen = function(key) {
      var screens;
      screens = this.is_mobile ? this.mobile_screens : this.tablet_screens;
      if (!screens.hasOwnProperty(key)) {
        return;
      }
      if (this.current_device_key[0] === key && this.current_device_key[1] === this.is_mobile) {
        return;
      }
      this.current_device_key = [key, this.is_mobile];
      this.animate_speed = 400;
      return this.device_screen.stop().fadeOut(this.animate_speed, (function(_this) {
        return function() {
          _this.device_screen = _this.container.find(".device ." + (_this.is_mobile ? 'mobile' : 'tablet') + "_screen[data-screen=" + key + "]");
          return _this.device_screen.fadeIn(_this.animate_speed);
        };
      })(this));
    };

    Australia.prototype.setup_tabs = function() {
      return this.container.dispatch("click", {
        tab_btn: (function(_this) {
          return function(btn) {
            var tagline;
            btn.trigger("scribd:set_tab");
            _this.container.find(".grid_row").removeClass("current").filter("[data-name=" + (btn.data('name')) + "]").addClass("current");
            tagline = $(".grid_row[data-name=" + (btn.data('name')) + "]").data("tagline");
            return _this.container.find(".tagline").fadeOut(function() {
              return _this.container.find(".tagline").text(tagline).fadeIn();
            });
          };
        })(this)
      });
    };

    return Australia;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/collection_landing.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.CollectionLanding = (function(superClass) {
    extend(CollectionLanding, superClass);

    function CollectionLanding() {
      return CollectionLanding.__super__.constructor.apply(this, arguments);
    }

    CollectionLanding.prototype.setup_document_grid = function() {
      return this.container.find(".document_grid_outer").mostly_in_view((function(_this) {
        return function() {
          _this.container.find(".object_cell").velocity("transition.slideUpIn", {
            stagger: 60,
            display: "inline-block",
            complete: function(elements) {
              return $(elements).css("opacity", "");
            }
          });
          return _this.container.find(".document_grid").addClass("visible");
        };
      })(this));
    };

    return CollectionLanding;

  })(Scribd.Home2Landing);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/_editorial_blurb.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
(function() {


}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/_extension_lightbox.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ExtensionLightbox = (function(superClass) {
    extend(ExtensionLightbox, superClass);

    ExtensionLightbox.prototype.offset_top = 177;

    function ExtensionLightbox(container) {
      ExtensionLightbox.__super__.constructor.apply(this, arguments);
      this.container.on("click", ".bt button", (function(_this) {
        return function() {
          return _this.close();
        };
      })(this));
    }

    return ExtensionLightbox;

  })(Scribd.Lightbox);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/join_sheet_music.coffee (last modified: 2016-01-21 00:14:18 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.JoinSheetMusic = (function() {
    function JoinSheetMusic(container) {
      var poster;
      container = $(container);
      poster = container.find(".poster");
      container.find(".column:not(.center) > div").on("click, mouseenter", function() {
        var image;
        image = poster.find("img." + this.className);
        poster.find("img:not(." + this.className + ")").css("opacity", "0");
        return image.css("opacity", "1");
      });
    }

    return JoinSheetMusic;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/referrals_index.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.ReferralsIndex = (function(superClass) {
    extend(ReferralsIndex, superClass);

    function ReferralsIndex() {
      var fb_btn, sign_in_btn, sign_up_btn;
      ReferralsIndex.__super__.constructor.apply(this, arguments);
      fb_btn = this.container.find(".facebook_login_button");
      if (!fb_btn.data("created")) {
        this.fb_login_btn = new Scribd.FacebookLoginButton(fb_btn);
        this.container.on("Scribd:Facebook:login_success", (function(_this) {
          return function(e, res) {
            return location.href = _this.opts.subscribe_url;
          };
        })(this));
      }
      sign_in_btn = this.container.find(".sign_in_btn");
      sign_in_btn.click((function(_this) {
        return function(e) {
          if ($(window).width() >= 800) {
            e.preventDefault();
            return Scribd.SignIn.open("global_login", _this.opts.subscribe_url);
          } else {
            return "continue";
          }
        };
      })(this));
      sign_up_btn = this.container.find(".sign_up_btn, .bottom_button");
      sign_up_btn.click((function(_this) {
        return function(e) {
          if ($(window).width() >= 800) {
            e.preventDefault();
            return Scribd.SignIn.open("referral_signup", _this.opts.subscribe_url);
          } else {
            return "continue";
          }
        };
      })(this));
    }

    return ReferralsIndex;

  })(Scribd.Home2Landing);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/landing/home2/space_landing.coffee (last modified: 2016-04-12 18:04:44 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SpaceLanding = (function() {
    function SpaceLanding(container) {
      this.container = container;
      this.container = $(this.container);
      this.container.dispatch("click", {
        require_login_btn: (function(_this) {
          return function(btn) {
            if ($(window).width() >= 800) {
              return Scribd.SignIn.open("subscribe", btn.attr("href"));
            } else {
              return "continue";
            }
          };
        })(this)
      });
    }

    return SpaceLanding;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

