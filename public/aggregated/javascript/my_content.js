/************************************************************************
 * 'my_content.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:13 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-06-29 23:18:16 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/my_content/base.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var MyContent;

  if (window.Scribd == null) {
    window.Scribd = {};
  }

  Scribd.MyContent = MyContent = {
    Models: {},
    Views: {},
    Collections: {},
    Templates: {},
    root: '/my_content/',
    initialize: function(user_name) {
      Scribd.MyContent.user_name = user_name;
      new Scribd.MyContent.Router;
      return Backbone.history.start({
        pushState: true,
        root: Scribd.MyContent.root
      });
    },
    init_templates: function() {
      return _.each($('script[type="template"]'), function(tpl) {
        var name;
        name = tpl.id.slice('tpl_'.length);
        return MyContent.Templates[name] = _.template($(tpl).html());
      });
    },
    track_event: function(action, label) {
      return $(document.body).track({
        category: 'MyContent',
        action: action,
        label: label
      });
    }
  };

  $(Scribd.MyContent.init_templates);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/view.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.MyContent.View = (function(superClass) {
    extend(View, superClass);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.navigate = function(url) {
      return Backbone.history.navigate(url, {
        trigger: true
      });
    };

    View.prototype.navigate_link = function(target) {
      var href, root;
      href = $(target).attr('href');
      root = Scribd.MyContent.root.slice(0, -1);
      if (href.indexOf(root) === 0) {
        href = href.slice(root.length);
        if (href[0] === '/') {
          href = href.slice(1);
        }
      }
      return this.navigate(href);
    };

    return View;

  })(Support.CompositeView);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/models.coffee (last modified: 2016-06-29 23:18:16 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Models,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Models = Scribd.MyContent.Models;

  Models.Document = (function(superClass) {
    extend(Document, superClass);

    function Document() {
      return Document.__super__.constructor.apply(this, arguments);
    }

    Document.prototype.item_type = 'document';

    Document.from_server = function(doc, options) {
      if (options == null) {
        options = {};
      }
      if (doc.featured != null) {
        options.featured_object_id = doc.featured;
      }
      doc.featured = !!doc.featured;
      return new Models.Document(doc, options);
    };

    Document.prototype.initialize = function(attributes, options) {
      return this.featured_object_id = options.featured_object_id, options;
    };

    Document.prototype.make_private = function() {
      this.set('privacy', 'private');
      return $.post('/documents/make_private', Scribd.CSRF.with_token({
        id: this.id
      }));
    };

    Document.prototype.make_public = function() {
      this.set('privacy', 'public');
      return $.post('/documents/make_public', Scribd.CSRF.with_token({
        id: this.id
      }));
    };

    Document.prototype.bookmark = function() {
      this.set('bookmark', true);
      $(window.document).trigger('scribd:library:document_added', this.toJSON());
      return $.post('/reading_states/create', {
        document_id: this.id
      }, "json");
    };

    Document.prototype.remove_bookmark = function() {
      this.set('bookmark', false);
      $(window.document).trigger('scribd:library:document_removed', this.toJSON());
      return $.post('/reading_states/delete', {
        document_id: this.id
      });
    };

    Document.prototype.destroy = function() {
      return $.post('/documents/destroy', Scribd.CSRF.with_token({
        id: this.id
      })).then((function(_this) {
        return function() {
          return _this.trigger('destroy');
        };
      })(this));
    };

    Document.prototype.collection_list = function() {
      return $.get('/my_content/api/collection_list', {
        document_id: this.id
      });
    };

    Document.prototype.add_to_collection = function(collection_id) {
      return $.post("/document_collections/" + collection_id + "/add_document", {
        document_id: this.id
      });
    };

    Document.prototype.remove_from_collection = function(collection_id) {
      return $.post("/document_collections/" + collection_id + "/remove_document", {
        document_id: this.id,
        _method: 'delete'
      });
    };

    Document.prototype.feature = function() {
      var data;
      this.set('featured', true);
      data = Scribd.CSRF.with_token({
        featured_user_object: {
          featured_id: this.id,
          featured_type: 'WordDocument'
        }
      });
      return $.post('/featured_user_objects', data, (function(_this) {
        return function(result) {
          return _this.featured_object_id = result.id;
        };
      })(this));
    };

    Document.prototype.unfeature = function() {
      var data;
      this.set('featured', false);
      data = Scribd.CSRF.with_token({
        _method: 'delete'
      });
      return $.post("/featured_user_objects/" + this.featured_object_id, data);
    };

    Document.prototype.remove_readcast = function() {
      var data;
      data = Scribd.CSRF.with_token({
        _method: 'delete'
      });
      return $.post("/readcast/" + this.id, data);
    };

    return Document;

  })(Backbone.Model);

  Models.DocumentCollection = (function(superClass) {
    extend(DocumentCollection, superClass);

    function DocumentCollection() {
      return DocumentCollection.__super__.constructor.apply(this, arguments);
    }

    DocumentCollection.prototype.item_type = 'collection';

    DocumentCollection.prototype.initialize = function(attributes, options) {
      return this.featured_object_id = options.featured_object_id, options;
    };

    DocumentCollection.create = function(attrs) {
      var data, url, user_name;
      data = Scribd.CSRF.with_token({
        document_collection: attrs
      });
      user_name = Scribd.MyContent.user_name;
      url = "/users/" + user_name + "/document_collections?format=json&my_content=true";
      return $.post(url, data);
    };

    DocumentCollection.from_server = function(coll, options) {
      if (options == null) {
        options = {};
      }
      if (coll.featured != null) {
        options.featured_object_id = coll.featured;
      }
      coll.featured = !!coll.featured;
      return new Models.DocumentCollection(coll, options);
    };

    DocumentCollection.prototype.feature = function() {
      var data;
      this.set('featured', true);
      data = Scribd.CSRF.with_token({
        featured_user_object: {
          featured_id: this.id,
          featured_type: 'DocumentCollection'
        }
      });
      return $.post('/featured_user_objects', data, (function(_this) {
        return function(result) {
          return _this.featured_object_id = result.id;
        };
      })(this));
    };

    DocumentCollection.prototype.unfeature = function() {
      var data;
      this.set('featured', false);
      data = Scribd.CSRF.with_token({
        _method: 'delete'
      });
      return $.post("/featured_user_objects/" + this.featured_object_id, data);
    };

    DocumentCollection.prototype.destroy = function() {
      var options;
      options = {
        id: this.id,
        _method: 'delete'
      };
      return $.post('/document_collections/' + this.id, Scribd.CSRF.with_token(options)).then((function(_this) {
        return function() {
          return _this.trigger('destroy');
        };
      })(this));
    };

    DocumentCollection.prototype._set_privacy = function(type) {
      var options;
      this.set('privacy', type);
      options = Scribd.CSRF.with_token({
        id: this.id,
        privacy_type: type
      });
      return $.post("/collections/set-collection-privacy", options);
    };

    DocumentCollection.prototype.make_private = function() {
      return this._set_privacy('private');
    };

    DocumentCollection.prototype.make_public = function() {
      return this._set_privacy('public');
    };

    return DocumentCollection;

  })(Backbone.Model);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/collections.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Base, Collections, FilteredCollection, Models, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = Scribd.MyContent, Collections = ref.Collections, Models = ref.Models;

  Base = (function(superClass) {
    extend(Base, superClass);

    Base.prototype.default_page_size = 30;

    function Base(options) {
      var base;
      if (options == null) {
        options = {};
      }
      Base.__super__.constructor.call(this, [], options);
      this.options = options;
      if ((base = this.options).page == null) {
        base.page = 1;
      }
      this.page_size = options.page_size || 30;
    }

    Base.prototype.model = function(attrs, options) {
      if (attrs.item_type === 'collection') {
        return Models.DocumentCollection.from_server(attrs, options);
      } else {
        return Models.Document.from_server(attrs, options);
      }
    };

    Base.prototype.parse = function(response) {
      if (response.error) {
        this.has_error = response;
        return;
      }
      if (this.total_items == null) {
        this.total_items = response.count;
      }
      return _.first(response.pages);
    };

    Base.prototype.new_page = function(page_number) {
      var collection, new_options;
      new_options = _.clone(this.options);
      new_options.page = page_number;
      collection = new this.constructor(new_options);
      collection.fetch({
        data: {
          include_count: true
        }
      });
      return collection;
    };

    return Base;

  })(Backbone.Collection);

  Collections.Base = Base;

  Collections.Published = (function(superClass) {
    extend(Published, superClass);

    Published.prototype.type = 'published';

    function Published(options) {
      Published.__super__.constructor.call(this, options);
      this.filter = options.filter, this.sort = options.sort;
    }

    Published.prototype.url = function() {
      var data;
      data = _.pick(this.options, 'sort', 'sort_direction', 'filter', 'page');
      if (data.sort != null) {
        if (data.sort_direction == null) {
          data.sort_direction = 'ascending';
        }
      }
      return "/my_content/api/published?" + $.param(data);
    };

    return Published;

  })(Base);

  Collections.DocumentCollections = (function(superClass) {
    extend(DocumentCollections, superClass);

    DocumentCollections.prototype.type = 'collections';

    function DocumentCollections(options) {
      DocumentCollections.__super__.constructor.call(this, options);
      this.filter = options.filter, this.sort = options.sort;
    }

    DocumentCollections.prototype.url = function() {
      var data;
      data = _.pick(this.options, 'sort', 'sort_direction');
      _.extend(data, {
        view: 'all',
        format: 'json',
        filter: this.options.filter,
        page: this.options.page
      });
      return '/my_content/api/collections?' + $.param(data);
    };

    return DocumentCollections;

  })(Base);

  Collections.Search = (function(superClass) {
    extend(Search, superClass);

    Search.prototype.type = 'search';

    function Search(options) {
      Search.__super__.constructor.call(this, options);
      this.query = options.query;
    }

    Search.prototype.url = function() {
      var data;
      data = {
        format: 'json',
        query: this.options.query
      };
      return '/my_content/api/search?' + $.param(data);
    };

    return Search;

  })(Base);

  FilteredCollection = (function(superClass) {
    extend(FilteredCollection, superClass);

    function FilteredCollection(options) {
      FilteredCollection.__super__.constructor.call(this, options);
      this.filter = options.filter;
    }

    FilteredCollection.prototype.url = function() {
      var data;
      data = {
        filter: this.filter,
        page: this.options.page
      };
      return ("/my_content/api/" + this.type + "?") + $.param(data);
    };

    return FilteredCollection;

  })(Base);

  Collections.Saved = (function(superClass) {
    extend(Saved, superClass);

    function Saved() {
      return Saved.__super__.constructor.apply(this, arguments);
    }

    Saved.prototype.type = 'saved';

    return Saved;

  })(FilteredCollection);

  Collections.Purchased = (function(superClass) {
    extend(Purchased, superClass);

    function Purchased() {
      return Purchased.__super__.constructor.apply(this, arguments);
    }

    Purchased.prototype.type = 'purchased';

    return Purchased;

  })(FilteredCollection);

  Collections.Readcasted = (function(superClass) {
    extend(Readcasted, superClass);

    function Readcasted() {
      return Readcasted.__super__.constructor.apply(this, arguments);
    }

    Readcasted.prototype.type = 'readcasted';

    return Readcasted;

  })(FilteredCollection);

  Collections.History = (function(superClass) {
    extend(History, superClass);

    History.prototype.type = 'history';

    function History(options) {
      History.__super__.constructor.call(this, options);
      this.timestamp = options.timestamp || 0;
    }

    History.prototype.url = function() {
      var data;
      data = {
        timestamp: this.timestamp
      };
      return "/my_content/api/history?" + $.param(data);
    };

    History.prototype.parse = function(response) {
      var last_item, result;
      result = History.__super__.parse.call(this, response);
      last_item = _.last(result);
      this.next_timestamp = response.next_timestamp;
      return result;
    };

    History.prototype.is_last_page = function() {
      return this.next_timestamp === -1;
    };

    History.prototype.next_page = function() {
      var collection;
      collection = new this.constructor({
        timestamp: this.next_timestamp
      });
      collection.fetch({
        data: {
          include_count: true
        }
      });
      return collection;
    };

    return History;

  })(Base);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/router.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Collections, Views, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ref = Scribd.MyContent, Views = ref.Views, Collections = ref.Collections;

  Scribd.MyContent.Router = (function(superClass) {
    var parse_params;

    extend(Router, superClass);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.initialize = function() {
      this.el = $('.home_container');
      this.param_route(/(\w+)\/(\w+)/, 'show_filter');
      this.param_route(/(\w+)/, 'show_category');
      return this.param_route(/(my_content)?/, 'show_index');
    };

    Router.prototype.param_route = function(regexp, fn) {
      var fullPathRegex, params;
      params = /(([^:\/]+\:[^:\/]+\/)*([^:\/]+\:[^:\/]+))\/?/;
      fullPathRegex = new RegExp("^(" + regexp.source + "\/?(" + params.source + ")?)$");
      return this.route(fullPathRegex, fn, (function(_this) {
        return function(path) {
          var matches, ref1;
          matches = {
            regexp: path.match(new RegExp("^" + regexp.source)).slice(1),
            params: ((ref1 = path.match(new RegExp(params.source + "$"))) != null ? ref1[1] : void 0) || ''
          };
          return _this[fn].apply(_this, slice.call(matches.regexp).concat([matches.params]));
        };
      })(this));
    };

    Router.prototype.show_index = function() {
      var i, matches, params;
      matches = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), params = arguments[i++];
      return this.show_filter('published', 'all', params);
    };

    Router.prototype.show_category = function(category, params) {
      return this.show_filter(category, 'all', params);
    };

    parse_params = function(str) {
      return _.chain(str.split('/')).map(function(val) {
        return val.split(':');
      }).filter(function(arg) {
        var key;
        key = arg[0];
        return key === 'sort' || key === 'direction' || key === 'query';
      }).reduce(function(hash, arg) {
        var key, val;
        key = arg[0], val = arg[1];
        hash[key] = decodeURIComponent(val);
        return hash;
      }, {}).value();
    };

    Router.prototype.show_filter = function(category, filter, params) {
      var route;
      params = params ? parse_params(params) : {};
      if (params.sort == null) {
        params.sort = 'date';
      }
      if (params.sort_direction == null) {
        params.sort_direction = params.direction || 'descending';
      }
      Scribd.MyContent.page = category;
      Scribd.MyContent.filter = filter;
      params.filter = filter;
      route = this[category] || this.published;
      return route.call(this, category, filter, params);
    };

    Router.prototype._swap_once = function() {
      if (!this.view) {
        this.view = new Views.Page;
        return this.swap(this.view);
      }
    };

    Router.prototype.show_list = function(page, collection) {
      this._swap_once();
      collection.fetch({
        data: {
          include_count: true
        }
      });
      return this.view.set_page(page, collection);
    };

    Router.prototype.show_search = function(collection) {
      this._swap_once();
      collection.fetch();
      return this.view.set_page('search', collection);
    };

    Router.prototype.purchased = function(category, filter, params) {
      return this.show_list('purchased', new Collections.Purchased(params));
    };

    Router.prototype.readcasted = function(category, filter, params) {
      return this.show_list('readcasted', new Collections.Readcasted(params));
    };

    Router.prototype.saved = function(category, filter, params) {
      return this.show_list('saved', new Collections.Saved(params));
    };

    Router.prototype.published = function(category, filter, params) {
      if (filter === 'search') {
        return this.show_search(new Collections.Search({
          query: params.query
        }));
      } else {
        return this.show_list('published', new Collections.Published(params));
      }
    };

    Router.prototype.collections = function(category, filter, params) {
      return this.show_list('collections', new Collections.DocumentCollections(params));
    };

    Router.prototype.history = function(category, filter, params) {
      return this.show_list('history', new Collections.History(params));
    };

    return Router;

  })(Support.SwappingRouter);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/_swapping_paginator.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Events, SwappingPaginator, View,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Events = Scribd.Events;

  View = Scribd.MyContent.View;

  SwappingPaginator = (function(superClass) {
    extend(SwappingPaginator, superClass);

    _.extend(SwappingPaginator.prototype, Events);

    function SwappingPaginator(options) {
      this.numbered = options.numbered, this.infinite = options.infinite;
      this.current = null;
      this.setup_event_bubbling();
    }

    SwappingPaginator.prototype.setup_event_bubbling = function() {
      this.infinite.on('next_page', (function(_this) {
        return function() {
          if (_this.current !== _this.infinite) {
            return;
          }
          return _this.trigger('next_page');
        };
      })(this));
      return this.numbered.on('change_page', (function(_this) {
        return function(page_number) {
          if (_this.current !== _this.numbered) {
            return;
          }
          return _this.trigger('change_page', page_number);
        };
      })(this));
    };

    SwappingPaginator.prototype.render_numbered = function(count) {
      this.current = this.numbered;
      this.numbered.update_page_count(count);
      this.infinite.hide();
      if (count > 1) {
        return this.numbered.show();
      } else {
        return this.numbered.hide();
      }
    };

    SwappingPaginator.prototype.render_infinite = function() {
      this.current = this.infinite;
      this.numbered.hide();
      return this.infinite.show();
    };

    SwappingPaginator.prototype.stop_loading = function() {
      return this.current.stop_loading();
    };

    SwappingPaginator.prototype.hide = function() {
      return this.current.hide();
    };

    return SwappingPaginator;

  })(View);

  Scribd.MyContent.SwappingPaginator = SwappingPaginator;

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/views/categories.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var View, Views, no_default, ref, track_event,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  no_default = Scribd.no_default;

  ref = Scribd.MyContent, Views = ref.Views, View = ref.View, track_event = ref.track_event;

  Views.Categories = (function(superClass) {
    extend(Categories, superClass);

    function Categories() {
      return Categories.__super__.constructor.apply(this, arguments);
    }

    Categories.prototype.categories = [
      {
        name: 'Published',
        route: 'published'
      }, {
        name: 'Collections',
        route: 'collections'
      }, {
        name: 'Saved',
        route: 'saved'
      }, {
        name: 'Purchased',
        route: 'purchased'
      }, {
        name: 'Readcasted',
        route: 'readcasted'
      }, {
        name: 'History',
        route: 'history'
      }
    ];

    Categories.prototype.events = {
      'click a': 'select_category'
    };

    Categories.prototype.render = function() {
      this.$el.empty();
      return _.each(this.categories, (function(_this) {
        return function(category) {
          var $category, is_action_path, url;
          $category = $('<li></li>').addClass('category');
          $category.data('name', category.name);
          url = category.name.toLowerCase();
          is_action_path = url === Scribd.MyContent.page;
          if (is_action_path) {
            $category.addClass('selected').html(category.name);
          } else {
            $('<a></a>').html(category.name).attr('href', '/my_content/' + url).appendTo($category);
          }
          return $category.appendTo(_this.$el);
        };
      })(this));
    };

    Categories.prototype.select_category = no_default(function(event) {
      var name;
      event.stopPropagation();
      name = $(event.currentTarget).closest('.category').data('name');
      track_event('Click', "category_" + (name.toLowerCase()));
      this.navigate_link(event.currentTarget);
      return this.render();
    });

    return Categories;

  })(Scribd.MyContent.View);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/views/item.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var MyContent, Templates, View, Views, no_default, require_login, track_event,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MyContent = Scribd.MyContent, no_default = Scribd.no_default;

  Templates = MyContent.Templates, Views = MyContent.Views, View = MyContent.View, track_event = MyContent.track_event;

  require_login = function(fn) {
    return function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return Scribd.with_named_current_user((function(_this) {
        return function() {
          if (Scribd.named_current_user()) {
            return fn.apply(_this, args);
          } else {
            return Scribd.SignIn.open("my_content", window.location.toString());
          }
        };
      })(this));
    };
  };

  $(function() {
    return Views.Item = (function(superClass) {
      extend(Item, superClass);

      function Item() {
        return Item.__super__.constructor.apply(this, arguments);
      }

      Item.prototype.document_template = Templates.document;

      Item.prototype.collection_template = Templates.collection;

      Item.prototype.metric_template = Templates.item_metric;

      Item.prototype.misc_info_template = Templates.item_misc_info;

      Item.prototype.tipsy_button_template = Templates.tipsy_button;

      Item.prototype.deleted_item_template = Templates.deleted_item;

      Item.prototype.initialize = function() {
        this.bindTo(this.model, 'change:privacy', (function(_this) {
          return function() {
            var $button, privacy;
            $button = _this.$('.change_privacy .button');
            privacy = _this.model.get('privacy');
            if (privacy === 'private') {
              $button.addClass('active');
            } else {
              $button.removeClass('active');
            }
            return _this.$('.visibility').html(privacy === 'private' ? 'Private' : 'Public');
          };
        })(this));
        this.bindTo(this.model, 'change:bookmark', (function(_this) {
          return function() {
            var tooltip;
            tooltip = _this.model.get('bookmark') ? 'Unsave' : 'Save';
            return _this.$('.bookmark_document .button').toggleClass('active').trigger('scribd:update_tooltip', tooltip);
          };
        })(this));
        return this.bindTo(this.model, 'change:featured', (function(_this) {
          return function() {
            var tooltip;
            tooltip = _this.model.get('featured') ? 'Unfeature' : 'Feature';
            _this.$('.feature_document .button').toggleClass('active').trigger('scribd:update_tooltip', tooltip);
            return _this.$('.misc_info .featured').parent().toggle(_this.model.get('featured'));
          };
        })(this));
      };

      Item.prototype.events = {
        'click .bookmark_document .button': 'bookmark_document',
        'click .delete_document .button': 'delete_document',
        'click .change_privacy .option input': 'select_privacy_setting',
        'click .change_privacy .button': 'change_privacy',
        'click .add_to_collection .button': 'add_to_collection',
        'click .add_to_collection input': 'toggle_collection',
        'click .feature_document .button': 'feature_document',
        'click .edit_document .button': 'edit_document',
        'click .remove_button': 'remove_item'
      };

      Item.prototype.remove_item = function(event) {
        if (MyContent.page !== 'readcasted') {
          return;
        }
        return this.model.remove_readcast().then((function(_this) {
          return function() {
            return _this.fade_item({
              message: 'Removed'
            });
          };
        })(this));
      };

      Item.prototype.track = function(action, label) {
        return track_event(action, this.model.item_type + "_" + label);
      };

      Item.prototype.toggle_action = no_default(function(event) {
        var $parent;
        $parent = $(event.currentTarget).parent();
        this.$('.item_action').not($parent).removeClass('active');
        return $parent.toggleClass('active');
      });

      Item.prototype.change_privacy = function(event) {
        return this.toggle_action(event);
      };

      Item.prototype.edit_document = function(event) {
        return this.track('Click', 'edit');
      };

      Item.prototype.render = function() {
        var $category, $description, $featured_info, $list, $metrics, $misc_info, attrs, author, author_row, bookmark, date_types, delete_document, edit_document, feature, href, i, items, j, metrics, misc_info, moment_created_at, name, path, prefix, privacy, progress_options, progress_page, ref, ref1, template, time_ago, url;
        attrs = this.model.toJSON();
        privacy = attrs.privacy;
        attrs.visibility = privacy === 'private' ? 'Private' : 'Public';
        attrs.description || (attrs.description = 'No description.');
        if (this.model.item_type === 'collection') {
          template = this.collection_template;
          this.$el.html(template(_.omit(attrs, 'metadata')));
          $description = this.$('.description');
          if (attrs.documents.length) {
            $list = $('<ol></ol>');
            _.each(attrs.documents, function(doc, index) {
              var el;
              if (attrs.total_documents > 4 && index === 3) {
                el = "<li class=\"more\">\n  <a class=\"collection_link\" href=\"" + doc.url + "\">" + (_.escape(doc.title)) + "</a>\n  <a class=\"more_link\" href=\"" + attrs.url + "\">+ " + (attrs.total_documents - 4) + " more</a>\n</li>";
              } else {
                el = "<li><a class=\"collection_link\" href=\"" + doc.url + "\">" + (_.escape(doc.title)) + "</a></li>";
              }
              return $list.append(el);
            });
            $description.append($list);
          } else {
            $description.append('<p>No items.</p>');
          }
        } else {
          template = this.document_template;
          this.$el.html(template(_.omit(attrs, 'metadata')));
          if ((ref = MyContent.page) === 'saved' || ref === 'readcasted' || ref === 'history') {
            progress_page = Math.min(attrs.reading_progress || 1, attrs.page_count);
            progress_options = {
              page: Math.floor(progress_page),
              count: attrs.page_count,
              percentage: ((progress_page - 1) / (attrs.page_count - 1)) * 100
            };
            this.$('.reading_progress').show().html(Templates.reading_progress(progress_options));
          }
          bookmark = $(Templates.tipsy_button({
            id: 'bookmark_document',
            title: attrs.bookmark ? 'Unsave' : 'Save'
          }));
          if (attrs.bookmark) {
            bookmark.find('.button').addClass('active');
          }
          $category = this.$('.short_metadata .category .value');
          if (attrs.category != null) {
            name = attrs.category.name;
            $category.append("<a href=\"/browse/" + name + "\">" + name + "</a>");
          } else {
            $category.append('None');
          }
        }
        edit_document = Templates.tipsy_button({
          id: 'edit_document',
          title: 'Edit'
        });
        this.$('.tipsy').append(edit_document);
        if (bookmark != null) {
          this.$('.tipsy').append(bookmark);
        }
        if (this.model.item_type !== 'collection') {
          this._add_collection_button();
        }
        this._add_privacy_button(attrs.privacy_type);
        feature = $(Templates.tipsy_button({
          id: 'feature_document',
          title: 'Feature'
        }));
        if (attrs.featured) {
          feature.find('.button').addClass('active');
        }
        this.$('.tipsy').append(feature);
        delete_document = Templates.tipsy_button({
          id: 'delete_document',
          title: 'Delete'
        });
        this.$('.tipsy').append(delete_document);
        date_types = {
          published: 'Published',
          collections: 'Updated',
          saved: 'Saved',
          purchased: 'Purchased',
          readcasted: 'Readcasted',
          history: 'Read'
        };
        moment_created_at = moment(attrs.created_at);
        if (moment().diff(moment_created_at, 'weeks', true) > 1) {
          time_ago = moment_created_at.format('L');
        } else {
          time_ago = moment(attrs.created_at).fromNow();
        }
        metrics = [
          {
            name: date_types[MyContent.page] || 'Published',
            value: time_ago
          }
        ];
        if (this.model.item_type === 'document' && MyContent.page !== 'history') {
          items = [
            {
              name: 'Embed Reads',
              value: attrs.embed_reads
            }, {
              name: 'Reads',
              value: attrs.reads
            }, {
              name: 'Readcasts',
              value: attrs.readcasts
            }, {
              name: 'Comments',
              value: attrs.comments
            }
          ];
          metrics.push.apply(metrics, items);
        }
        $metrics = this.$('.metrics');
        _.each(metrics, (function(_this) {
          return function(val) {
            return $metrics.append(_this.metric_template(val));
          };
        })(this));
        misc_info = [];
        if (attrs.price) {
          misc_info.push({
            name: 'price',
            value: attrs.price
          });
        }
        $misc_info = this.$('.misc_info');
        _.each(misc_info, (function(_this) {
          return function(val) {
            return $misc_info.append(_this.misc_info_template(val));
          };
        })(this));
        $featured_info = $(this.misc_info_template({
          name: 'featured',
          value: 'Featured'
        }));
        $featured_info.toggle(attrs.featured);
        $misc_info.append($featured_info);
        if (attrs.owned_by_user) {
          this.$('.item').addClass('owned_by_user');
          if (MyContent.page !== 'history') {
            this.$('.delete_document').show();
          }
          this.$('.change_privacy, .edit_document').show();
          path = this.model.item_type === 'collection' ? '/my_document_collections/' : '/word/document_edit/';
          href = "" + path + this.model.id;
          this.$('.edit_document .button').prop('href', href);
        } else {
          prefix = this.model.item_type === 'collection' ? 'Updated' : 'Published';
          url = '/' + attrs.user.name;
          author_row = this.$('.author');
          if (attrs.authors && attrs.authors.length) {
            author_row.append("Written by ");
            for (i = j = 0, ref1 = attrs.authors.length; j < ref1; i = j += 1) {
              author = attrs.authors[i];
              author.url || (author.url = '/' + author.name);
              author_row.append("<a class=\"username\" href=\"" + author.url + "\" data-track=\"title_link\">" + author.name + "</a>");
              if (i !== attrs.authors.length) {
                author_row.append(", ");
              }
            }
          } else {
            author_row.html(prefix + " by <a class=\"username\" href=\"" + url + "\">" + attrs.user.name + "</a>\non <span class=\"date\">" + attrs.published_at + "</span>");
          }
        }
        if (!(MyContent.page === 'readcasted' && this.model.item_type === 'document')) {
          this.$('.remove_button').remove();
        }
        return this;
      };

      Item.prototype._add_privacy_button = function(privacy_setting) {
        var $change_privacy, contains_private_docs, privacy_button;
        privacy_button = this.model.item_type === 'collection' ? Templates.collection_privacy_button() : Templates.privacy_button();
        this.$('.tipsy').append(privacy_button);
        this.$(".change_privacy .option." + privacy_setting + " input").prop('checked', true);
        if (privacy_setting === 'private') {
          this.$('.change_privacy .button').addClass('active');
        }
        contains_private_docs = this.model.get('contains_private_documents');
        if (this.model.item_type === 'collection' && contains_private_docs) {
          $change_privacy = this.$('.change_privacy');
          $change_privacy.find('.option').hide();
          return $change_privacy.find('.cant_be_public').show();
        }
      };

      Item.prototype._add_collection_button = function() {
        return this.$('.tipsy').append(Templates.add_to_collection_button());
      };

      Item.prototype.select_privacy_setting = function(event) {
        var $radio, val;
        $radio = $(event.currentTarget);
        if (this.model.item_type === 'collection') {
          val = $radio.val();
          switch (val) {
            case 'public':
              this.track('Click', 'privacy_type_public');
              return this.model.make_public();
            default:
              this.track('Click', 'privacy_type_private');
              return this.model.make_private();
          }
        } else {
          if ($radio.val() === 'public') {
            this.track('Click', 'privacy_type_public');
            return this.model.make_public();
          } else {
            this.track('Click', 'privacy_type_private');
            return this.model.make_private();
          }
        }
      };

      Item.prototype.bookmark_document = no_default(require_login(function(event) {
        if (this.model.get('bookmark')) {
          this.track('Click', 'remove_bookmark');
          return this.model.remove_bookmark();
        } else {
          this.track('Click', 'bookmark');
          return this.model.bookmark();
        }
      }));

      Item.prototype.feature_document = no_default(require_login(function(event) {
        if (this.model.get('featured')) {
          this.track('Click', 'unfeature');
          return this.model.unfeature();
        } else {
          this.track('Click', 'feature');
          return this.model.feature();
        }
      }));

      Item.prototype.delete_document = no_default(function(event) {
        if (!confirm('Are you sure you want to delete "' + this.model.get('title') + '"?')) {
          return;
        }
        this.model.destroy();
        return this.fade_item();
      });

      Item.prototype.fade_item = function(template_options) {
        var $inner, duration;
        if (template_options == null) {
          template_options = {};
        }
        if (template_options.title == null) {
          template_options.title = this.model.get('title');
        }
        if (template_options.message == null) {
          template_options.message = 'Deleted';
        }
        if (typeof Scribd.kill_tooltips === "function") {
          Scribd.kill_tooltips();
        }
        duration = 200;
        $inner = this.$el.children().first();
        $inner.css({
          height: 'auto',
          minHeight: 0
        });
        $inner.children().not('.details').fadeOut(duration);
        this.$('.title').animate({
          paddingTop: 6
        }, duration);
        this.$('.title a').animate({
          color: '#f14950'
        }, duration);
        return $inner.animate({
          height: 30,
          paddingTop: 0,
          paddingBottom: 0,
          backgroundColor: '#fcdddf'
        }, {
          duration: duration,
          complete: (function(_this) {
            return function() {
              var template;
              template = _this.deleted_item_template(template_options);
              $inner.addClass('deleted').html(template);
              $inner.find('.title').dotdotdot({
                wrap: 'letter'
              });
              return $inner.delay(5000).slideUp(_this.leave);
            };
          })(this)
        });
      };

      Item.prototype.loaded_collection_list = false;

      Item.prototype.add_to_collection = no_default(require_login(function(event) {
        this.track('Click', 'add_to_collection');
        return Scribd.AddToCollectionLightbox.remote_open(this.model.get('id'));
      }));

      Item.prototype.toggle_collection = function(event) {
        var $target, id;
        $target = $(event.target);
        id = $target.data('id');
        if ($target.prop('checked')) {
          return this.model.add_to_collection(id);
        } else {
          return this.model.remove_from_collection(id);
        }
      };

      return Item;

    })(View);
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/views/item_list.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Templates, View, Views, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = Scribd.MyContent, Templates = ref.Templates, Views = ref.Views, View = ref.View;

  $(function() {
    return Views.ItemList = (function(superClass) {
      extend(ItemList, superClass);

      function ItemList() {
        return ItemList.__super__.constructor.apply(this, arguments);
      }

      ItemList.prototype.no_items_template = Templates.no_items;

      ItemList.prototype.error_message_template = Templates.error_message;

      ItemList.prototype.initialize = function() {
        return this.bindTo(this.collection, 'unshift', this.unshift);
      };

      ItemList.prototype.render = function() {
        if (this.collection.has_error) {
          this.$el.html(this.error_message_template(this.collection.has_error));
        } else if (this.collection.isEmpty()) {
          this.$el.html(this.no_items_template());
        } else {
          this.$el.empty();
          this.collection.each((function(_this) {
            return function(item) {
              return _this.add(item);
            };
          })(this));
        }
        return this;
      };

      ItemList.prototype.add = function(item) {
        var view;
        view = new Views.Item({
          model: item
        });
        this.appendChild(view);
        return view.$el;
      };

      ItemList.prototype.unshift = function(item) {
        var view;
        view = new Views.Item({
          model: item
        });
        this.prependChild(view);
        return view.$el;
      };

      return ItemList;

    })(View);
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/views/items_container.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var View, Views, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = Scribd.MyContent, Views = ref.Views, View = ref.View;

  Views.ItemsContainer = (function(superClass) {
    extend(ItemsContainer, superClass);

    function ItemsContainer() {
      return ItemsContainer.__super__.constructor.apply(this, arguments);
    }

    ItemsContainer.prototype.render = function(complete) {
      if (typeof Scribd.kill_tooltips === "function") {
        Scribd.kill_tooltips();
      }
      this.item_list = new Views.ItemList({
        className: 'items',
        collection: this.collection
      });
      this.appendChild(this.item_list);
      if (typeof complete === "function") {
        complete();
      }
      this.bindTo(this.item_list, 'truncate', this.truncate);
      this.truncate();
      Scribd.hook_tooltips($('.home_container'));
      return this;
    };

    ItemsContainer.prototype.truncate = function() {
      var $elements;
      $elements = this.$('.item').find('.title a, .description p, .description .collection_link');
      if ($elements.length) {
        return $elements.dotdotdot({
          wrap: 'letter'
        });
      }
    };

    return ItemsContainer;

  })(View);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/views/loading_overlay.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Templates, View, Views, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = Scribd.MyContent, Templates = ref.Templates, Views = ref.Views, View = ref.View;

  $(function() {
    return Views.LoadingOverlay = (function(superClass) {
      extend(LoadingOverlay, superClass);

      function LoadingOverlay() {
        return LoadingOverlay.__super__.constructor.apply(this, arguments);
      }

      LoadingOverlay.prototype.template = Templates.loading_overlay;

      LoadingOverlay.prototype.initialize = function() {
        var base;
        return (base = this.options).delay != null ? base.delay : base.delay = 225;
      };

      LoadingOverlay.prototype.render = function() {
        this.$el.html(this.template());
        this.timeout = null;
        return this;
      };

      LoadingOverlay.prototype.show = function(callback) {
        return this.timeout = setTimeout((function(_this) {
          return function() {
            _this.$el.fadeIn(50);
            if (typeof callback === "function") {
              callback();
            }
            return _this.timeout = null;
          };
        })(this), this.options.delay);
      };

      LoadingOverlay.prototype.hide = function() {
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
          return false;
        } else {
          this.$el.fadeOut(100);
          return true;
        }
      };

      return LoadingOverlay;

    })(View);
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/views/page.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Models, MyContent, PAGE_SIZE, SwappingPaginator, Templates, View, Views, no_default, track_event,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  MyContent = Scribd.MyContent, no_default = Scribd.no_default;

  Templates = MyContent.Templates, Views = MyContent.Views, View = MyContent.View, Models = MyContent.Models, SwappingPaginator = MyContent.SwappingPaginator, track_event = MyContent.track_event;

  PAGE_SIZE = 30;

  $(function() {
    return Views.Page = (function(superClass) {
      extend(Page, superClass);

      function Page() {
        return Page.__super__.constructor.apply(this, arguments);
      }

      Page.prototype.template = Templates.page;

      Page.prototype.searchable_pages = ['published', 'collections', 'search'];

      Page.prototype.initialize = function() {
        return $('body').on('click', (function(_this) {
          return function(event) {
            _this.clear_popups(event);
            return _this.clear_collections_dropdown(event);
          };
        })(this));
      };

      Page.prototype.events = {
        'submit .search_box form': 'search',
        'click .collections_dropdown_box .cancel_button': 'cancel_collections_dropdown',
        'click .collections_dropdown_box .submit_button': 'submit_collections_dropdown',
        'submit .collections_dropdown_box form': 'submit_collections_dropdown'
      };

      Page.prototype.render = function() {
        this.$el.html(this.template());
        this.search = this.$('#search');
        this.add_placeholder_text();
        this.render_loading_overlay();
        this.render_categories();
        return this;
      };

      Page.prototype.render_loading_overlay = function() {
        this.loading_overlay = new Views.LoadingOverlay({
          el: this.$('.loading_overlay')
        });
        return this.loading_overlay.render();
      };

      Page.prototype.render_categories = function() {
        var categories;
        categories = new Views.Categories({
          el: this.$('.categories')
        });
        return categories.render();
      };

      Page.prototype.add_placeholder_text = function() {
        var description, title;
        this.search.placeholder_text('Search My Documents & Collections');
        title = this.$('.collections_dropdown_box .collection_title');
        title.placeholder_text('Name the collection');
        description = this.$('.collections_dropdown_box .collection_description');
        return description.placeholder_text('Add a description (Optional)');
      };

      Page.prototype.set_page = function(page, collection, scroll_top) {
        var ref, render_page;
        if (scroll_top == null) {
          scroll_top = false;
        }
        this.loading_overlay.show();
        if ((ref = this.items_container) != null) {
          ref.$el.addClass('leaving');
        }
        render_page = (function(_this) {
          return function() {
            var append;
            collection.off('reset', render_page);
            _this.page = page;
            _this.collection = collection;
            append = _this.collection.type === 'history' && _this.collection.timestamp > 0;
            if (!append) {
              $('body').scrollTop(0);
            }
            _this.loading_overlay.hide();
            _this.render_page_menu();
            _this.render_paginator();
            return _this.render_items(append);
          };
        })(this);
        return this.bindTo(collection, 'reset', render_page);
      };

      Page.prototype.render_items = function(append) {
        var $placeholder, old_container;
        if (append == null) {
          append = false;
        }
        $placeholder = this.$('.items_container_placeholder');
        old_container = this.items_container;
        this.items_container = new Views.ItemsContainer({
          collection: this.collection,
          className: 'items_container'
        });
        return this.items_container.render((function(_this) {
          return function() {
            if (!append) {
              $placeholder.empty();
              if (old_container != null) {
                old_container.leave();
              }
            }
            $placeholder.append(_this.items_container.$el);
            return _this.paginator.stop_loading();
          };
        })(this));
      };

      Page.prototype.setup_paginator = function() {
        var infinite, numbered;
        numbered = new MyContent.NumberedPaginator({
          el: this.$('.numbered_paginator')
        });
        infinite = new MyContent.InfinitePaginator({
          el: this.$('.infinite_paginator')
        });
        this.paginator = new SwappingPaginator({
          numbered: numbered,
          infinite: infinite
        });
        this.bindTo(this.paginator, 'change_page', (function(_this) {
          return function(page_number) {
            var new_page;
            new_page = _this.collection.new_page(page_number);
            return _this.set_page(_this.page, new_page, true);
          };
        })(this));
        this.bindTo(this.paginator, 'next_page', (function(_this) {
          return function() {
            var next_page;
            next_page = _this.collection.next_page();
            return _this.set_page(_this.page, next_page, true);
          };
        })(this));
        return this.paginator;
      };

      Page.prototype.render_paginator = function() {
        var count;
        if (!this.paginator) {
          this.setup_paginator();
        }
        if (this.collection.type === 'history') {
          this.paginator.render_infinite();
          if (this.collection.is_last_page()) {
            return this.paginator.hide();
          }
        } else {
          count = Math.ceil(this.collection.total_items / PAGE_SIZE);
          return this.paginator.render_numbered(count);
        }
      };

      Page.prototype.render_page_menu = function() {
        var $page_menu, attrs, options, ref;
        if ((ref = this.page_menu) != null) {
          ref.leave();
        }
        $page_menu = this.$('.page_menu');
        if (this.collection.query) {
          this.$('#search').val(this.collection.query).removeClass('inactive');
        }
        if (this.page === 'search') {
          return $page_menu.html("<div class=\"message\">\n  Search results for \"" + this.collection.query + "\"\n</div>");
        } else {
          attrs = ['filter', 'item_type', 'total_items', 'sort'];
          options = _.pick.apply(_, [this.collection].concat(slice.call(attrs)));
          options.page = this.page;
          this.page_menu = new Views.PageMenu(options);
          return this.page_menu.render().$el.appendTo($page_menu.empty());
        }
      };

      Page.prototype.clear_collections_dropdown = function(event) {
        var $target;
        $target = $(event.target);
        if ($target.closest('.collections_dropdown_box').length || $target.closest('.collections_dropdown').length) {
          return;
        }
        return this.cancel_collections_dropdown(event);
      };

      Page.prototype.cancel_collections_dropdown = function(event) {
        var $dropdown;
        this.$('.collections_dropdown .button').removeClass('active');
        $dropdown = this.$('.collections_dropdown_box');
        return $dropdown.slideUp(200, (function(_this) {
          return function() {
            $dropdown.find('form')[0].reset();
            $dropdown.find('.submit_button').prop('disabled', false);
            return $dropdown.find('input, textarea').addClass('inactive');
          };
        })(this));
      };

      Page.prototype.submit_collections_dropdown = no_default(function(event) {
        var $dropdown, request;
        $dropdown = this.$('.collections_dropdown_box');
        $dropdown.find('.submit_button').prop('disabled', true);
        request = Models.DocumentCollection.create({
          name: $dropdown.find('.collection_title').val(),
          html_description: $dropdown.find('.collection_description').val(),
          privacy_type: $dropdown.find('.collection_privacy_type').val()
        });
        return request.then((function(_this) {
          return function(result) {
            var coll;
            coll = Models.DocumentCollection.from_server(result);
            _this.collection.unshift(coll, {
              slient: true
            });
            _this.collection.trigger('unshift', coll);
            return _this.cancel_collections_dropdown(event);
          };
        })(this));
      });

      Page.prototype.clear_popups = function(event) {
        if ($(event.target).closest('.item_action').length) {
          return;
        }
        return this.$('.item_action').removeClass('active');
      };

      Page.prototype.search = no_default(function(event) {
        track_event('Submit', 'search');
        return this.navigate('published/search/query:' + this.search.val());
      });

      return Page;

    })(View);
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/views/page_menu.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Templates, View, Views, no_default, pages, ref, track_event,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  no_default = Scribd.no_default;

  ref = Scribd.MyContent, Templates = ref.Templates, Views = ref.Views, View = ref.View, track_event = ref.track_event;

  pages = {
    published: {
      all: 'All',
      "public": 'Public',
      "private": 'Private',
      for_sale: 'For Sale'
    },
    collections: {
      all: 'All',
      "public": 'Public',
      "private": 'Private',
      for_sale: 'For Sale'
    },
    saved: {
      all: 'All',
      mine: 'Your Content',
      other: "Other Publisher's Content"
    },
    purchased: {
      all: 'All',
      documents: 'Documents',
      collections: 'Collections'
    },
    readcasted: {
      all: 'All',
      documents: 'Documents',
      collections: 'Collections'
    },
    history: {
      all: 'My Recently Read'
    }
  };

  $(function() {
    return Views.PageMenu = (function(superClass) {
      extend(PageMenu, superClass);

      function PageMenu() {
        return PageMenu.__super__.constructor.apply(this, arguments);
      }

      PageMenu.prototype.template = Templates.page_menu;

      PageMenu.prototype.events = {
        'click a': 'select_link',
        'click .collections_dropdown .button': 'show_collections_dropdown'
      };

      PageMenu.prototype.show_collections_dropdown = no_default(function(event) {
        track_event('Click', 'create_new_collection');
        $(event.currentTarget).addClass('active');
        return $('.collections_dropdown_box').slideDown(200);
      });

      PageMenu.prototype.render_filters = function() {
        var $filters, filters, first_filter;
        filters = pages[this.options.page];
        $filters = this.$('.filters');
        first_filter = true;
        return _.each(filters, (function(_this) {
          return function(title, id) {
            var $filter, $inner, $text, total, url;
            $filter = $('<li></li>');
            if (id === _this.options.filter) {
              $filter.addClass('selected');
              $text = $("<span class=\"label\">" + title + "</span>");
              $inner = $text;
            } else {
              url = "/my_content/" + _this.options.page + "/" + id;
              $text = $("<span class=\"label\"><a href=\"" + url + "\">" + title + "</a></span>");
              $inner = $text.find('a');
              $inner.data('filter-id', id);
            }
            $text.appendTo($filter);
            if (first_filter) {
              total = _this.options.total_items;
              $inner.append(" <span class=\"total\">(" + (total || 0) + ")</span>");
              first_filter = false;
            }
            return $filter.appendTo($filters);
          };
        })(this));
      };

      PageMenu.prototype.set_filter = function(filter) {
        this.options.filter = filter;
        return this.render();
      };

      PageMenu.prototype.sortable_pages = ['published', 'collections'];

      PageMenu.prototype.render_collections_dropdown = function() {
        return this.$('.collections_dropdown').html(Templates.collections_dropdown());
      };

      PageMenu.prototype.render = function() {
        var ref1;
        this.$el.html(this.template());
        this.render_filters();
        if (this.options.page === 'collections') {
          this.render_collections_dropdown();
        }
        if ((ref1 = this.options.page, indexOf.call(this.sortable_pages, ref1) >= 0) && this.options.filter !== 'for_sale') {
          this.sort_menu = new Views.SortMenu({
            el: this.$('.sort_menu'),
            sort: this.options.sort,
            page: this.options.page
          });
          this.renderChild(this.sort_menu);
        }
        return this;
      };

      PageMenu.prototype.select_link = no_default(function(event) {
        var $target, filter_id;
        event.stopPropagation();
        this.undelegateEvents();
        $target = $(event.currentTarget);
        filter_id = $target.data('filter-id');
        track_event('Click', "category_" + this.options.page + "_filter_" + filter_id);
        this.set_filter(filter_id);
        return this.navigate_link(event.currentTarget);
      });

      return PageMenu;

    })(View);
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/my_content/views/sort_menu.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var Templates, View, Views, no_default, ref, track_event,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  no_default = Scribd.no_default;

  ref = Scribd.MyContent, Templates = ref.Templates, Views = ref.Views, View = ref.View, track_event = ref.track_event;

  $(function() {
    return Views.SortMenu = (function(superClass) {
      extend(SortMenu, superClass);

      function SortMenu() {
        return SortMenu.__super__.constructor.apply(this, arguments);
      }

      SortMenu.prototype.template = Templates.sort_menu;

      SortMenu.prototype.events = {
        'click .sort_button': function() {
          return false;
        },
        'click a': 'choose_sort'
      };

      SortMenu.prototype.render = function() {
        var $sort_types, sort_types;
        sort_types = {
          date: 'Date Published',
          title: 'Title'
        };
        if (this.options.page !== 'collections') {
          sort_types.reads = 'Reads';
        }
        this.$el.html(this.template());
        $sort_types = this.$('.sort_types ul');
        _.each(sort_types, (function(_this) {
          return function(id, type) {
            var $sort_type, hash, pathname, ref1;
            $sort_type = $("<li class='sort_type'>" + id + "</li>");
            $sort_type.data('sort_type', type);
            if (type === _this.options.sort) {
              $sort_type.addClass('selected').html("<div class=\"sprite blue_tri_right\"></div> " + id);
            } else {
              ref1 = window.location, pathname = ref1.pathname, hash = ref1.hash;
              $sort_type.html("<a href=\"" + Scribd.MyContent.root + _this.options.page + "/sort:" + type + "/direction:asc\">" + id + "</a>");
            }
            return $sort_type.appendTo($sort_types);
          };
        })(this));
        return this;
      };

      SortMenu.prototype.choose_sort = no_default(function(event) {
        var sort;
        sort = $(event.currentTarget).closest('.sort_type').data('sort_type');
        track_event('Click', "category_" + this.options.page + "_sort_" + sort);
        return this.navigate_link(event.currentTarget);
      });

      return SortMenu;

    })(View);
  });

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-08 22:43:32 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/my_content/_infinite_paginator.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var InfinitePaginator, View, no_default,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  no_default = Scribd.no_default;

  View = Scribd.MyContent.View;

  InfinitePaginator = (function(superClass) {
    extend(InfinitePaginator, superClass);

    function InfinitePaginator() {
      return InfinitePaginator.__super__.constructor.apply(this, arguments);
    }

    InfinitePaginator.prototype.events = function() {
      return {
        'click .load_more': 'next_page'
      };
    };

    InfinitePaginator.prototype.initialize = function() {
      return this.load_more = this.$('.load_more');
    };

    InfinitePaginator.prototype.next_page = no_default(function(event) {
      this.trigger('next_page');
      return this.load_more.addClass('loading').prop("disabled", true);
    });

    InfinitePaginator.prototype.stop_loading = function() {
      return this.load_more.removeClass('loading').prop("disabled", false);
    };

    InfinitePaginator.prototype.hide = function() {
      return this.$el.hide();
    };

    InfinitePaginator.prototype.show = function() {
      return this.$el.show();
    };

    return InfinitePaginator;

  })(View);

  Scribd.MyContent.InfinitePaginator = InfinitePaginator;

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

