/************************************************************************
 * 'giftcards.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:12 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-15 19:39:42 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-08 22:43:32 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/carousels/carousel.coffee (last modified: 2016-05-09 22:37:19 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  if (Scribd.UI == null) {
    Scribd.UI = {};
  }

  Scribd.UI.Carousel = (function() {
    Carousel.prototype.anim_speed = 200;

    Carousel.prototype.easing = "ease_in_out_cubic";

    Carousel.prototype.images_loaded = false;

    Carousel.setup_mouse_move = _.once(function() {
      var clean;
      clean = _.throttle(this.clean_removed_carousels, 2000);
      return $(document.body).on("mousemove", _.throttle(function(e) {
        var carousel, h, i, j, k, l, len, len1, other, ref, ref1, results, top, y;
        clean();
        y = e.pageY;
        ref = Scribd.UI.Carousel.carousels;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          carousel = ref[i];
          top = carousel.container.offset().top;
          if (y < top || y > top + 400) {
            continue;
          }
          h = carousel.container.outerHeight();
          if (y > top + h) {
            continue;
          }
          carousel.show_paddles(true);
          ref1 = Scribd.UI.Carousel.carousels;
          for (k = l = 0, len1 = ref1.length; l < len1; k = ++l) {
            other = ref1[k];
            if (i === k) {
              continue;
            }
            other.show_paddles(false);
          }
          break;
        }
        return results;
      }, 150));
    });

    Carousel.clean_removed_carousels = function() {
      var carousel;
      return Scribd.UI.Carousel.carousels = (function() {
        var j, len, ref, results;
        ref = Scribd.UI.Carousel.carousels;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          carousel = ref[j];
          if (!$.contains(document.documentElement, carousel.container[0])) {
            continue;
          }
          results.push(carousel);
        }
        return results;
      })();
    };

    function Carousel(container, opts) {
      var check_items;
      this.container = container;
      this.opts = opts != null ? opts : {};
      Scribd.UI.Carousel.carousels.push(this);
      this.container = $(this.container).data("carousel", this);
      this.images_loaded = !this.container.data("lazy_images");
      if (this.container.hasClass("cache_widget")) {
        this.container = this.container.find('.carousel_widget');
      }
      this.carousel = this.container.find(".carousel");
      this.scrolling = this.carousel.find(".carousel_scrolling");
      check_items = this.check_items_inview;
      this.check_items_inview = _.debounce(((function(_this) {
        return function() {
          return check_items.apply(_this);
        };
      })(this)), 500);
      this.container.on("scribd:reshape_carousel", (function(_this) {
        return function() {
          return _this.reshape();
        };
      })(this));
      if (this.opts.tracking_module !== false) {
        new Scribd.RecommendationTracking.Module(this.container, {
          on_tracking: (function(_this) {
            return function(tracking) {
              _this.tracking = tracking;
            };
          })(this),
          on_in_view: (function(_this) {
            return function() {
              return _this.check_items_inview();
            };
          })(this)
        });
      }
      this.setup_events();
      this.setup_scrollbar();
      this.setup_flags();
      if (this.opts.show_ui_on_mousemove) {
        Scribd.UI.Carousel.setup_mouse_move();
      }
      this.reshape();
      this.setup_viewport_scrolling();
    }

    Carousel.prototype.setup_viewport_scrolling = function() {
      var cache_offsets, check_visibility, has_been_viewed, listen_target, resize_handler, scroll_handler, scroll_parent, top, win;
      if (this.images_loaded) {
        return;
      }
      win = $(window);
      scroll_parent = this.container.closest(".carousel_scroll_parent");
      has_been_viewed = false;
      if (scroll_parent.length) {
        listen_target = scroll_parent;
        top = 0;
        cache_offsets = _.throttle((function(_this) {
          return function() {
            return top = _this.container.offset().top + scroll_parent[0].scrollTop - scroll_parent.offset().top - scroll_parent.height();
          };
        })(this), 1000, {
          trailing: false
        });
        check_visibility = (function(_this) {
          return function() {
            cache_offsets();
            return scroll_parent[0].scrollTop > top;
          };
        })(this);
      } else {
        listen_target = win;
        top = this.container.offset().top;
        check_visibility = (function(_this) {
          return function() {
            return win.scrollTop() + win.height() > top;
          };
        })(this);
      }
      resize_handler = (function(_this) {
        return function() {
          if (has_been_viewed) {
            return _this.show_visible_images();
          }
        };
      })(this);
      scroll_handler = (function(_this) {
        return function() {
          if (check_visibility()) {
            has_been_viewed = true;
            _this.show_visible_images();
            return listen_target.off("scroll resize", scroll_handler);
          }
        };
      })(this);
      win.on("resize", _.debounce(resize_handler, 100));
      listen_target.on("scroll resize", scroll_handler);
      return _.defer(scroll_handler);
    };

    Carousel.prototype.setup_events = function() {
      if (this.opts.disable_click) {
        return;
      }
      this.container.dispatch("click", {
        carousel_prev: (function(_this) {
          return function() {
            _this.on_interact();
            return _this.scroll_items(-_this.cells_to_scroll());
          };
        })(this),
        carousel_next: (function(_this) {
          return function() {
            _this.on_interact();
            return _this.scroll_items(_this.cells_to_scroll());
          };
        })(this)
      });
      return this.container.on("click", ".doc_link", function(e) {
        return $(e.target).trigger("scribd:doc_link_clicked");
      });
    };

    Carousel.prototype.setup_scrollbar = function() {
      var thumb, update_classes;
      this.scrollbar = this.container.find(".carousel_scrollbar");
      thumb = this.scrollbar.find(".carousel_scrollbar_thumb");
      update_classes = _.debounce((function(_this) {
        return function(left, outer, inner) {
          _this.container.toggleClass("on_first_page", left === 0);
          return _this.container.toggleClass("on_last_page", left + outer === inner);
        };
      })(this), 100);
      this.update_scrollbar = (function(_this) {
        return function() {
          var available, inner, left, left_edge, outer, right_edge;
          inner = _this.scroll_width();
          outer = _this.scrolling.innerWidth();
          left = _this.scrolling.scrollLeft();
          available = _this.scrollbar.width();
          left_edge = Math.floor(left / inner * outer);
          right_edge = outer - Math.floor((left + outer) / inner * outer);
          left_edge = Math.min(left_edge, available - 10);
          if (right_edge <= 10) {
            right_edge = 0;
          }
          if (right_edge > available - left_edge) {
            right_edge = available - left_edge - 10;
          }
          update_classes(left, outer, inner);
          return thumb.css({
            left: left_edge + "px",
            right: right_edge + "px"
          });
        };
      })(this);
      this.scrolling.on("scroll", (function(_this) {
        return function() {
          _this.on_interact();
          _this.update_scrollbar();
          return _this.check_items_inview();
        };
      })(this));
      this.update_scrollbar();
      return thumb.draggable({
        start: (function(_this) {
          return function() {
            return _this.container.addClass("dragging");
          };
        })(this),
        stop: (function(_this) {
          return function() {
            return _this.container.removeClass("dragging");
          };
        })(this),
        move: (function(_this) {
          return function(dx, dy) {
            var scale;
            scale = _this.scroll_width() / _this.scrolling.innerWidth();
            return _this.scrolling.scrollLeft(_this.scrolling.scrollLeft() + dx * scale);
          };
        })(this)
      });
    };

    Carousel.prototype.scroll_items = function(n) {
      var left, max, target, time, width;
      width = this.cell_width();
      if (width === 0) {
        return;
      }
      if (this.scrolling.is(":animated")) {
        return;
      }
      left = this.scrolling.scrollLeft();
      target = Math.floor(left / width + 0.1) * width + n * width;
      max = this.scroll_width() - this.scrolling.innerWidth();
      target = Math.max(0, Math.min(target, max));
      if (max - target < 15) {
        target = max;
      }
      if (target < 15) {
        target = 0;
      }
      if (left === target) {
        return;
      }
      time = Math.floor(this.anim_speed * Math.abs((left - target) / width));
      return this.scrolling.animate({
        scrollLeft: target
      }, {
        duration: time,
        easing: "smoothstep"
      });
    };

    Carousel.prototype.cells_to_scroll = function() {
      var visible_cells;
      visible_cells = this.scrolling.width() / this.cell_width();
      if (visible_cells <= 1.5) {
        return 1;
      }
      return Math.ceil(visible_cells) - 1;
    };

    Carousel.prototype.cell_width = function() {
      return this.carousel.find(".object_cell:first").outerWidth(true);
    };

    Carousel.prototype.scroll_width = function() {
      var ref;
      return ((ref = this.scrolling[0]) != null ? ref.scrollWidth : void 0) || 0;
    };

    Carousel.prototype.reshape = function() {
      var inner, outer;
      inner = this.scroll_width();
      outer = this.scrolling.innerWidth();
      this.container.toggleClass("has_no_scrolling", inner - outer < 5);
      return typeof this.update_scrollbar === "function" ? this.update_scrollbar() : void 0;
    };

    Carousel.prototype.show_visible_images = function() {
      var j, len, max, ref, results, thumb;
      if (this.images_loaded) {
        return;
      }
      max = this.scrolling.innerWidth();
      ref = this.carousel.find("img[data-src]");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        thumb = ref[j];
        thumb = $(thumb);
        if (thumb.position().left < max) {
          results.push(this.show_image($(thumb)));
        } else {
          break;
        }
      }
      return results;
    };

    Carousel.prototype.show_all_images = function() {
      var j, len, ref, results, thumb;
      if (this.images_loaded) {
        return;
      }
      this.images_loaded = true;
      ref = this.carousel.find("img[data-src]");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        thumb = ref[j];
        results.push(this.show_image($(thumb)));
      }
      return results;
    };

    Carousel.prototype.setup_flags = function() {
      return Scribd.DocumentCell.add_flags(this.container);
    };

    Carousel.prototype.flush_images = function() {
      var flush;
      flush = (function(_this) {
        return function() {
          var ref;
          if (!((ref = _this._load_queue) != null ? ref.length : void 0)) {
            return;
          }
          $(_this._load_queue).velocity("transition.fadeIn");
          return _this._load_queue = [];
        };
      })(this);
      this.flush_images = _.debounce(flush, 10);
      return this.flush_images();
    };

    Carousel.prototype.show_image = function(img) {
      var ref, src, srcset;
      img = $(img);
      ref = img.data(), src = ref.src, srcset = ref.srcset;
      if (!src) {
        return;
      }
      img.on("load", (function(_this) {
        return function(e) {
          _this._load_queue || (_this._load_queue = []);
          _this._load_queue.push(img[0]);
          return _this.flush_images();
        };
      })(this));
      if (window.location.hash.match(/\bdebug_images\b/)) {
        img.style({
          backgroundImage: "red"
        });
        setTimeout(function() {
          img.style({
            backgroundImage: ""
          });
          img.attr("src", src);
          return img.attr("srcset", srcset);
        }, 500);
      } else {
        img.attr("src", src);
        img.attr("srcset", srcset);
      }
      img.removeData("src");
      return img.removeData("srcset");
    };

    Carousel.prototype.show_paddles = function(enable) {
      if (enable == null) {
        enable = true;
      }
      return this.container.toggleClass("ui_visible", !!enable);
    };

    Carousel.prototype.on_interact = function() {
      this.on_interact = function() {};
      this.show_all_images();
      return $(document.body).track({
        category: this.opts.page || "carousel",
        action: "click",
        label: "carousel:first_carousel_click"
      });
    };

    Carousel.prototype.check_items_inview = function() {
      var el, idx, in_view, j, left, len, outer, rec_id, ref, threshold, width;
      if (this.tracking == null) {
        return;
      }
      threshold = 50;
      outer = this.scrolling.innerWidth();
      ref = this.container.find(".document_cell .thumb");
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        el = ref[idx];
        el = $(el);
        if (el.is(".visibility_tracked")) {
          continue;
        }
        left = el.position().left;
        width = el.width();
        in_view = left + threshold >= 0 && left + width - threshold <= outer;
        if (!in_view) {
          continue;
        }
        rec_id = el.closest(".document_cell").data("track_uuid");
        Scribd.RecommendationTracking.track_obj_view(this.tracking.view_id, rec_id);
        el.addClass("visibility_tracked");
      }
      return null;
    };

    return Carousel;

  })();

  Scribd.UI.Carousel.carousels = [];

  Scribd.UI.SquareCarousel = (function(superClass) {
    extend(SquareCarousel, superClass);

    function SquareCarousel() {
      return SquareCarousel.__super__.constructor.apply(this, arguments);
    }

    return SquareCarousel;

  })(Scribd.UI.Carousel);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/fancy_header/_nav_menu.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.NavMenu = (function() {
    function NavMenu(container) {
      this.container = $(container);
      $(window).one("load", (function(_this) {
        return function() {
          return _this.container.lazyimages();
        };
      })(this));
      this.container.on("click", (function(_this) {
        return function(e) {
          if ($(e.target).is(".nav_shroud")) {
            _this.toggle();
            return e.preventDefault();
          }
        };
      })(this));
    }

    NavMenu.prototype.toggle = function() {
      var body, set_show;
      if (this._toggling) {
        return;
      }
      this._toggling = true;
      body = $(document.body);
      set_show = (function(_this) {
        return function() {
          return body.toggleClass("nav_visible");
        };
      })(this);
      if (body.is(".show_nav")) {
        body.removeClass("nav_visible");
        return setTimeout((function(_this) {
          return function() {
            body.removeClass("show_nav");
            return _this._toggling = false;
          };
        })(this), 500);
      } else {
        body.addClass("show_nav");
        return setTimeout((function(_this) {
          return function() {
            body.addClass("nav_visible");
            return _this._toggling = false;
          };
        })(this), 16);
      }
    };

    return NavMenu;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/fancy_header/header.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scribd.FancyHeader = (function() {
    FancyHeader.prototype.header_offset = 0;

    function FancyHeader(container, opts) {
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.setup_events = bind(this.setup_events, this);
      this.init = bind(this.init, this);
      Scribd.FancyHeader.instance = this;
      this.container = $(this.container);
      this.menu = new Scribd.UI.NavMenu($(document).find(".nav_shroud"));
      this.init();
      this.setup_events();
    }

    FancyHeader.prototype.init = function() {
      var body, login_btn, scrolled, subscribe_btn, try_show_button, update_header, win;
      win = $(window);
      body = $(document.body);
      scrolled = false;
      subscribe_btn = this.container.find(".header_subscribe_btn");
      login_btn = this.container.find(".header_login_btn");
      try_show_button = _.throttle(function() {
        if (scrolled) {
          subscribe_btn.fadeIn();
          return login_btn.fadeOut();
        } else {
          subscribe_btn.fadeOut();
          return login_btn.fadeIn();
        }
      }, 100);
      $(window).one("load", (function(_this) {
        return function() {
          return _this.container.lazyimages();
        };
      })(this));
      this.container.find(".logo_image").data("og_src", this.container.find(".logo_image").attr("src"));
      update_header = (function(_this) {
        return function(force, offset) {
          var $logo, scroll;
          if (force == null) {
            force = false;
          }
          if (offset == null) {
            offset = null;
          }
          if (offset) {
            _this.header_offset = offset;
          }
          scroll = win.scrollTop();
          $logo = _this.container.find(".logo_image");
          offset = Math.max(0, _this.header_offset - scroll);
          if (scroll > _this.header_offset) {
            if (!scrolled) {
              scrolled = true;
              body.addClass("scrolled");
              $logo.attr("src", $logo.data("alt_src"));
            }
          } else {
            if (scrolled) {
              scrolled = false;
              body.removeClass("scrolled");
              $logo.attr("src", $logo.data("og_src"));
            }
          }
          _this.container.css({
            top: offset + "px"
          });
          return try_show_button();
        };
      })(this);
      win.on("scroll", function() {
        return update_header();
      });
      update_header();
      return this.update_header_position = update_header;
    };

    FancyHeader.prototype.setup_events = function() {
      return $(document).dispatch("click", {
        menu_toggle_btn: (function(_this) {
          return function() {
            return _this.menu.toggle();
          };
        })(this),
        header_login_btn: function() {
          if ($(window).width() >= 800) {
            return Scribd.SignIn.open("global_login");
          } else {
            return "continue";
          }
        },
        header_subscribe_btn: (function(_this) {
          return function($btn) {
            if ($btn.is(".mobile_signup")) {
              return "continue";
            }
            return Scribd.SignIn.open($btn.data("signup_source") || "subscribe", $btn.attr("href"));
          };
        })(this)
      });
    };

    return FancyHeader;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/giftcards/index.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Giftcards = (function() {
    function Giftcards(container, opts) {
      var selected, selector;
      this.container = container;
      this.opts = opts;
      this.container = $(this.container);
      Scribd.UI.Giftcards.instance = this;
      this.giftcard = {
        value: 360
      };
      if (/show=faq/.test(document.URL)) {
        $(document).on('ScribdLightboxInitialized', function() {
          return Scribd.Lightbox.open('giftcards_faq_lightbox');
        });
      }
      if (selected = document.location.search.match(/\bselected=(\w+)/)) {
        selector = selected[1];
        this.container.addClass("buy_gift_selected");
        setTimeout((function(_this) {
          return function() {
            return _this.container.find(".price_interaction." + selector).click().end().find(".gift_options .continue_giftcard_process").click();
          };
        })(this), 200);
      }
      this.container.find(".header").parallax_background();
      this.container.dispatch("click", {
        terms_and_conditions: function() {},
        buy_gift: (function(_this) {
          return function($el) {
            return _this.container.addClass("buy_gift_selected");
          };
        })(this),
        faq_link: (function(_this) {
          return function(e) {
            return Scribd.Lightbox.open('giftcards_faq_lightbox');
          };
        })(this),
        purchase: (function(_this) {
          return function($el, e) {
            if (Scribd.is_mobile && !Scribd.logged_in) {
              return _this.mobile_purchase();
            }
            return Scribd.after_login("giftcards_landing", function() {
              if (!Scribd.validate(_this.container)) {
                return;
              }
              _this.read_message();
              return $.post("/gift", _this.giftcard, function(resp) {
                if (resp.url) {
                  return window.location = resp.url;
                }
              }).error(function(resp) {
                if (resp.responseText.indexOf("to_email") !== -1) {
                  _this.container.find(".recipient_email_address").attr("data-server_validation", "Invalid email format");
                  return Scribd.validate(_this.container);
                }
              });
            });
          };
        })(this)
      });
      this.intro_setup();
      this.price_setup();
      this.message_setup();
      this.delivery_method_setup();
      this.giftee_email_address_setup();
      this.delivery_time_setup();
    }

    Giftcards.prototype.intro_setup = function() {
      this.container.on("click", ".faq_link", (function(_this) {
        return function(e) {
          e.preventDefault();
          return Scribd.Lightbox.open('giftcards_faq_lightbox');
        };
      })(this));
      this.form = this.container.find(".form_container");
      this.form.on("click", (function(_this) {
        return function(e) {
          return _this.container.find("input").removeClass("field_err");
        };
      })(this));
      this.form.on("submit", (function(_this) {
        return function(e) {
          var redeem_code;
          e.preventDefault();
          redeem_code = _this.form.find("input:first").val();
          return $.get("/giftcards/" + redeem_code + "/verify", function(resp) {
            var text;
            if (resp.status === "bad") {
              text = "The redeem code is invalid or already redeemed.";
              if (resp.reason === "invalid_code") {
                text = "Invalid redeem code, please re-enter.";
              } else if (resp.reason === "redeemed") {
                text = "Gift card has already been used.";
              } else if (resp.reason === "order_cant_be_credited") {
                text = "Unfortunately we can't apply this gift card to your existing membership automatically. Please contact our <a href=\"http://support.scribd.com/requests/new\">support</a> team for further assistance.";
              }
              _this.container.find(".error").html(text);
              return _this.container.find("input").addClass("field_err");
            } else {
              return window.location = "/giftcards/" + redeem_code;
            }
          });
        };
      })(this));
      return this.form.on("click", ".redeem_button", (function(_this) {
        return function() {
          return _this.container.find("form").submit();
        };
      })(this));
    };

    Giftcards.prototype.price_setup = function() {
      var $price_el, scrolled_once;
      $price_el = this.container.find(".gift_options");
      scrolled_once = false;
      $price_el.find(".price_interaction").one("mouseenter", (function(_this) {
        return function(e) {
          var $el, data;
          $el = $(e.target).closest(".price_interaction");
          data = _.extend({}, $el.data(), {
            action: 'mouseenter'
          });
          return _this.container.track({
            action: "mouseenter",
            label: "price_interaction"
          });
        };
      })(this));
      return $price_el.dispatch("click", {
        price_interaction: (function(_this) {
          return function($el) {
            var index, months;
            index = $price_el.find(".boxed_option").removeClass("selected").index($el);
            $el.addClass("selected");
            _this.giftcard.value = $el.data("value");
            $($price_el.find(".price_pitch").hide().get(index)).show().removeClass("hidden");
            months = Number(_this.giftcard.value) / 30;
            return _this.container.find(".print_preview .duration .number").text(months);
          };
        })(this),
        continue_giftcard_process: (function(_this) {
          return function($el) {
            _this.container.addClass("price_selected");
            if (!scrolled_once) {
              _this.scroll_to_edge();
              return scrolled_once = true;
            }
          };
        })(this)
      });
    };

    Giftcards.prototype.message_setup = function() {
      var $form;
      $form = this.container.find(".form_container");
      $form.find("textarea").input_character_countdown((function(_this) {
        return function(data) {
          return $form.find(".max_character_count").text(data.current_character_count + "/" + data.max_character_count);
        };
      })(this));
      $form.on("input", "input, textarea", (function(_this) {
        return function(el) {
          return _this.read_message();
        };
      })(this));
      return $form.on("scribd:input:changed", (function(_this) {
        return function(e) {
          return _this.read_message();
        };
      })(this));
    };

    Giftcards.prototype.read_message = function() {
      var $form;
      $form = this.container.find(".form_container");
      this.giftcard.to = $form.find(".giftee_name").val();
      this.giftcard.from = $form.find(".gifter_name").val();
      if (this.giftcard.to) {
        this.container.find(".recipient_name").text(this.giftcard.to);
      }
      if ($form.find("input[name='giftcard_empty_message']").is(":checked")) {
        $form.find(".custom_message").removeAttr("data-validate").prop("disabled", true).addClass("disabled");
        this.giftcard.message = "";
      } else {
        $form.find(".custom_message").attr("data-validate", "existence").prop("disabled", false).removeClass("disabled");
        this.giftcard.message = $form.find(".custom_message").val();
      }
      return this.container.find(".print_preview .custom_message").text(this.giftcard.message);
    };

    Giftcards.prototype.delivery_method_setup = function() {
      var $delivery, scrolled_once;
      $delivery = this.container.find(".delivery_method");
      scrolled_once = false;
      return $delivery.dispatch("click", {
        print: (function(_this) {
          return function($el) {
            if (!Scribd.validate(_this.container.find(".form_container"))) {
              return;
            }
            $delivery.find(".boxed_option").removeClass("selected");
            $el.addClass("selected");
            _this.giftcard.delivery_method = $el.data("method");
            _this.container.find(".recipient_email_address").attr("data-validate", "");
            _this.container.find(".purchase").prop("disabled", false);
            _this.container.removeClass("email_selected").addClass("print_selected");
            _this.container.find(".form_container .giftee_name,.gifter_name").prop("disabled", true);
            if (!scrolled_once) {
              _this.scroll_to_edge();
              return scrolled_once = true;
            }
          };
        })(this),
        email: (function(_this) {
          return function($el) {
            if (!Scribd.validate(_this.container.find(".form_container"))) {
              return;
            }
            _this.container.find(".form_container .giftee_name,.gifter_name").prop("disabled", false);
            $delivery.find(".boxed_option").removeClass("selected");
            $el.addClass("selected");
            _this.giftcard.delivery_method = $el.data("method");
            _this.container.find(".recipient_email_address").attr("data-validate", "email");
            _this.container.find(".purchase").prop("disabled", false);
            _this.container.removeClass("print_selected").addClass("email_selected");
            if (!scrolled_once) {
              _this.scroll_to_edge();
              return scrolled_once = true;
            }
          };
        })(this)
      });
    };

    Giftcards.prototype.giftee_email_address_setup = function() {
      var $email_address_setup;
      $email_address_setup = this.container.find(".giftee_email_address");
      $email_address_setup.dispatch("click", {
        now: (function(_this) {
          return function($el) {
            $email_address_setup.find(".time_input").removeClass("selected");
            $el.addClass("selected");
            delete _this.giftcard.delivery_time;
            _this.container.find(".datepicker").attr("data-validate", "");
            return _this.container.removeClass("later_selected");
          };
        })(this),
        later: (function(_this) {
          return function($el) {
            $email_address_setup.find(".time_input").removeClass("selected");
            $el.addClass("selected");
            _this.giftcard.delivery_time = _this.container.find(".datepicker").val();
            _this.container.addClass("later_selected");
            _this.container.find(".datepicker").attr("data-validate", "future_date");
            return _this.scroll_to_edge();
          };
        })(this)
      });
      return $email_address_setup.on("input", "input", (function(_this) {
        return function(e) {
          return _this.giftcard.recipient_email = $(e.target).val();
        };
      })(this));
    };

    Giftcards.prototype.delivery_time_setup = function() {
      var $datepicker, $delivery_time;
      $delivery_time = this.container.find(".delivery_time");
      $datepicker = this.container.find(".datepicker");
      $datepicker.datepicker({
        minDate: "+1D",
        maxDate: "+12M",
        onSelect: (function(_this) {
          return function(date) {
            _this.giftcard.delivery_time = date;
            return _this.giftcard.user_timezone = -(new Date().getTimezoneOffset() / 60);
          };
        })(this)
      });
      return $delivery_time.dispatch("click", {
        preset_link: (function(_this) {
          return function($el) {
            $datepicker.datepicker("setDate", $el.data("date"));
            return _this.giftcard.delivery_time = $el.data("date");
          };
        })(this)
      });
    };

    Giftcards.prototype.scroll_to_edge = function() {
      var $page_column, page_column_height, window_height;
      $page_column = this.container.find(".page_column.create_flow");
      page_column_height = $page_column.offset().top + $page_column.height();
      window_height = $(window).height();
      return $('html, body').animate({
        scrollTop: page_column_height - window_height
      }, 1000);
    };

    Giftcards.prototype.mobile_purchase = function() {
      var params;
      if (!Scribd.validate(this.container)) {
        return;
      }
      this.read_message();
      params = {
        giftcard: this.giftcard,
        from: "giftcards"
      };
      return window.location = [this.opts.mobile_login_path, $.param(params)].join("?");
    };

    return Giftcards;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/giftcards/redeem.coffee (last modified: 2016-07-08 22:43:32 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.GiftcardsRedeem = (function() {
    function GiftcardsRedeem(container, opts) {
      var ref;
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.container = $(this.container);
      this.form = this.container.find(".redeem_form");
      this.original_url = this.form.attr("action");
      this.giftcards_redeem_path = this.opts.giftcards_redeem_path;
      this.mobile_login_url = this.opts.mobile_login_url;
      this.container.on("click", ".faq_link", (function(_this) {
        return function(e) {
          return Scribd.Lightbox.open('giftcards_faq_lightbox');
        };
      })(this));
      this.container.on("ajax:before", (function(_this) {
        return function(e) {
          var new_url;
          new_url = _this.original_url.replace("PLACEHOLDER", _this.get_code_input_value());
          return _this.form.attr("action", new_url);
        };
      })(this));
      this.container.on("click", ".submit_btn", (function(_this) {
        return function(e) {
          var code, next_url;
          e.preventDefault();
          code = _this.get_code_input_value();
          if (code) {
            next_url = _this.giftcards_redeem_path + "?code=" + code;
            if (Scribd.is_mobile && !Scribd.logged_in) {
              return location.href = _this.mobile_login_url + "?next_url=" + next_url;
            } else {
              return Scribd.with_login("giftcards", next_url, function() {
                return _this.form.submit();
              });
            }
          } else {
            (new Scribd.Flasher).show('error', "Please enter your code");
            return e.stopPropagation();
          }
        };
      })(this));
      this.container.on("ajax:success", (function(_this) {
        return function(e, res) {
          if (res.redirect_url) {
            return window.location = res.redirect_url;
          }
        };
      })(this));
      this.container.on("ajax:error", (function(_this) {
        return function(e, res) {
          var ref;
          if ((ref = res.responseJSON) != null ? ref.reason : void 0) {
            return (new Scribd.Flasher).show('error', res.responseJSON.reason);
          }
        };
      })(this));
      if (((ref = this.get_code_input_value()) != null ? ref.length : void 0) > 0) {
        this.container.find('.submit_btn').click();
      }
    }

    GiftcardsRedeem.prototype.get_code_input_value = function() {
      return this.form.find(".code_input").val();
    };

    return GiftcardsRedeem;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/giftcards/show.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI.Giftcards.Show = (function() {
    function Show(container) {
      this.container = $(container);
    }

    return Show;

  })();

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

