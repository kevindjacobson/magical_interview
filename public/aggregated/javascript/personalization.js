/************************************************************************
 * 'personalization.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 16:31:02 +0000
 * Generated at: 2016-07-18 19:36:33 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-07-14 16:31:02 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/react/authors.coffee (last modified: 2016-03-03 23:50:10 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, h2, ref, types;

  ref = React.DOM, div = ref.div, a = ref.a, h2 = ref.h2;

  component = Scribd.R.component_builder("Shared.React.Authors", {
    "css_class": "autogen_class_views_shared_react_authors"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      authors: types.array.isRequired,
      list_view_mode: types.bool
    },
    render: function() {
      var author;
      return div({
        className: "authors " + (this.props.list_view_mode ? 'list_view' : ''),
        children: [
          (function() {
            var i, len, ref1, results;
            ref1 = this.props.authors || [];
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              author = ref1[i];
              results.push(div({
                className: "author author_cell object_cell",
                "data-id": author.id,
                children: [
                  a({
                    href: author.profile_url,
                    children: [Scribd.R.Shared.React.Persona(author.persona_props)]
                  }), a({
                    className: "author_data",
                    href: author.profile_url,
                    children: [
                      h2({
                        className: "author_title"
                      }, author.name), author.contribution_type ? div({
                        className: "sub author_contribution_type"
                      }, author.contribution_type) : void 0, author.most_popular_title ? div({
                        className: "sub"
                      }, "" + author.most_popular_title) : void 0
                    ]
                  })
                ]
              }));
            }
            return results;
          }).call(this)
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/checkbox_input.coffee (last modified: 2016-05-03 20:22:21 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, input, label, ref, span, types;

  ref = React.DOM, label = ref.label, input = ref.input, span = ref.span;

  component = Scribd.R.component_builder("Shared.React.CheckboxInput", {
    "css_class": "autogen_class_views_shared_react_checkbox_input"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      selected: types.bool,
      disabled: types.bool,
      "class": types.string,
      value: types.string,
      unchecked_value: types.string,
      name: types.string,
      label_text: types.string.isRequired
    },
    widget_css_classes: function(cls) {
      return classNames(cls, "checkbox_component", this.props["class"], {
        disabled: this.props.disabled
      });
    },
    render: function() {
      var hide_input;
      hide_input = this.props.unchecked_value && !this.props.selected;
      return label({
        className: classNames("checkbox_label", {
          checked: this.props.selected
        }),
        children: [
          hide_input ? input({
            type: "hidden",
            name: this.props.name,
            value: this.props.unchecked_value
          }) : void 0, input({
            onChange: this.props.onChange || (function(_this) {
              return function() {
                return _this.trigger("checkbox_selected", _this.props);
              };
            })(this),
            type: "checkbox",
            value: this.props.value,
            name: !hide_input ? this.props.name : void 0,
            checked: this.props.selected,
            className: "checkbox_input"
          }), span({
            className: "input_text"
          }, this.props.label_text)
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/collections.coffee (last modified: 2016-03-03 23:50:01 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, div, types;

  div = React.DOM.div;

  component = Scribd.R.component_builder("Shared.React.Collections", {
    "css_class": "autogen_class_views_shared_react_collections"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      collections_html: types.string.isRequired,
      list_view_mode: types.bool
    },
    raw_cells: function() {
      return {
        __html: this.props.collections_html
      };
    },
    render: function() {
      var list_view_mode_class;
      list_view_mode_class = this.props.list_view_mode ? "list_view" : "";
      return div({
        className: "collection_container " + list_view_mode_class,
        dangerouslySetInnerHTML: this.raw_cells()
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/confirm_lightbox.coffee (last modified: 2016-07-13 23:20:23 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var button, component, div, p, ref, span;

  ref = React.DOM, div = ref.div, button = ref.button, p = ref.p, span = ref.span;

  component = Scribd.R.component_builder("Shared.React.ConfirmLightbox", {
    "css_class": "autogen_class_views_shared_react_confirm_lightbox"
  });

  component({
    dismiss_lightbox: function(e) {
      var target;
      return target = $(e.target);
    },
    can_close: function() {
      if (this.props.closable != null) {
        return this.props.closable;
      } else {
        return true;
      }
    },
    componentDidMount: function() {
      var lightbox;
      lightbox = new Scribd.Lightbox(this.container().find(".lightbox"), false);
      this.setState({
        lightbox: lightbox
      });
      return lightbox.set_position();
    },
    render: function() {
      return div({
        className: "lightbox_overlay",
        onClick: (function(_this) {
          return function(e) {
            if (!$(e.target).is(".lightbox_overlay")) {
              return false;
            }
            if (_this.can_close()) {
              return _this.trigger("confirm_lightbox:close");
            }
          };
        })(this),
        children: this.render_lightbox()
      });
    },
    render_lightbox_inside: function() {
      var buttons;
      buttons = this.props.buttons || [
        {
          title: "OK",
          action: "confirm"
        }
      ];
      buttons = buttons.map((function(_this) {
        return function(b) {
          return _this.common_button({
            className: b.action + "_btn " + (b.action === "confirm" ? 'outline_btn' : void 0),
            onClick: function(e) {
              var $el;
              $el = $(e.currentTarget);
              return _this.trigger("confirm_lightbox:" + ($el.data('action')), {
                button: $el,
                props: _this.props
              });
            },
            "data-track": b.title,
            "data-action": b.action
          }, b.title);
        };
      })(this));
      return [
        this.props.confirm_text ? p({
          className: "confirm_text"
        }, this.props.confirm_text) : void 0, div({
          className: "actions",
          children: buttons
        })
      ];
    },
    render_lightbox: function() {
      return div({
        "data-track_category": "confirm_lightbox",
        className: "lightbox autogen_class_views_shared_confirm_lightbox autogen_class_widgets_lightbox autogen_class_widgets_base " + (this.props.simple_style ? 'simple_style vertically_centered' : void 0)
      }, div({
        className: "wrapper",
        children: [
          this.can_close() ? div({
            className: "close_button",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("confirm_lightbox:close");
              };
            })(this)
          }, span({
            className: "icon-close"
          })) : void 0, this.props.title ? div({
            className: "title"
          }, this.props.title) : void 0, div({
            className: "content",
            children: this.render_lightbox_inside()
          })
        ]
      }));
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/documents.coffee (last modified: 2016-03-03 23:50:10 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, div, types;

  div = React.DOM.div;

  component = Scribd.R.component_builder("Shared.React.Documents", {
    "css_class": "autogen_class_views_shared_react_documents"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      document_cells_html: types.string.isRequired,
      list_view_mode: types.bool
    },
    render_star_ratings: function() {
      var i, len, rating_stars_react_component, ref, results, star_root;
      ref = this.container().find(".star_ratings_props");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        star_root = ref[i];
        rating_stars_react_component = Scribd.R.Shared.React.StarRatings($(star_root).data("props"));
        results.push(ReactDOM.render(rating_stars_react_component, star_root));
      }
      return results;
    },
    componentDidMount: function() {
      return this.render_star_ratings();
    },
    componentDidUpdate: function() {
      return this.render_star_ratings();
    },
    raw_cells: function() {
      return {
        __html: this.props.document_cells_html
      };
    },
    render: function() {
      var list_view_mode_class;
      list_view_mode_class = this.props.list_view_mode ? "list_view_mode" : "";
      return div({
        className: "cell_container",
        children: [
          div({
            className: "has_document_cells " + list_view_mode_class,
            dangerouslySetInnerHTML: this.raw_cells()
          })
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/end_of_reading_alert.coffee (last modified: 2016-02-05 22:21:55 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, img, ref, span;

  ref = React.DOM, a = ref.a, div = ref.div, img = ref.img, span = ref.span;

  component = Scribd.R.component_builder("Shared.React.EndOfReadingAlert", {
    "css_class": "autogen_class_views_books_end_of_reading_alert"
  });

  component({
    widget_css_classes: function(default_cls) {
      return _.compact([default_cls, "end_of_reading_alert", this.props.next_issue ? "series" : void 0, this.props.audiobook ? "audiobook" : void 0, this.props.comic ? "comic" : void 0]).join(" ");
    },
    enclosing_element_args: function(args) {
      return $.extend(args, {
        href: this.props.url,
        target: this.props.audiobook ? "_blank" : void 0
      });
    },
    enclosing_element_type: function() {
      return a;
    },
    componentDidMount: function() {
      return Scribd.eor_alert = new Scribd.EndOfReadingAlert(this.container(), $.extend({}, this.props));
    },
    render: function() {
      if (this.props.next_issue) {
        return this.render_for_series();
      } else {
        return this.render_for_single();
      }
    },
    render_for_series: function() {
      return div({
        className: "collapsible series",
        children: [
          img({
            src: this.props.next_issue.thumbnail_url
          }), div({
            className: "text_block",
            children: [
              div({
                className: "sub_text"
              }, "You've reached the end of this volume"), div({
                className: "title_line",
                children: [
                  span({
                    className: "next_label"
                  }, "Next up:"), span({
                    className: "series_title"
                  }, this.props.next_issue.title)
                ]
              })
            ]
          }), div({
            className: "icon-rightarrow arrow"
          })
        ]
      });
    },
    render_for_single: function() {
      return div({
        className: "collapsible",
        children: [
          div({
            className: "text_block",
            children: [
              div({}, "You've reached the end of this title"), div({
                className: "cta"
              }, "Click here to leave a rating and see related titles")
            ]
          }), div({
            className: "icon-rightarrow arrow"
          })
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/introduction.coffee (last modified: 2016-07-14 16:31:02 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var CSSTransitionGroup, a, button, component, div, h3, label, p, ref, types;

  ref = React.DOM, div = ref.div, button = ref.button, a = ref.a, label = ref.label, h3 = ref.h3, p = ref.p;

  component = Scribd.R.component_builder("Shared.React.Introduction", {
    "css_class": "autogen_class_views_shared_react_introduction"
  });

  types = React.PropTypes;

  CSSTransitionGroup = React.createFactory(React.addons.CSSTransitionGroup);

  component({
    propTypes: {
      steps: types.array.isRequired,
      name: types.string.isRequired,
      page: types.string.isRequired,
      track_category: types.string.isRequired,
      start: types.bool.isRequired,
      feature_intro: types.string
    },
    getInitialState: function() {
      return {
        start: this.props.start,
        current_step: this.props.current_step || 0
      };
    },
    componentDidMount: function() {
      if (this.state.start) {
        $(document.body).addClass('introduction_ongoing');
        Scribd.Lightbox.fade_in_overlay();
        this.container().track_rats(this.props.track_category + ":view", {
          page: this.props.page
        });
      }
      $(document).on("scribd:introduction:start:" + this.props.name, (function(_this) {
        return function(e, v) {
          _this.container().track_rats(_this.props.track_category + ":view", {
            page: _this.props.page
          });
          return _this.setState({
            current_step: (v != null ? v.step : void 0) || 0,
            start: true
          });
        };
      })(this));
      $(window).on("resize", _.debounce((function(_this) {
        return function() {
          return _this.forceUpdate();
        };
      })(this)));
      return this.dispatch({
        "continue": (function(_this) {
          return function(e) {
            _this.container().track_rats(_this.props.track_category + ":click", {
              page: _this.props.page,
              step: _this.state.current_step,
              item: "continue tour"
            });
            if (_this.state.current_step === 0) {
              _this.container().track_rats(_this.props.track_category + ":click", {
                page: _this.props.page,
                step: _this.state.current_step,
                item: "start tour"
              });
            }
            if ((_this.state.current_step + 1) === _this.stepCount()) {
              $(document).trigger("scribd:introduction:finish:" + _this.props.name);
              _this.container().track_rats(_this.props.track_category + ":click", {
                page: _this.props.page,
                step: _this.state.current_step,
                item: "finish tour"
              });
            }
            return _this.setState({
              current_step: _this.state.current_step + 1
            });
          };
        })(this),
        skip: (function(_this) {
          return function(e) {
            $(document).trigger("scribd:introduction:skip:" + _this.props.name);
            _this.container().track_rats(_this.props.track_category + ":click", {
              page: _this.props.page,
              step: _this.state.current_step,
              item: "defer tour"
            });
            return _this.setState({
              current_step: _this.stepCount()
            });
          };
        })(this),
        exit: (function(_this) {
          return function(e) {
            $(document).trigger("scribd:introduction:close:" + _this.props.name);
            _this.container().track_rats(_this.props.track_category + ":click", {
              page: _this.props.page,
              step: _this.state.current_step,
              item: "exit tour"
            });
            return _this.setState({
              current_step: _this.stepCount()
            });
          };
        })(this)
      });
    },
    componentDidUpdate: function() {
      if (this.finished()) {
        if (this.props.feature_intro) {
          $.post("/feature_intro", {
            feature: this.props.feature_intro
          });
        }
        $(document).trigger("scribd:introduction:end:" + this.props.name);
        $(document.body).removeClass('introduction_ongoing');
        $(".introduction_highlight_target").removeClass("introduction_highlight_target");
        $(".introduction_blocker_layer").remove();
        $(".introduction_fix_parent").removeClass("introduction_fix_parent");
        return Scribd.Lightbox.fade_out_overlay();
      } else if (this.state.start) {
        $(document.body).addClass('introduction_ongoing');
        return Scribd.Lightbox.fade_in_overlay();
      }
    },
    stepCount: function() {
      return this.props.steps.length;
    },
    finished: function() {
      return (this.state.current_step + 1) > this.stepCount();
    },
    current_step_object: function() {
      return _.extend({}, this.props.steps[this.state.current_step], {
        id: this.state.current_step,
        key: this.state.current_step
      });
    },
    render: function() {
      var step;
      if (!this.finished()) {
        step = this.Package.Step(this.current_step_object());
      }
      return CSSTransitionGroup({
        transitionName: "fade",
        transitionAppear: true,
        transitionAppearTimeout: 500,
        transitionEnterTimeout: 500,
        transitionLeave: true,
        transitionLeaveTimeout: 500,
        children: !this.finished() && this.state.start ? [
          div({
            key: "introduction",
            className: "introduction container " + this.props.name,
            children: [
              CSSTransitionGroup({
                transitionName: "fade",
                transitionEnter: true,
                transitionEnterTimeout: 500,
                transitionLeave: true,
                transitionLeaveTimeout: 500,
                children: [step]
              })
            ]
          })
        ] : void 0
      });
    }
  });

  component("Step", {
    propTypes: {
      title: types.string.isRequired,
      description: types.string.isRequired,
      buttons: types.array.isRequired,
      id: types.number.isRequired,
      closeable: types.bool,
      block_interaction: types.bool
    },
    highlight_target: function() {
      return $(this.props.highlight_target_selector);
    },
    modal_position: function() {
      var arrow, expected_width, max_left;
      arrow = this.arrow_position();
      expected_width = 356;
      max_left = $(window).width() - expected_width - 20;
      return {
        top: arrow.top + 12,
        margin: this.highlight_target().length ? 0 : "0 auto",
        left: Math.min(Math.max(arrow.left - 30, 20), max_left)
      };
    },
    arrow_position: function() {
      var height, left, offset, width;
      if (this.highlight_target().length) {
        offset = this.highlight_target().offset();
        height = this.highlight_target().height();
        width = this.highlight_target().width();
        left = Math.min(offset.left - 16 + (width / 2), $(window).width() - 20);
        return {
          top: offset.top + height + 20,
          left: left,
          right: 'auto'
        };
      } else {
        return {
          top: 80,
          left: 0,
          margin: '0 auto'
        };
      }
    },
    prepare_highlight: function() {
      var $el, parent;
      $(".introduction_highlight_target").removeClass("introduction_highlight_target");
      $(".introduction_fix_parent").removeClass("introduction_fix_parent");
      $(".introduction_blocker_layer").remove();
      this.highlight_target().addClass("introduction_highlight_target_enter");
      if (this.props.block_interaction) {
        $el = $("<div class='introduction_blocker_layer'></div>");
        $el.css({
          position: "absolute",
          top: -12,
          left: -20,
          right: -12,
          bottom: -12,
          'z-index': 1000,
          cursor: "default"
        });
        $el.on("click mouseenter mouseleave hover", (function(_this) {
          return function(e) {
            e.preventDefault();
            return e.stopPropagation();
          };
        })(this));
        this.highlight_target().append($el);
      }
      parent = this.highlight_target().parent();
      while (parent.length) {
        if (parent.is("body")) {
          break;
        }
        if (parent.css("z-index") !== "auto") {
          parent.addClass("introduction_fix_parent");
        }
        parent = parent.parent();
      }
      return _.delay((function(_this) {
        return function() {
          _this.highlight_target().addClass("introduction_highlight_target");
          return _this.highlight_target().removeClass("introduction_highlight_target_enter");
        };
      })(this));
    },
    componentDidMount: function() {
      return _.delay((function(_this) {
        return function() {
          var current_left, modal, modal_w, new_left, window_w;
          _this.prepare_highlight();
          if (_this.highlight_target().length) {
            modal = _this.container().find(".modal");
            modal_w = modal.outerWidth();
            current_left = modal.offset().left;
            window_w = $(window).width();
            new_left = Math.min($(window).width() - modal_w - 20, current_left);
            return modal.css({
              left: new_left
            });
          }
        };
      })(this), 10);
    },
    render: function() {
      var buttons;
      buttons = (function() {
        var i, len, ref1, results;
        ref1 = this.props.buttons;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          button = ref1[i];
          results.push((function(_this) {
            return function(button) {
              var opts;
              switch (button.type) {
                case "link":
                  opts = _.extend({}, button, {
                    className: button.className + " modal_link",
                    href: "javascript:void(0)",
                    onClick: function() {
                      return _this.trigger(button.action);
                    }
                  });
                  return div({
                    children: [a(opts, button.label)]
                  });
                default:
                  opts = _.extend({}, button, {
                    className: "flat_btn modal_button",
                    onClick: function() {
                      return _this.trigger(button.action);
                    }
                  });
                  return div(opts, button.label);
              }
            };
          })(this)(button));
        }
        return results;
      }).call(this);
      return div({
        className: "intro_marker",
        children: [
          div({
            className: "triangle_arrow " + (this.highlight_target().length ? 'has_target' : ''),
            style: this.arrow_position()
          }), div({
            className: "modal step_" + this.props.id,
            style: this.modal_position(),
            children: [
              this.props.closeable ? div({
                className: "icon-close close_intro",
                onClick: (function(_this) {
                  return function() {
                    return _this.trigger("exit");
                  };
                })(this)
              }) : void 0, h3({
                className: "title"
              }, this.props.title), p({
                className: "description"
              }, this.props.description), buttons
            ]
          })
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/paginator.coffee (last modified: 2016-03-03 23:50:10 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var a, component, div, ref, types;

  ref = React.DOM, div = ref.div, a = ref.a;

  component = Scribd.R.component_builder("Shared.React.Paginator", {
    "css_class": "autogen_class_views_shared_react_paginator"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      current_page: types.number.isRequired,
      page_count: types.number.isRequired
    },
    route: function(page_number) {
      var href;
      href = window.location.href;
      return Scribd.add_url_parameter(href, "page", page_number);
    },
    range: function() {
      var i, j, max, min, ref1, results, results1;
      if (this.props.current_page <= 5) {
        return (function() {
          results = [];
          for (var i = 1, ref1 = Math.max(1, Math.min(this.props.page_count, 10)); 1 <= ref1 ? i <= ref1 : i >= ref1; 1 <= ref1 ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this);
      } else {
        min = Math.max(this.props.current_page - 5, 1);
        max = Math.min(this.props.current_page + 5, this.props.page_count);
        return (function() {
          results1 = [];
          for (var j = min; min <= max ? j <= max : j >= max; min <= max ? j++ : j--){ results1.push(j); }
          return results1;
        }).apply(this);
      }
    },
    render: function() {
      var hide_class, page, selected_class;
      selected_class = (function(_this) {
        return function(page) {
          if (_this.props.current_page === page) {
            return "selected";
          } else {
            return "";
          }
        };
      })(this);
      hide_class = this.props.page_count <= 1 ? "hidden" : "";
      return div({
        className: "paginator " + hide_class,
        children: [
          this.props.current_page > 1 ? a({
            className: "previous",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("jump_to_page", _this.props.current_page - 1);
              };
            })(this)
          }) : void 0, (function() {
            var i, len, ref1, results;
            ref1 = this.range();
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              page = ref1[i];
              results.push((function(_this) {
                return function(page) {
                  return a({
                    href: _this.route(page),
                    "data-value": page,
                    key: page,
                    onClick: function(e) {
                      e.preventDefault();
                      if (_this.props.current_page !== page) {
                        return _this.trigger("jump_to_page", page);
                      }
                    },
                    className: "page " + (selected_class(page))
                  }, page);
                };
              })(this)(page));
            }
            return results;
          }).call(this), this.props.current_page < this.props.page_count ? a({
            className: "next",
            onClick: (function(_this) {
              return function() {
                return _this.trigger("jump_to_page", _this.props.current_page + 1);
              };
            })(this)
          }) : void 0
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/persona.coffee (last modified: 2016-03-03 23:50:01 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, div, types;

  div = React.DOM.div;

  component = Scribd.R.component_builder("Shared.React.Persona", {
    "css_class": "autogen_class_views_shared_react_persona"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      size: types.string.isRequired,
      image_url: types.string,
      initials: types.string,
      author: types.bool.isRequired,
      persona_color: types.string.isRequired
    },
    route: function(page_number) {
      var href;
      href = window.location.href;
      return Scribd.add_url_parameter(href, "page", page_number);
    },
    range: function() {
      var i, j, max, min, ref, results, results1;
      if (this.props.current_page <= 5) {
        return (function() {
          results = [];
          for (var i = 1, ref = Math.min(this.props.page_count, 10); 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this);
      } else {
        min = Math.max(this.props.current_page - 5, 1);
        max = Math.min(this.props.current_page + 5, this.props.page_count);
        return (function() {
          results1 = [];
          for (var j = min; min <= max ? j <= max : j >= max; min <= max ? j++ : j--){ results1.push(j); }
          return results1;
        }).apply(this);
      }
    },
    render: function() {
      var css, user_class;
      user_class = !this.props.author && !this.props.image_url ? "icon-user" : "";
      css = {};
      if (this.props.image_url) {
        css["backgroundImage"] = "url('" + this.props.image_url + "')";
      } else if (this.props.author) {
        css["backgroundColor"] = this.props.persona_color;
      } else {
        css["color"] = this.props.persona_color;
      }
      return div({
        className: "autogen_class_views_shared_persona_icon persona_icon " + user_class + " " + this.props.size,
        style: css,
        children: [!this.props.image_url && this.props.author ? this.props.initials : void 0]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/radio_input.coffee (last modified: 2016-05-03 20:22:21 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, input, label, ref, span, types;

  ref = React.DOM, label = ref.label, input = ref.input, span = ref.span;

  component = Scribd.R.component_builder("Shared.React.RadioInput", {
    "css_class": "autogen_class_views_shared_react_radio_input"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      selected: types.bool,
      "class": types.string,
      value: types.string,
      name: types.string,
      label_text: types.string.isRequired
    },
    widget_css_classes: function(cls) {
      return classNames(cls, "radio_component", this.props["class"]);
    },
    render: function() {
      return label({
        className: classNames("radio_label", {
          checked: this.props.selected
        }),
        children: [
          input({
            onChange: this.props.onChange || (function(_this) {
              return function() {
                return _this.trigger("radio_selected", _this.props);
              };
            })(this),
            type: "radio",
            value: this.props.value,
            name: this.props.name,
            checked: this.props.selected,
            className: "radio_input"
          }), span({
            className: "input_text"
          }, this.props.label_text)
        ]
      });
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/react/select_input.coffee (last modified: 2016-05-03 20:22:21 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var component, div, option, ref, select, span, types;

  ref = React.DOM, div = ref.div, span = ref.span, select = ref.select, option = ref.option;

  component = Scribd.R.component_builder("Shared.React.SelectInput", {
    "css_class": "autogen_class_views_shared_react_select_input"
  });

  types = React.PropTypes;

  component({
    propTypes: {
      "class": types.string,
      name: types.string,
      options: types.array.isRequired
    },
    getInitialState: function() {
      return {};
    },
    widget_css_classes: function(cls) {
      return classNames(cls, "select_component", this.props["class"], {
        focused: this.state.has_focus
      });
    },
    current_name: function() {
      var i, len, name, ref1, ref2, value;
      ref1 = this.props.options;
      for (i = 0, len = ref1.length; i < len; i++) {
        ref2 = ref1[i], name = ref2.name, value = ref2.value;
        if (("" + value) === ("" + this.props.value)) {
          return name;
        }
      }
      return this.props.options[0].name;
    },
    render: function() {
      return [
        div({
          className: "select_current_value"
        }, this.current_name()), span({
          className: "icon icon-down_arrow"
        }), select({
          name: this.props.name,
          value: this.props.value,
          onFocus: (function(_this) {
            return function() {
              return _this.setState({
                has_focus: true
              });
            };
          })(this),
          onBlur: (function(_this) {
            return function() {
              return _this.setState({
                has_focus: false
              });
            };
          })(this),
          onChange: this.props.onChange || (function(_this) {
            return function() {
              return _this.trigger("select_change", _this.props);
            };
          })(this),
          children: this.props.options.map((function(_this) {
            return function(arg) {
              var name, value;
              name = arg.name, value = arg.value;
              return option({
                value: value || name
              }, name);
            };
          })(this))
        })
      ];
    }
  });

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/personalization/landing.coffee (last modified: 2016-07-13 23:20:23 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Personalization || (Scribd.Personalization = {});

  Scribd.Personalization.Landing = (function() {
    function Landing(container, with_document) {
      this.container = container;
      this.with_document = with_document != null ? with_document : false;
      this.container = $(this.container);
      this.setup_events();
      this.setup_parallax();
      this.setup_document_container();
      this.container.track_rats("personalization:view", {
        page: "landing",
        loc: "landing",
        with_document: this.with_document
      });
    }

    Landing.prototype.setup_events = function() {
      this.container.find(".continue_reading, .no_thanks_link").one("click", (function(_this) {
        return function(e) {
          return $(e.target).track_rats("personalization:skip_to_homepage:click", {
            page: "landing",
            with_document: _this.with_document
          });
        };
      })(this));
      this.container.find(".download_document").one("click", (function(_this) {
        return function(e) {
          var $el;
          $el = $(e.currentTarget);
          return $el.track_rats("personalization:download_document:click", {
            page: "landing",
            with_document: _this.with_document,
            id: $el.data("doc_id")
          });
        };
      })(this));
      this.container.find(".start_personalization").one("click", (function(_this) {
        return function(e) {
          var $cat, cat, i, len, ref, selected_cats;
          selected_cats = [];
          ref = _this.container.find(".category.selected");
          for (i = 0, len = ref.length; i < len; i++) {
            cat = ref[i];
            $cat = $(cat);
            selected_cats.push($cat.data("name"));
          }
          return $(e.currentTarget).track_rats("personalization:lets_continue:click", {
            page: "landing",
            with_document: _this.with_document,
            item_id: selected_cats
          });
        };
      })(this));
      this.container.dispatch("click", {
        go_to_content_types: (function(_this) {
          return function(btn) {
            var offset;
            _this.container.find(".personalization_begin").show();
            $(btn).track_rats("personalization:continue_to_content_types:click", {
              page: "landing",
              with_document: _this.with_document
            });
            offset = _this.container.find(".personalization_begin").offset().top + 20;
            return _.defer(function() {
              return $("html, body").animate({
                scrollTop: offset
              });
            });
          };
        })(this),
        category: (function(_this) {
          return function($btn) {
            $btn.toggleClass("selected");
            $btn.find("input").val($btn.is(".selected"));
            return _this.update_select_status();
          };
        })(this)
      });
      return $(window).on("resize", (function(_this) {
        return function() {
          _this.setup_parallax();
          return _this.setup_document_container();
        };
      })(this));
    };

    Landing.prototype.setup_document_container = function() {
      var dc_h;
      dc_h = $(window).height() - this.container.find(".content").outerHeight() - 72;
      return this.container.find(".document_container").height(dc_h);
    };

    Landing.prototype.setup_parallax = function() {
      return this.container.find(".backgrounds_container").parallax_background($(window).height(), $(window).height() * 92 / 100 - 546, true);
    };

    Landing.prototype.update_select_status = function() {
      var cats;
      cats = this.container.find(".category.selected");
      if (cats.length) {
        return this.container.find(".start_personalization").prop("disabled", false);
      } else {
        return this.container.find(".start_personalization").prop("disabled", true);
      }
    };

    return Landing;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/personalization/selection.coffee (last modified: 2016-07-13 23:20:23 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var CSSTransitionGroup, a, component, div, form, h1, h2, p, ref, span, types,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = React.DOM, a = ref.a, div = ref.div, h1 = ref.h1, p = ref.p, h2 = ref.h2, form = ref.form, span = ref.span;

  component = Scribd.R.component_builder("Personalization.Selection", {
    "css_class": "autogen_class_views_personalization_selection",
    "track_category": "audiobooks"
  });

  types = React.PropTypes;

  CSSTransitionGroup = React.createFactory(React.addons.CSSTransitionGroup);

  Scribd.prefix_transform = function(prop) {
    return {
      transform: prop,
      'WebkitTransform': prop
    };
  };

  Scribd.TileSet = (function(superClass) {
    extend(TileSet, superClass);

    function TileSet(elements) {
      this.elements = elements != null ? elements : [];
      TileSet.__super__.constructor.apply(this, arguments);
      this.eq_fn = function(a, b) {
        var i, j, ref1;
        if (a.length !== b.length) {
          return;
        }
        for (i = j = 0, ref1 = a.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
          if (a[i].id !== b[i].id) {
            return false;
          }
        }
        return true;
      };
    }

    return TileSet;

  })(Scribd.Set);

  component({
    propTypes: {
      total_steps: types.number.isRequired,
      admin_user: types.bool.isRequired,
      content_types: types.array.isRequired,
      book_audiobook_initial_features: types.array.isRequired,
      comic_initial_features: types.array.isRequired
    },
    getInitialState: function() {
      return {
        current_step: 0,
        has_selections: [0, 0, 0, 0],
        ajax_requests: [],
        global_selection: new Scribd.TileSet,
        visited_steps: []
      };
    },
    step: function(delta) {
      var min_step, step;
      min_step = Math.max(this.state.current_step + Number(delta), 0);
      step = Math.min(min_step, this.props.total_steps - 1);
      $(window).scrollTop(0);
      return this.setState({
        current_step: step
      });
    },
    componentDidUpdate: function() {
      var new_visited_steps;
      if (!this.state.visited_steps[this.state.current_step]) {
        this.container().track_rats("personalization:view", {
          page: this.page_name(),
          loc: this.loc_name()
        });
        new_visited_steps = _.clone(this.state.visited_steps);
        new_visited_steps[this.state.current_step] = true;
        return this.setState({
          visited_steps: new_visited_steps
        });
      }
    },
    go_home: function() {
      if (this.state.global_selection.count() === 0) {
        return window.location = "/";
      } else {
        return window.location = "/?personalization=1";
      }
    },
    page_name: function() {
      var book_title, has_books_and_audiobooks;
      has_books_and_audiobooks = (indexOf.call(this.props.content_types, "book") >= 0) && (indexOf.call(this.props.content_types, "audiobook") >= 0);
      book_title = has_books_and_audiobooks ? "book&audiobook" : this.props.content_types[0];
      if (this.props.total_steps === 4) {
        if (this.state.current_step < 2) {
          return book_title;
        } else {
          return "comic";
        }
      } else {
        if (has_books_and_audiobooks) {
          return book_title;
        } else {
          return this.props.content_types[0];
        }
      }
    },
    loc_name: function() {
      if (this.state.current_step % 2 === 0) {
        return "category";
      } else {
        return "content";
      }
    },
    componentDidMount: function() {
      $(window).on("resize", (function(_this) {
        return function() {
          _this.setState({
            no_animate: true
          });
          _.delay(function() {
            return _this.setState({
              no_animate: false
            });
          }, 200);
          return _this.forceUpdate();
        };
      })(this));
      return this.dispatch({
        "forward": (function(_this) {
          return function() {
            var ids, positions;
            ids = _.map(_.flatten(_this.state.global_selection.elements), function(cat) {
              return cat.id;
            });
            positions = _.map(_.flatten(_this.state.global_selection.elements), function(cat) {
              return cat.position;
            });
            _this.container().track_rats("personalization:next:click", {
              page: _this.page_name(),
              loc: _this.loc_name(),
              step: _this.state.current_step,
              item_id: ids,
              item_pos: positions
            });
            if ((_this.state.current_step + 1) === _this.props.total_steps) {
              return $.ajax({
                type: "POST",
                url: "/personalization/finish",
                async: false,
                data: {
                  ids: ids,
                  types: _.compact(_this.props.content_types)
                },
                success: function() {
                  return _this.go_home();
                }
              });
            } else {
              return _this.step(1);
            }
          };
        })(this),
        "back": (function(_this) {
          return function() {
            var loc;
            loc = _this.props.current_step < 2 ? _this.props.content_types[0] : _this.props.content_types[1];
            _this.container().track_rats("personalization:back:click", {
              page: _this.page_name(),
              loc: _this.loc_name(),
              step: _this.state.current_step
            });
            if (_this.state.current_step === 2 && _this.state.has_selections[0] === 0) {
              return _this.step(-2);
            } else if (_this.state.current_step === 0) {
              return window.history.back();
            } else {
              return _this.step(-1);
            }
          };
        })(this),
        "step_selection": (function(_this) {
          return function(e, v) {
            var new_selections;
            new_selections = _this.state.has_selections.slice();
            new_selections[_this.state.current_step] = v;
            return _this.setState({
              has_selections: new_selections
            });
          };
        })(this),
        "confirm_skip": (function(_this) {
          return function(e, v) {
            return _this.setState({
              confirm_lightbox_opts: {
                title: v.title,
                confirm_text: v.confirm_text,
                id: "confirm_skip",
                simple_style: true,
                buttons: [
                  {
                    title: "No, Go Back",
                    action: "close"
                  }, {
                    title: "Yes, I'm sure",
                    action: "confirm"
                  }
                ],
                destination: v.destination
              }
            });
          };
        })(this),
        "confirm_lightbox:confirm": (function(_this) {
          return function(e, v) {
            if (v.props.id === "confirm_skip") {
              _this.container().track_rats("personalization:skip_lightbox:click", {
                page: _this.page_name(),
                loc: _this.loc_name(),
                button_selection: 1,
                step: _this.state.current_step
              });
              _this.setState({
                confirm_lightbox_opts: false
              });
              if (v.props.destination === "comics") {
                return _this.step(2 - _this.state.current_step);
              } else {
                return _this.go_home();
              }
            }
          };
        })(this),
        "confirm_lightbox:close": (function(_this) {
          return function(e, v) {
            _this.container().track_rats("personalization:skip_lightbox:click", {
              page: _this.page_name(),
              loc: _this.page_name(),
              button_selection: 0
            });
            return _this.setState({
              confirm_lightbox_opts: false
            });
          };
        })(this),
        "tile_click": (function(_this) {
          return function(e, v, position) {
            var j, len, obj;
            for (j = 0, len = v.length; j < len; j++) {
              obj = v[j];
              obj.position = position;
            }
            return _this.setState({
              global_selection: _this.state.global_selection.toggle(v)
            });
          };
        })(this),
        "recommendation_request_begin": (function(_this) {
          return function(e, xhr) {
            xhr.done(function() {
              return _this.forceUpdate();
            });
            return _this.setState({
              ajax_requests: _.union(_this.state.ajax_requests, [xhr])
            });
          };
        })(this)
      });
    },
    render: function() {
      var book_audiobooks_title, both_content_types, both_content_types_class, has_audiobooks, has_books, has_comics, incomplete_ajax, lb, step_css;
      if (this.state.confirm_lightbox_opts) {
        lb = Scribd.R.Shared.React.ConfirmLightbox(this.state.confirm_lightbox_opts);
      }
      step_css = this.state.current_step >= 2 && this.props.total_steps > 2 ? $(window).width() < 1024 ? Scribd.prefix_transform("translateX(-2048px)") : Scribd.prefix_transform("translateX(-200vw)") : Scribd.prefix_transform("translateX(0vw)");
      has_books = (indexOf.call(this.props.content_types, "book") >= 0);
      has_audiobooks = (indexOf.call(this.props.content_types, "audiobook") >= 0);
      has_comics = (indexOf.call(this.props.content_types, "comic") >= 0);
      both_content_types = (has_books || has_audiobooks) && has_comics;
      both_content_types_class = both_content_types ? "both_content_types" : "";
      book_audiobooks_title = has_books && has_audiobooks ? "Books & Audiobooks" : has_books ? "Books" : has_audiobooks ? "Audiobooks" : void 0;
      incomplete_ajax = _.some(this.state.ajax_requests, function(xhr) {
        return xhr.readyState !== 4 && xhr.readyState !== 0;
      });
      return div({
        className: "" + (this.state.no_animate ? 'no_animate' : ''),
        children: [
          lb, this.Package.NavHeader({
            page_name: this.page_name(),
            disable_navigation: false,
            admin_user: this.props.admin_user,
            current_step: this.state.current_step,
            has_selection: this.state.has_selections[this.state.current_step],
            content_types: this.props.content_types,
            total_steps: this.props.total_steps
          }), this.Package.ProgressBar({
            current_step: this.state.current_step,
            content_types: this.props.content_types,
            book_audiobooks_title: book_audiobooks_title
          }), div({
            className: "step_container " + both_content_types_class,
            style: step_css,
            children: [
              has_audiobooks || has_books ? this.Package.ContentSelection({
                page_name: this.page_name(),
                initial_features: this.props.book_audiobook_initial_features,
                category_selection: this.state.current_step === 0,
                name: "books_audiobooks",
                content_type: "book",
                title: book_audiobooks_title
              }) : void 0, has_comics ? this.Package.ContentSelection({
                page_name: this.page_name(),
                initial_features: this.props.comic_initial_features,
                category_selection: both_content_types ? this.state.current_step === 2 : this.state.current_step === 0,
                name: "comics",
                content_type: "comic",
                title: "Comics"
              }) : void 0
            ]
          })
        ]
      });
    }
  });

  component("ContentSelection", {
    getInitialState: function() {
      return {
        selected_categories: new Scribd.TileSet,
        already_shown_features: new Scribd.TileSet
      };
    },
    componentDidMount: function() {
      return this.dispatch({
        "category_selection": (function(_this) {
          return function(e, v) {
            _this.setState({
              selected_categories: _this.state.selected_categories.toggle(v)
            });
            return _this.trigger("step_selection", _this.state.selected_categories.count());
          };
        })(this),
        "loaded_tileset_updated": (function(_this) {
          return function(e, v) {
            return _this.forceUpdate();
          };
        })(this)
      });
    },
    render: function() {
      var step_css;
      step_css = !this.props.category_selection ? $(window).width() < 1024 ? Scribd.prefix_transform("translateX(-1024px)") : Scribd.prefix_transform("translateX(-100vw)") : void 0;
      return div({
        className: "content_selection_container",
        children: [
          h1({
            className: "title",
            children: [this.props.title]
          }), div({
            className: "content_shifter " + (this.props.category_selection ? 'category_selection' : void 0),
            style: step_css,
            children: [
              this.Package.TopCategoryTileSet({
                name: this.props.name,
                selected_features: this.state.selected_categories,
                tileset: this.props.initial_features,
                on_screen: this.props.category_selection
              }), this.Package.RecommendationTileSets({
                page_name: this.props.page_name,
                name: this.props.name + "_features",
                on_screen: !this.props.category_selection,
                initial_categories: this.props.initial_features,
                categories: this.state.selected_categories.elements,
                content_type: this.props.content_type
              })
            ]
          })
        ]
      });
    }
  });

  component("RecommendationTileSets", {
    getInitialState: function() {
      return {
        selected_tiles_count: 0
      };
    },
    componentDidMount: function() {
      return this.dispatch({
        "tile_select_count": (function(_this) {
          return function(e, v) {
            _this.setState({
              selected_tiles_count: _this.state.selected_tiles_count + v
            });
            return _this.trigger("step_selection", _this.state.selected_tiles_count + v);
          };
        })(this)
      });
    },
    render: function() {
      var cat;
      return div({
        className: "step recommendations " + this.props.name + " " + (this.props.on_screen ? 'on_screen' : ''),
        children: [
          this.props.categories.length ? div({
            className: "step_content",
            children: [
              p({
                children: ["Let's narrow it down even further. Select as many topics as you like."]
              }), (function() {
                var j, len, ref1, results;
                ref1 = this.props.categories;
                results = [];
                for (j = 0, len = ref1.length; j < len; j++) {
                  cat = ref1[j];
                  results.push(this.Package.TileSet({
                    page_name: this.props.page_name,
                    key: _.map(_.flatten(cat), function(tile) {
                      return tile.id;
                    }).join(":"),
                    category: cat,
                    excluded_categories: _.flatten(_.filter(this.props.initial_categories, function(tile) {
                      return tile.id === cat.id;
                    })),
                    content_type: this.props.content_type
                  }));
                }
                return results;
              }).call(this)
            ]
          }) : void 0
        ]
      });
    }
  });

  component("TileSet", {
    getInitialState: function() {
      return {
        loaded_tileset: [],
        selected_tiles: new Scribd.TileSet
      };
    },
    componentWillUnmount: function() {
      var ref1;
      return (ref1 = this.state.xhr) != null ? ref1.abort() : void 0;
    },
    load_recommended_features: function() {
      var xhr;
      xhr = $.get(this.personalization_url({
        limit: 10
      }), (function(_this) {
        return function(resp) {
          if (!resp.tiles) {
            throw "Invalid resp";
          }
          _this.setState({
            loaded_tileset: _this.state.loaded_tileset.concat([resp.tiles.slice(0, 5), resp.tiles.slice(5, 10)])
          });
          return _this.trigger("loaded_tileset_updated", {
            new_tiles: _this.state.loaded_tileset
          });
        };
      })(this));
      this.trigger("recommendation_request_begin", xhr);
      return this.setState({
        xhr: xhr
      });
    },
    componentDidMount: function() {
      this.load_recommended_features();
      this.container().on("ajax:send", (function(_this) {
        return function() {
          return _this.container().track_rats("personalization:load_more:click", {
            page: _this.props.page_name,
            loc: _this.props.category[0].long_name,
            category: _this.props.category[0].id
          });
        };
      })(this));
      this.container().on("ajax:success", (function(_this) {
        return function(e, resp) {
          if (!resp.tiles) {
            throw "Invalid resp";
          }
          if (resp.tiles.length < 5) {
            return _this.setState({
              no_more_tiles: true
            });
          } else {
            return _this.setState({
              loaded_tileset: _this.state.loaded_tileset.concat([resp.tiles])
            });
          }
        };
      })(this));
      return this.dispatch({
        "tile_click": (function(_this) {
          return function(e, v) {
            _this.setState({
              selected_features: _this.state.selected_tiles.toggle(v)
            });
            return _this.trigger("tile_select_count", _this.state.selected_tiles.included(v) ? 1 : -1);
          };
        })(this)
      });
    },
    personalization_url: function(opts) {
      var all_excluded_ids, excluded_category_ids, loaded_ids, selected_ids;
      if (opts == null) {
        opts = {};
      }
      selected_ids = _.map(this.state.selected_tiles.elements, function(tile) {
        return _.map(tile, function(item) {
          return item.id;
        });
      });
      selected_ids.push(_.map(this.props.category, function(item) {
        return item.id;
      }));
      selected_ids = _.uniq(selected_ids);
      loaded_ids = _.map(_.flatten(this.state.loaded_tileset), function(tile) {
        return tile.id;
      });
      excluded_category_ids = _.map(this.props.excluded_categories, function(tile) {
        return tile.id;
      });
      all_excluded_ids = _.uniq(loaded_ids.concat(excluded_category_ids));
      return "/personalization/tiles?limit=" + (opts.limit || 5) + "&content_type=" + this.props.content_type + "&selected=" + selected_ids + "&excludes=" + all_excluded_ids;
    },
    componentDidUpdate: function() {
      return Scribd.init_spinners();
    },
    render: function() {
      var category_title, i, row_tiles, show_loading;
      category_title = _.map(this.props.category, function(tile) {
        return tile.name;
      }).join(", ");
      show_loading = this.state.xhr && (this.state.xhr.readyState !== 4 && this.state.xhr.readyState !== 0) && this.state.loaded_tileset.length === 0;
      if (show_loading) {
        return div({
          className: "loading_screen",
          children: [
            div({
              className: "scribd_spinner rec_spinner",
              "data-size": 60
            })
          ]
        });
      }
      return div({
        className: "tile_set",
        children: [
          h2({
            className: "category_title",
            children: [category_title]
          }), (function() {
            var j, len, ref1, results;
            ref1 = this.state.loaded_tileset;
            results = [];
            for (i = j = 0, len = ref1.length; j < len; i = ++j) {
              row_tiles = ref1[i];
              results.push(this.Package.TileRow({
                tiles: row_tiles,
                selected_features: this.state.selected_tiles,
                animation: true,
                alternate_pattern: i % 2 === 0,
                offset: i * 5
              }));
            }
            return results;
          }).call(this), form({
            action: this.personalization_url(),
            method: "GET",
            "data-remote": true,
            className: "load_more_form " + (this.state.no_more_tiles ? 'no_more_tiles' : void 0),
            children: [
              this.common_button({
                className: "load_more",
                children: ["Load More"]
              })
            ]
          })
        ]
      });
    }
  });

  component("TopCategoryTileSet", {
    componentDidMount: function() {
      return this.dispatch({
        "tile_click": (function(_this) {
          return function(e, v) {
            return _this.trigger("category_selection", v);
          };
        })(this)
      });
    },
    render: function() {
      var i, row_tiles;
      return div({
        className: "step " + (this.props.on_screen ? 'on_screen' : '') + " " + this.props.name,
        children: [
          div({
            className: "step_content",
            children: [
              p({
                children: ["Select the categories you'd most love to see. Click as many as you like."]
              }), div({
                className: "tile_set",
                children: [
                  (function() {
                    var j, len, ref1, results;
                    ref1 = this.props.tileset;
                    results = [];
                    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
                      row_tiles = ref1[i];
                      results.push(this.Package.TileRow({
                        tiles: row_tiles,
                        selected_features: this.props.selected_features,
                        alternate_pattern: i % 2 === 0,
                        offset: i * 5
                      }));
                    }
                    return results;
                  }).call(this)
                ]
              })
            ]
          })
        ]
      });
    }
  });

  component("TileRow", {
    componentDidMount: function() {
      if (this.props.animation) {
        this.container().addClass("animate");
        return _.defer((function(_this) {
          return function() {
            return _this.container().addClass("expand");
          };
        })(this));
      }
    },
    render: function() {
      var i, tile, tiles_data;
      tiles_data = _.map(this.props.tiles, function(tile) {
        if (tile.constructor === Array) {
          return tile;
        } else {
          return [tile];
        }
      });
      return div({
        className: "tile_row",
        children: [
          (function() {
            var j, len, results;
            results = [];
            for (i = j = 0, len = tiles_data.length; j < len; i = ++j) {
              tile = tiles_data[i];
              if (!tile) {
                continue;
              }
              results.push(this.Package.Tile({
                tile: tile,
                tile_pattern: i + 1 + (this.props.alternate_pattern ? 5 : 0),
                key: i,
                position: i + this.props.offset,
                animation: this.props.animation,
                animation_delay: (i % 5) * 100 + 200,
                selected: this.props.selected_features.included(tile)
              }));
            }
            return results;
          }).call(this)
        ]
      });
    }
  });

  component("Tile", {
    getInitialState: function() {
      return {
        loaded: false
      };
    },
    componentDidMount: function() {
      this.state.loaded = true;
      if (this.props.animation) {
        return _.delay((function(_this) {
          return function() {
            return _this.container().addClass("expand");
          };
        })(this), this.props.animation_delay);
      }
    },
    render: function() {
      var classes, first_item, tile_title, type;
      first_item = this.props.tile[0];
      type = first_item.type;
      tile_title = _.map(this.props.tile, function(tile) {
        return tile.name;
      }).join(" & ").replace(/–/g, "-");
      classes = "tile " + type + " background_pattern_" + this.props.tile_pattern;
      if (this.props.animation) {
        classes += " animate";
      }
      if (this.props.selected) {
        classes += " selected";
      }
      if (this.state.loaded) {
        classes += " expand";
      }
      return div({
        className: classes,
        'data-type': this.props.tile.type,
        'data-id': this.props.tile.id,
        onClick: (function(_this) {
          return function() {
            return _this.trigger("tile_click", _this.props.tile, _this.props.position);
          };
        })(this),
        children: [
          type === "c" || type === "t" ? span({
            className: "tile_title"
          }, tile_title) : type === "a" ? first_item.is_character && first_item.profile_image ? [
            div({
              className: "character_container",
              children: [
                div({
                  className: "image_container",
                  children: [
                    span({
                      className: "line"
                    }), span({
                      className: "character_icon",
                      style: {
                        'backgroundImage': "url('" + first_item.profile_image + "') "
                      }
                    }), span({
                      className: "line"
                    })
                  ]
                }), div({
                  className: "character_title"
                }, first_item.name)
              ]
            })
          ] : [
            div({
              className: "tile_title author"
            }, first_item.name), div({
              className: "pen_container",
              children: [
                span({
                  className: "line"
                }), div({
                  className: "pen_icon_container",
                  children: [
                    div({
                      className: "pen_icon static"
                    }), div({
                      className: "pen_icon active"
                    }), div({
                      className: "pen_icon hover"
                    }), div({
                      className: "pen_icon selected"
                    })
                  ]
                }), span({
                  className: "line"
                })
              ]
            }), first_item.top_book ? [
              div({
                className: "book_intro"
              }, "best known for"), div({
                className: "book_title"
              }, first_item.top_book)
            ] : void 0
          ] : void 0
        ]
      });
    }
  });

  component("ProgressBar", {
    getInitialState: function() {
      return {};
    },
    componentDidUpdate: function() {
      var $section;
      $section = this.container().find(".section").first();
      return this.container().find(".cursor").css("left", this.props.current_step * $section.width());
    },
    render: function() {
      var both_content_types_class, full_bar_px, has_audiobooks, has_books, has_comics, progress_bar_px, section_count, sections;
      section_count = 4;
      sections = [];
      has_books = indexOf.call(this.props.content_types, "book") >= 0;
      has_audiobooks = indexOf.call(this.props.content_types, "audiobook") >= 0;
      has_comics = indexOf.call(this.props.content_types, "comic") >= 0;
      if ((has_books || has_audiobooks) && has_comics) {
        both_content_types_class = "both_content_types";
      }
      full_bar_px = ((this.props.current_step + 1) * 125) - 1;
      progress_bar_px = full_bar_px + 125;
      return div({
        className: "progress_bar " + both_content_types_class,
        children: [
          div({
            className: "bar_container",
            children: [
              div({
                className: "current_bar",
                style: {
                  width: progress_bar_px + "px"
                },
                children: [
                  div({
                    className: "stripe_background rolling_background"
                  })
                ]
              }), div({
                className: "extending_bar",
                style: {
                  width: full_bar_px + "px"
                }
              }), div({
                className: "empty_bar"
              })
            ]
          }), div({
            className: "section_titles",
            children: [
              span({
                className: "section_title"
              }, "Interests"), has_audiobooks || has_books ? span({
                className: "section_title double"
              }, this.props.book_audiobooks_title) : void 0, has_comics ? span({
                className: "section_title double"
              }, "Comics") : void 0
            ]
          })
        ]
      });
    }
  });

  component("NavHeader", {
    getInitialState: function() {
      return {};
    },
    next_button_opts: function(bypass_confirm, continue_label, confirm_label, opts) {
      var button_classes, disabled_class;
      if (bypass_confirm == null) {
        bypass_confirm = true;
      }
      if (continue_label == null) {
        continue_label = "Continue";
      }
      if (confirm_label == null) {
        confirm_label = "Skip";
      }
      if (opts == null) {
        opts = {};
      }
      button_classes = 'outline_btn negate';
      disabled_class = this.props.disable_navigation ? "disabled" : "";
      return {
        className: "nav_button " + (bypass_confirm ? button_classes : 'link') + " " + disabled_class,
        onClick: (function(_this) {
          return function() {
            if (_this.props.disable_navigation) {
              return;
            }
            if (bypass_confirm) {
              return _this.trigger("forward");
            } else {
              _this.container().track_rats("personalization:skip:click", {
                page: _this.props.page_name,
                loc: opts.destination || "homepage",
                step: _this.props.current_step
              });
              return _this.trigger("confirm_skip", {
                title: "Are you sure you want to skip this step?",
                confirm_text: "It will help us curate the best selections, just for you.",
                destination: opts.destination
              });
            }
          };
        })(this),
        children: bypass_confirm ? [
          span({
            children: [continue_label]
          }), span({
            className: "icon-caret icon"
          })
        ] : [
          span({
            children: [confirm_label]
          }), span({
            className: "icon-caret icon"
          })
        ]
      };
    },
    has_comics: function() {
      return indexOf.call(this.props.content_types, "comic") >= 0;
    },
    render: function() {
      var disabled_class, next_link_opts, on_forward_click;
      next_link_opts = (function() {
        if (this.props.total_steps === 4) {
          switch (this.props.current_step) {
            case 0:
            case 1:
              return this.next_button_opts(this.props.has_selection, "Continue", "Skip to Comics", {
                destination: "comics"
              });
            case 2:
              return this.next_button_opts(this.props.has_selection);
            case 3:
              return this.next_button_opts(this.props.has_selection, "Ready To Go!", "Skip");
            default:
              return {
                href: "/?personalization=true",
                className: "nav_button hidden",
                children: [""]
              };
          }
        } else {
          switch (this.props.current_step) {
            case 0:
              return this.next_button_opts(this.props.has_selection);
            case 1:
              return this.next_button_opts(this.props.has_selection, "Ready To Go!", "Skip");
            default:
              return {
                href: "/?personalization=true",
                className: "nav_button hidden",
                children: [""]
              };
          }
        }
      }).call(this);
      on_forward_click = next_link_opts.onClick;
      delete next_link_opts.onClick;
      disabled_class = this.props.disable_navigation ? "disabled" : "";
      return div({
        className: "nav_bar",
        children: [
          div({
            className: "back_button_container " + disabled_class,
            unselectable: "on",
            onClick: (function(_this) {
              return function() {
                if (!_this.props.disable_navigation) {
                  return _this.trigger("back");
                }
              };
            })(this),
            children: [
              span({
                className: "icon-caret_left icon"
              }), span({
                className: "back_button nav_button"
              }, "back")
            ]
          }), this.props.admin_user ? this.common_button({
            className: "manage_favorites outline_btn negate",
            href: "/personalization/favorites",
            children: "Admin"
          }) : void 0, CSSTransitionGroup({
            transitionName: "fade",
            transitionAppearTimeout: 500,
            transitionEnterTimeout: 500,
            transitionLeaveTimeout: 500,
            children: [
              div({
                className: "forward_button_container " + disabled_class,
                unselectable: "on",
                key: this.props.current_step + this.props.has_selection,
                onClick: on_forward_click,
                children: this.common_button(next_link_opts)
              })
            ]
          })
        ]
      });
    }
  });

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

