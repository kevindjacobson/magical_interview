/************************************************************************
 * 'browse.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:11 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-15 19:39:42 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/carousels/document_cell.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.DocumentCell = {
    add_flags: function(container, selector) {
      var cell, flag, i, len, ref, results, text;
      if (selector == null) {
        selector = ".document_cell.has_flag";
      }
      ref = container.find(selector).add(container.filter(selector));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        flag = $(cell).find('.flag');
        if (text = flag.data('text')) {
          results.push(flag.append("<span>" + text + "</span>"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-06-07 22:23:07 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/shared/grids/grouped_documents_grid.coffee (last modified: 2016-03-22 20:38:47 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.UI.GroupedDocumentsGrid = (function() {
    function GroupedDocumentsGrid(container, opts) {
      var load_more;
      this.container = container;
      this.opts = opts != null ? opts : {};
      this.merge_grouped_grid = bind(this.merge_grouped_grid, this);
      this.clean_up_after_removal = bind(this.clean_up_after_removal, this);
      this.load_documents = bind(this.load_documents, this);
      this.container = $(this.container);
      this.params = {
        page: 1,
        grouping: this.opts.grouping || 'recency',
        reading_state: this.opts.state,
        full_access: this.opts.full_access
      };
      load_more = this.container.find(".load_more_btn");
      this.load_more = new Scribd.UI.LoadMore(load_more, (function(_this) {
        return function(done) {
          _this.params.page++;
          return _this.load_documents(done);
        };
      })(this));
      Scribd.UI.GroupedDocumentsGrid.instance = this;
      $(document).on("scribd:update_grouped_grid", (function(_this) {
        return function(v, e) {
          return _this.clean_up_after_removal();
        };
      })(this));
    }

    GroupedDocumentsGrid.prototype.load_documents = function(done, pre_callback) {
      return $.ajax({
        url: this.opts.more_url,
        data: this.params,
        type: "get",
        dataType: "json",
        success: (function(_this) {
          return function(res) {
            var $grouped_grid;
            if (res.grouped_grid) {
              $grouped_grid = $(res.grouped_grid);
              _this.container.removeClass(".loading_content");
              if (_this.params.page > 1) {
                if (typeof callback === "function") {
                  callback();
                }
                _this.merge_grouped_grid($grouped_grid);
              }
              if (res.has_more) {
                _this.load_more.enable();
              }
            }
            return typeof done === "function" ? done(res.has_more) : void 0;
          };
        })(this)
      }, true);
    };

    GroupedDocumentsGrid.prototype.clean_up_after_removal = function() {
      var $grid, grid, i, len, results, selectable_grids;
      selectable_grids = this.container.find(".autogen_class_views_shared_grids_selectable_document_grid");
      results = [];
      for (i = 0, len = selectable_grids.length; i < len; i++) {
        grid = selectable_grids[i];
        $grid = $(grid);
        if (!$grid.children().length) {
          $grid.prev().remove();
          results.push($grid.remove());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    GroupedDocumentsGrid.prototype.merge_grouped_grid = function($grid) {
      var $el, el, extracted_container, first_new_grid, first_new_script, first_new_title, i, last_group_grid, last_group_title, len, ref, results;
      extracted_container = $grid.children();
      first_new_title = $grid.find("h2").first();
      first_new_grid = $grid.find(".document_grid").first();
      first_new_script = $grid.find("script").first();
      last_group_title = this.container.find("h2").last();
      last_group_grid = this.container.find(".document_grid").last();
      if (first_new_title.text() === last_group_title.text()) {
        first_new_title.remove();
        first_new_grid.children().appendTo(last_group_grid);
        first_new_grid.remove();
        first_new_script.remove();
        if ((ref = last_group_grid.data("object")) != null) {
          ref.after_new_items_added();
        }
      }
      results = [];
      for (i = 0, len = extracted_container.length; i < len; i++) {
        el = extracted_container[i];
        $el = $(el);
        if ($el.is("h2.group_header")) {
          $el.insertBefore(this.container.find(".load_more"));
        }
        if ($el.is(".document_grid")) {
          if (this.container.find(".document_grid.edit_mode").length) {
            $el.addClass("edit_mode");
          }
          $el.insertBefore(this.container.find(".load_more"));
          results.push(new Scribd.SelectableDocumentGrid($el));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return GroupedDocumentsGrid;

  })();

  Scribd.UI.LowerMarginGrid = (function(superClass) {
    extend(LowerMarginGrid, superClass);

    function LowerMarginGrid() {
      return LowerMarginGrid.__super__.constructor.apply(this, arguments);
    }

    LowerMarginGrid.prototype.margin = 40;

    return LowerMarginGrid;

  })(Scribd.UI.ObjectGrid);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/grids/selectable_document_grid.coffee (last modified: 2016-06-07 22:23:07 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.SelectableDocumentGrid = (function() {
    function SelectableDocumentGrid(container, opts) {
      this.opts = opts != null ? opts : {};
      this.container = $(container);
      new Scribd.UI.LowerMarginGrid(this.container, this.opts);
      this.container.on("click", ".select_layer", (function(_this) {
        return function(e) {
          var $el, bookmark_ids, i, ids, len, ref, ref1, selected_doc;
          $el = $(e.target);
          $el.closest(".select_layer").toggleClass("selected");
          ids = [];
          bookmark_ids = [];
          ref = _this.container.find(".select_layer.selected");
          for (i = 0, len = ref.length; i < len; i++) {
            selected_doc = ref[i];
            ids.push($(selected_doc).closest("[data-object_id]").data("object_id"));
            bookmark_ids.push((ref1 = $(selected_doc).closest("[data-my_library_data]").data("my_library_data")) != null ? ref1.bookmark_id : void 0);
          }
          $(document).trigger("scribd:selectable_document_grid:selection", {
            ids: ids,
            bookmark_ids: bookmark_ids,
            grid_id: _this.container.attr("id")
          });
          e.preventDefault();
          return e.stopPropagation();
        };
      })(this));
    }

    return SelectableDocumentGrid;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/load_more.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.LoadMore = (function() {
    LoadMore.prototype.load_on_scroll = -1;

    LoadMore.prototype.clicked_once = true;

    function LoadMore(container, load_callback, _load_on_scroll) {
      var win;
      this.load_callback = load_callback;
      this.container = $(container);
      this.container.data("object", this);
      this.top = this.container.offset().top;
      if (_load_on_scroll != null) {
        this.load_on_scroll = _load_on_scroll;
      }
      if (this.load_on_scroll !== 0) {
        win = $(window);
        win.on("scroll.load_more_btn", (function(_this) {
          return function() {
            if (_this.loading || !_this.clicked_once || _this.container.is(".disabled")) {
              return;
            }
            if (win.scrollTop() + win.height() >= _this.top) {
              return _this.load_more(function(has_more) {
                _this.load_on_scroll -= 1;
                if (_this.load_on_scroll === 0 || !has_more) {
                  return win.off("scroll.load_more_btn");
                }
              });
            }
          };
        })(this));
      }
      this.container.on("click", (function(_this) {
        return function(e) {
          if ($(e.target).closest("a").length) {
            e.preventDefault();
          }
          _this.clicked_once = true;
          return _this.load_more();
        };
      })(this));
    }

    LoadMore.prototype.set_loading = function(loading) {
      this.loading = loading;
      this.container.toggleClass("loading", loading);
      return setTimeout((function(_this) {
        return function() {
          return _this.container.toggleClass("show_loader", _this.loading);
        };
      })(this), 10);
    };

    LoadMore.prototype.reset = function() {
      return this.enable();
    };

    LoadMore.prototype.enable = function() {
      return this.container.removeClass("no_more disabled");
    };

    LoadMore.prototype.disable = function() {
      return this.container.addClass("disabled");
    };

    LoadMore.prototype.load_more = function(callback) {
      if (this.container.is(".disabled,.loading")) {
        return false;
      }
      this.set_loading(true);
      return typeof this.load_callback === "function" ? this.load_callback((function(_this) {
        return function(has_more) {
          _this.top = _this.container.offset().top;
          _this.set_loading(false);
          if (typeof callback === "function") {
            callback.apply(null, arguments);
          }
          if (!has_more) {
            return _this.container.addClass("no_more disabled");
          }
        };
      })(this)) : void 0;
    };

    return LoadMore;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/filtered_document_page.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.UI || (Scribd.UI = {});

  Scribd.UI.FilteredDocumentPage = (function() {
    function FilteredDocumentPage(container) {
      var filter_picker;
      this.container = $(container);
      filter_picker = this.container.find(".filter_picker");
      if (filter_picker.is(".open")) {
        this.container.find(".toggle_filters_btn").addClass("open");
      }
      this.container.on("click", ".toggle_filters_btn", (function(_this) {
        return function(e) {
          $(e.currentTarget).toggleClass("open");
          return filter_picker.slideToggle("fast");
        };
      })(this));
      this.container.find(".language_filter_picker").fancy_select();
      this.container.on("change", ".language_filter_picker", (function(_this) {
        return function(e) {
          return window.location = $(e.currentTarget).val();
        };
      })(this));
    }

    return FilteredDocumentPage;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/shared/pmp_promo_banner.coffee (last modified: 2016-01-15 19:39:42 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.PmpPromoBanner = (function() {
    function PmpPromoBanner(container, page_name) {
      this.page_name = page_name;
      this.container = $(container);
      this.container.dispatch("click", {
        start_trial_button: (function(_this) {
          return function($el, ev) {
            if (Scribd.logged_in) {
              _this.track_click();
              return "continue";
            }
            ev.preventDefault();
            return Scribd.SignIn.open("subscribe", $el.attr("href"));
          };
        })(this)
      });
    }

    PmpPromoBanner.prototype.track_click = function() {
      return this.container.track({
        category: "pmp_promo_banner:" + this.page_name + "_page",
        action: 'click',
        label: 'start_trial_button'
      });
    };

    return PmpPromoBanner;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/browse/index.coffee (last modified: 2015-11-10 00:53:08 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.Browse || (Scribd.Browse = {});

  Scribd.Browse.GridPage = (function(superClass) {
    extend(GridPage, superClass);

    function GridPage(container) {
      var load_more, params;
      GridPage.__super__.constructor.apply(this, arguments);
      this.fit_to_width();
      Scribd.hook_tooltips(this.container);
      this.container.find("[data-default_text]").placeholder_text();
      params = $.parseQuery(window.location.search);
      params.page = parseInt(params.page) || 1;
      new Scribd.UI.FilteredDocumentPage(this.container);
      this.container.find(".sub_category_select").fancy_select().on("change", (function(_this) {
        return function(e) {
          return window.location = $(e.target).val();
        };
      })(this));
      this.document_drop = this.container.find(".document_drop");
      load_more = this.container.find(".load_more_btn");
      if (load_more.length) {
        new Scribd.UI.LoadMore(load_more, (function(_this) {
          return function(done) {
            params.page++;
            return $.ajax({
              url: window.location.pathname,
              data: params,
              type: "get",
              dataType: "json",
              success: function(res) {
                var $new_items;
                $new_items = $(res.objects).children().appendTo(_this.document_drop);
                _this.fit_to_width();
                done(res.has_more);
                return _this.after_new_items_added($new_items);
              }
            });
          };
        })(this));
      }
    }

    return GridPage;

  })(Scribd.UI.ObjectGrid);

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

