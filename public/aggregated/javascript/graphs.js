/************************************************************************
 * 'graphs.js'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * Last modified: 2016-07-14 01:06:05 +0000
 * Generated at: 2016-07-14 16:15:12 +0000
 ************************************************************************/


/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :asset_packager_compatibility, 'config/asset_packages.yml' (last modified: 2016-07-14 01:06:05 +0000)
 ************************************************************************/





/************************************************************************
 * :files, 'public/javascripts/shared', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: (none))
 ************************************************************************/





/************************************************************************
 * :files, 'app/views', ... (last modified: 2016-01-04 22:31:52 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/admin/graphs/graphs/generic_graph.coffee (last modified: 2016-01-04 22:31:52 +0000)
   ---------------------------------------------------------------------- */
(function() {
  Scribd.Admin.Graphs.GenericGraph = (function() {
    function GenericGraph() {
      var that;
      this.DAILY = 1;
      this.WEEKLY = 7;
      this.MONTHLY = 30;
      this.margin = {
        top: 20,
        right: 40,
        bottom: 30,
        left: 40
      };
      if (this.param("legend") === "false") {
        this.margin.right = 0;
      }
      this.width = this.param("width") || ($(window).width() - 40) || 960;
      this.height = this.param("height") || ($(window).height() - 320) || 400;
      this.width = this.width - this.margin.left - this.margin.right;
      this.height = this.height - this.margin.top - this.margin.bottom;
      this.x = d3.time.scale().domain([Date.parse(this.start_date), Date.parse(this.end_date)]).rangeRound([0, this.width - (this.width / this.data.length)]);
      this.y = d3.scale.linear().range([this.height, 0]);
      this.xAxis = d3.svg.axis().scale(this.x).orient("bottom");
      if (this.frequency === this.DAILY) {
        this.xAxis.ticks(d3.time.weeks, 1).tickFormat(d3.time.format('%b %d'));
      } else {
        this.xAxis.ticks(d3.time.months, 1).tickFormat(d3.time.format('%b'));
      }
      this.yAxis = d3.svg.axis().scale(this.y).orient("left").tickFormat(d3.format(".2s"));
      this.svg = d3.select("#graph").append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      this.palettes = [["#56A75D", "#B58DCA", "#76ADD3", "#E4565F", "#F1D35C"], ["#50B432", "#058DC7", "#FF7F0E", "#9467BD", "#983C39", "#B58923", "ECD078", "D95B43", "C02942", "542437", "53777A"], ["#b58900", "#cb4b16", "#dc322f", "#d33682", "#6c71c4", "#268bd2", "#2aa198", "#859900"], ["#65CDE8", "#EB5664", "#F4ECA4", "#70C7A7", "#BBBBBB", "#F3B687", "#DCDBBF"], ["ECD078", "D95B43", "C02942", "542437", "53777A"], ["D9CEB2", "948C75", "D5DED9", "7A6A53", "99B2B7"]];
      this.palette = this.param("palette") && parseInt(this.param("palette")) < this.palettes.length ? this.palettes[parseInt(this.param("palette"))] : this.palettes[0];
      this.color = this.keys.length < this.palette.length ? d3.scale.ordinal().range(this.palette) : d3.scale.category20();
      if (this.param("title") === "false") {
        $("#title").hide();
      }
      this.mouseOverActive = true;
      that = this;
      $("html").dblclick(function() {
        return that.mouseOverActive = !that.mouseOverActive;
      });
      this.draw();
    }

    GenericGraph.prototype.draw = function() {
      this.setDomains();
      if (this.param("legend") !== "false") {
        this.drawLegend();
      }
      if (this.param("axes") !== "false") {
        if (this.param("xaxis") !== "false") {
          this.drawXAxis();
        }
        if (this.param("yaxis") !== "false") {
          this.drawYAxis();
        }
      }
      return this.addData();
    };

    GenericGraph.prototype.setDomains = function() {
      throw "plz override";
    };

    GenericGraph.prototype.addData = function() {
      throw "plz override";
    };

    GenericGraph.prototype.drawXAxis = function() {
      var x_ticks;
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis).append("text").attr("dy", "1.71em").style("text-anchor", "end").text(this.x_axis_label);
      if (this.frequency >= this.WEEKLY && this.type === "stacked_bar_chart") {
        x_ticks = this.svg.selectAll("g.x.axis g text");
        x_ticks.attr("x", (this.width / x_ticks[0].length) / 2);
        if (this.frequency === this.WEEKLY) {
          return d3.select(x_ticks[0].pop()).attr("display", "none");
        }
      }
    };

    GenericGraph.prototype.drawYAxis = function() {
      return this.svg.append("g").attr("class", "y axis").call(this.yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text(this.y_axis_label);
    };

    GenericGraph.prototype.drawLegend = function() {
      var legend;
      return false;
      legend = this.svg.selectAll(".legend").data(this.color.domain().slice()).enter().append("g").attr("class", "legend").attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(0," + i * 20 + ")";
        };
      })(this));
      legend.append("rect").attr("x", this.width - 18).attr("width", 18).attr("height", 18).style("fill", this.color);
      return legend.append("text").attr("x", this.width - 24).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function(d) {
        return d;
      });
    };

    GenericGraph.prototype.param = function(name) {
      var regex, regexS, results;
      name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
      regexS = "[\\?&]" + name + "=([^&#]*)";
      regex = new RegExp(regexS);
      results = regex.exec(window.location.search);
      if (results === null) {
        return null;
      } else {
        return decodeURIComponent(results[1].replace(/\+/g, " "));
      }
    };

    GenericGraph.prototype.showTooltip = function(data) {
      var date, date_moment, dayOfWeek, event, events, i, j, k, key, keys, len, len1, tooltip, tooltip_events, vals;
      date_moment = this.getDate(data);
      date = date_moment.format("MM/DD/YY");
      dayOfWeek = date_moment.format("dddd");
      keys = this.getKeys(data);
      vals = this.getVals(data);
      tooltip = date + " (" + dayOfWeek + ")<br />Total: " + (_.reduce(vals, (function(sum, val) {
        return sum + val;
      }), 0)) + "<br />";
      for (i = j = 0, len = keys.length; j < len; i = ++j) {
        key = keys[i];
        if (parseInt(vals[i]) !== 0) {
          tooltip += "<div class='legend-rect' style='background-color: " + (this.color(key)) + "'></div>";
          tooltip += key + ": " + vals[i] + "<br />";
        }
      }
      $("#stats").html(tooltip);
      if (_.size(this.events) !== 0) {
        tooltip_events = "Events: <br/>";
        if (events = this.events[date]) {
          for (k = 0, len1 = events.length; k < len1; k++) {
            event = events[k];
            tooltip_events += "-  " + _.compact([event.summary, event.description]).join(' - ') + "<br />";
          }
        } else {
          tooltip_events += "- No events for date.";
        }
        return $("#events").html(tooltip_events);
      }
    };

    GenericGraph.prototype.setHighlighted = function(elem) {
      if (this.prevHighlighted) {
        this.prevHighlighted.classed('highlight', false);
      }
      elem.classed('highlight', true);
      return this.prevHighlighted = elem;
    };

    GenericGraph.prototype.addMouseEvent = function(cols, func) {
      var that;
      that = this;
      return d3.select("body").on("mousemove", function() {
        var d, i, x0;
        if (that.mouseOverActive) {
          x0 = that.x.invert(d3.mouse(this)[0] - 60);
          i = that.bisectDate(cols, x0, 1);
          d = cols[i];
          that.showTooltip(d);
          return that.setHighlighted(func(d, i));
        }
      });
    };

    return GenericGraph;

  })();

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/admin/graphs/graphs/stacked_bar_chart.coffee (last modified: 2016-01-04 22:31:52 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.Admin.Graphs.StackedBarChart = (function(superClass) {
    extend(StackedBarChart, superClass);

    function StackedBarChart(keys, data1, start_date, end_date, x_axis_label, y_axis_label, frequency, events) {
      this.keys = keys;
      this.data = data1;
      this.start_date = start_date;
      this.end_date = end_date;
      this.x_axis_label = x_axis_label;
      this.y_axis_label = y_axis_label;
      this.frequency = frequency;
      this.events = events;
      this.events = _.groupBy(this.events, function(e) {
        return moment(e.start.date || e.start.dateTime).format("MM/DD/YY");
      });
      this.type = "stacked_bar_chart";
      StackedBarChart.__super__.constructor.apply(this, arguments);
    }

    StackedBarChart.prototype.setDomains = function() {
      var datum, j, k, len, len1, ref, ref1, total, val, y_max;
      this.color.domain(this.keys);
      y_max = 0;
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        datum = ref[j];
        total = 0;
        ref1 = datum[1];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          val = ref1[k];
          total += val;
        }
        y_max = d3.max([y_max, total]);
      }
      return this.y.domain([0, y_max]);
    };

    StackedBarChart.prototype.bisectDate = d3.bisector(function(d) {
      return d[0].date;
    }).left;

    StackedBarChart.prototype.getDate = function(data) {
      return moment(data[0].date);
    };

    StackedBarChart.prototype.getKeys = function(data) {
      var datum, j, len, results;
      results = [];
      for (j = 0, len = data.length; j < len; j++) {
        datum = data[j];
        results.push(this.keys[datum.index]);
      }
      return results;
    };

    StackedBarChart.prototype.getVals = function(data) {
      var datum, j, len, results;
      results = [];
      for (j = 0, len = data.length; j < len; j++) {
        datum = data[j];
        results.push(datum.y1 - datum.y0);
      }
      return results;
    };

    StackedBarChart.prototype.addData = function() {
      var cols, d, datum, index, j, k, len, len1, new_data, recent, ref, ref1, state, y0, y1;
      cols = [];
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        datum = ref[j];
        y0 = 0;
        index = 0;
        new_data = [];
        ref1 = datum[1];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          d = ref1[k];
          y1 = y0 + d;
          new_data.push({
            y0: y0,
            y1: y1,
            index: index,
            date: Date.parse(datum[0])
          });
          y0 = y1;
          index += 1;
        }
        cols.push(new_data);
      }
      state = this.svg.selectAll(".state").data(cols).enter().append("g").attr("class", "g").attr("id", (function(_this) {
        return function(d, i) {
          return "col_" + i;
        };
      })(this)).attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(" + (_this.x(d[0].date) + 5) + ", 0)";
        };
      })(this)).classed("event", (function(_this) {
        return function(d) {
          if (_this.events[moment(d[0].date).format("MM/DD/YY")]) {
            return true;
          } else {
            return false;
          }
        };
      })(this)).classed("sunday", (function(_this) {
        return function(d) {
          return moment(d[0].date).day() === 0 && _this.frequency === _this.DAILY;
        };
      })(this));
      state.selectAll("rect").data(function(d) {
        return d;
      }).enter().append("rect").attr("width", (this.width / this.data.length) - 10).attr("y", (function(_this) {
        return function(d) {
          return _this.y(d.y1);
        };
      })(this)).attr("height", (function(_this) {
        return function(d) {
          return _this.y(d.y0) - _this.y(d.y1);
        };
      })(this)).style("fill", (function(_this) {
        return function(d, i) {
          return _this.color(_this.keys[d.index]);
        };
      })(this));
      this.addMouseEvent(cols, function(d, i) {
        return d3.select($("#col_" + i)[0]);
      });
      recent = state[0].pop();
      this.showTooltip(recent.__data__);
      return this.setHighlighted(d3.select(recent));
    };

    return StackedBarChart;

  })(Scribd.Admin.Graphs.GenericGraph);

}).call(this);


/* ----------------------------------------------------------------------
   - app/views/admin/graphs/graphs/line_chart.coffee (last modified: 2016-01-04 22:31:52 +0000)
   ---------------------------------------------------------------------- */
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scribd.Admin.Graphs.LineChart = (function(superClass) {
    extend(LineChart, superClass);

    function LineChart(keys, data1, start_date, end_date, x_axis_label, y_axis_label, frequency, events) {
      this.keys = keys;
      this.data = data1;
      this.start_date = start_date;
      this.end_date = end_date;
      this.x_axis_label = x_axis_label;
      this.y_axis_label = y_axis_label;
      this.frequency = frequency;
      this.events = events;
      this.events = _.groupBy(this.events, function(e) {
        return moment(e.start.date || e.start.dateTime).format("MM/DD/YY");
      });
      this.type = "line_chart";
      LineChart.__super__.constructor.apply(this, arguments);
    }

    LineChart.prototype.setDomains = function() {
      var datum, j, len, local_max, ref, y_max;
      this.color.domain(this.keys);
      y_max = 0;
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        datum = ref[j];
        local_max = d3.max(datum[1]);
        y_max = d3.max([y_max, local_max]);
      }
      return this.y.domain([0, y_max]);
    };

    LineChart.prototype.bisectDate = d3.bisector(function(d) {
      return d.date;
    }).left;

    LineChart.prototype.getDate = function(data) {
      return moment(data.date);
    };

    LineChart.prototype.getKeys = function(data) {
      var datum, j, len, ref, results;
      ref = data.kv;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        datum = ref[j];
        results.push(this.keys[datum.key]);
      }
      return results;
    };

    LineChart.prototype.getVals = function(data) {
      var datum, j, len, ref, results;
      ref = data.kv;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        datum = ref[j];
        results.push(datum.val);
      }
      return results;
    };

    LineChart.prototype.addData = function() {
      var chartlines, d, date_data, datum, i, index, item, j, k, key, l, len, len1, len2, len3, lines, m, points, recent, ref, ref1, ref2, ref3, state;
      lines = [];
      points = [];
      ref = this.keys;
      for (j = 0, len = ref.length; j < len; j++) {
        key = ref[j];
        lines.push({
          key: key,
          items: []
        });
      }
      ref1 = this.data;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        datum = ref1[k];
        date_data = [];
        index = 0;
        ref2 = datum[1];
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          d = ref2[l];
          date_data.push({
            key: index,
            val: d
          });
          index += 1;
        }
        ref3 = datum[1];
        for (i = m = 0, len3 = ref3.length; m < len3; i = ++m) {
          item = ref3[i];
          lines[i].items.push({
            item: item,
            date: Date.parse(datum[0])
          });
          points.push({
            item: item,
            date: Date.parse(datum[0]),
            key: lines[i].key,
            kv: date_data
          });
        }
      }
      state = this.svg.selectAll("circle").data(points).enter().append("svg:circle").attr("class", (function(_this) {
        return function(d) {
          return "circle date-" + d.date;
        };
      })(this)).attr("cx", (function(_this) {
        return function(d) {
          return _this.x(d.date);
        };
      })(this)).attr("cy", (function(_this) {
        return function(d) {
          return _this.y(d.item);
        };
      })(this)).attr("r", 10).attr("fill", (function(_this) {
        return function(d) {
          return _this.color(d.key);
        };
      })(this)).classed("event", (function(_this) {
        return function(d) {
          if (_this.events[moment(d.date).format("MM/DD/YY")]) {
            return true;
          } else {
            return false;
          }
        };
      })(this)).classed("sunday", (function(_this) {
        return function(d) {
          if (moment(d.date).day() === 0 && _this.frequency === _this.DAILY) {
            return true;
          } else {
            return false;
          }
        };
      })(this));
      chartlines = this.svg.selectAll(".chartline").data(lines).enter().append("g").attr("class", "city");
      this.line = d3.svg.line().interpolate("linear").x((function(_this) {
        return function(d, i) {
          return _this.x(d.date);
        };
      })(this)).y((function(_this) {
        return function(d, i) {
          return _this.y(d.item);
        };
      })(this));
      chartlines.append("path").attr("class", "line").attr("d", (function(_this) {
        return function(d) {
          return _this.line(d.items);
        };
      })(this)).style("stroke", (function(_this) {
        return function(d) {
          return _this.color(d.key);
        };
      })(this)).style("fill", "none").style("stroke-width", "2px");
      this.addMouseEvent(points, function(d, i) {
        return d3.selectAll(".date-" + d.date);
      });
      recent = state[0].pop();
      this.showTooltip(recent.__data__);
      return this.setHighlighted(d3.selectAll(".date-" + recent.__data__.date));
    };

    return LineChart;

  })(Scribd.Admin.Graphs.GenericGraph);

}).call(this);




/************************************************************************
 * :class_inlines, 'app/views', ... (last modified: 2016-01-04 22:31:52 +0000)
 ************************************************************************/

/* ----------------------------------------------------------------------
   - app/views/admin/graphs/dashboard.coffee (last modified: 2016-01-04 22:31:52 +0000)
   ---------------------------------------------------------------------- */
(function() {
  $.ready(function() {}, Scribd.animatePages = function(pages) {
    var current_page, i, len, page;
    for (i = 0, len = pages.length; i < len; i++) {
      page = pages[i];
      $(page).hide();
    }
    current_page = 0;
    $(pages[current_page]).show();
    return setInterval(function() {
      var next_page;
      next_page = current_page + 1;
      if (next_page === pages.length) {
        next_page = 0;
      }
      $(pages[current_page]).hide();
      $(pages[next_page]).fadeIn();
      return current_page = next_page;
    }, 20000);
  });

}).call(this);




/************************************************************************
 * :class_inlines, 'spec_javascripts/js_spec', ... (last modified: (none))
 ************************************************************************/

